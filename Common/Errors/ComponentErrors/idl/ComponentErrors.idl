#ifndef  _ComponentErrors_IDL_
#define  _ComponentErrors_IDL_
	
/*******************************************************************************
* ALMA - Atacama Large Millimiter Array
* (c) European Southern Observatory, 2003 
*
*This library is free software; you can redistribute it and/or
*modify it under the terms of the GNU Lesser General Public
*License as published by the Free Software Foundation; either
*version 2.1 of the License, or (at your option) any later version.
*
*This library is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*Lesser General Public License for more details.
*
*You should have received a copy of the GNU Lesser General Public
*License along with this library; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: AES2IDL.xslt,v 1.9 2007/05/23 08:55:56 nbarriga Exp $"
*************  THIS FILE IS AUTOMATICALLY GENERATED !!!!!!
*/

#include <acserr.idl>

#pragma prefix "alma"
 	
module ACSErr 
{
	// type
	const ACSErr::ACSErrType ComponentErrors = 2001;
}; // module ACSErr

module ComponentErrors
{
	 const ACSErr::ErrorCode NoError = 0;
	 const ACSErr::ErrorCode MemoryAllocation = 1;
	 const ACSErr::ErrorCode CDBAccess = 2;
	 const ACSErr::ErrorCode CDBFieldFormat = 3;
	 const ACSErr::ErrorCode ThreadError = 4;
	 const ACSErr::ErrorCode SocketError = 5;
	 const ACSErr::ErrorCode PropertyError = 6;
	 const ACSErr::ErrorCode OperationError = 7;
	 const ACSErr::ErrorCode WatchDogError = 8;
	 const ACSErr::ErrorCode Unexpected = 9;
	 const ACSErr::ErrorCode IRALibraryResource = 10;
	 const ACSErr::ErrorCode ValidationError = 11;
	 const ACSErr::ErrorCode ValueOutofRange = 12;
	 const ACSErr::ErrorCode Timeout = 13;
	 const ACSErr::ErrorCode CouldntGetComponent = 14;
	 const ACSErr::ErrorCode CouldntReleaseComponent = 15;
	 const ACSErr::ErrorCode CouldntGetAttribute = 16;
	 const ACSErr::ErrorCode CouldntCallOperation = 17;
	 const ACSErr::ErrorCode CORBAProblem = 18;
	 const ACSErr::ErrorCode InitializationProblem = 19;
	 const ACSErr::ErrorCode NotificationChannelError = 20;
	 const ACSErr::ErrorCode TimerError = 21;
	 const ACSErr::ErrorCode NotAllowed = 22;
	 const ACSErr::ErrorCode FileIOError = 23;
	 const ACSErr::ErrorCode ComponentNotActive = 24;
	
	// excption for type:
	exception ComponentErrorsEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	// excptions for codes:
	exception MemoryAllocationEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CDBAccessEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CDBFieldFormatEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception ThreadErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SocketErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception PropertyErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception OperationErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception WatchDogErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception UnexpectedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception IRALibraryResourceEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception ValidationErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception ValueOutofRangeEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception TimeoutEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CouldntGetComponentEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CouldntReleaseComponentEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CouldntGetAttributeEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CouldntCallOperationEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CORBAProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception InitializationProblemEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception NotificationChannelErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception TimerErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception NotAllowedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception FileIOErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception ComponentNotActiveEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	
}; // module ComponentErrors

#endif

