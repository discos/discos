#ifndef  _ASErrors_IDL_
#define  _ASErrors_IDL_
	
/*******************************************************************************
* ALMA - Atacama Large Millimiter Array
* (c) European Southern Observatory, 2003 
*
*This library is free software; you can redistribute it and/or
*modify it under the terms of the GNU Lesser General Public
*License as published by the Free Software Foundation; either
*version 2.1 of the License, or (at your option) any later version.
*
*This library is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*Lesser General Public License for more details.
*
*You should have received a copy of the GNU Lesser General Public
*License along with this library; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: AES2IDL.xslt,v 1.9 2007/05/23 08:55:56 nbarriga Exp $"
*************  THIS FILE IS AUTOMATICALLY GENERATED !!!!!!
*/

#include <acserr.idl>

#pragma prefix "alma"
 	
module ACSErr 
{
	// type
	const ACSErr::ACSErrType ASErrors = 2003;
}; // module ACSErr

module ASErrors
{
	 const ACSErr::ErrorCode NoError = 0;
	 const ACSErr::ErrorCode USDCalibrated = 1;
	 const ACSErr::ErrorCode LibrarySocketError = 2;
	 const ACSErr::ErrorCode SocketReconn = 3;
	 const ACSErr::ErrorCode SocketFail = 4;
	 const ACSErr::ErrorCode SocketTOut = 5;
	 const ACSErr::ErrorCode SocketNotRdy = 6;
	 const ACSErr::ErrorCode MemoryAllocation = 7;
	 const ACSErr::ErrorCode LANConnectionError = 8;
	 const ACSErr::ErrorCode LAN_Unavailable = 9;
	 const ACSErr::ErrorCode sendCmdErr = 10;
	 const ACSErr::ErrorCode Incomplete = 11;
	 const ACSErr::ErrorCode InvalidResponse = 12;
	 const ACSErr::ErrorCode Nak = 13;
	 const ACSErr::ErrorCode CDBAccessError = 14;
	 const ACSErr::ErrorCode USDConnectionError = 15;
	 const ACSErr::ErrorCode USDTimeout = 16;
	 const ACSErr::ErrorCode USDUnavailable = 17;
	 const ACSErr::ErrorCode USDError = 18;
	 const ACSErr::ErrorCode DevIOError = 19;
	 const ACSErr::ErrorCode corbaError = 20;
	 const ACSErr::ErrorCode USDStillRunning = 21;
	 const ACSErr::ErrorCode USDunCalibrated = 22;
	 const ACSErr::ErrorCode CannotGetUSD = 23;
	
	// excption for type:
	exception ASErrorsEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	// excptions for codes:
	exception USDCalibratedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception LibrarySocketErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SocketReconnEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SocketFailEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SocketTOutEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception SocketNotRdyEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception MemoryAllocationEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception LANConnectionErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception LAN_UnavailableEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception sendCmdErrEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception IncompleteEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception InvalidResponseEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception NakEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CDBAccessErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception USDConnectionErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception USDTimeoutEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception USDUnavailableEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception USDErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception DevIOErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception corbaErrorEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception USDStillRunningEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception USDunCalibratedEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	exception CannotGetUSDEx {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	
}; // module ASErrors

#endif

