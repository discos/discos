#ifndef _XBackendsErrors_H_
#define _XBackendsErrors_H_

/*******************************************************************************
* ALMA - Atacama Large Millimiter Array
* (c) European Southern Observatory, 2003 
*
*This library is free software; you can redistribute it and/or
*modify it under the terms of the GNU Lesser General Public
*License as published by the Free Software Foundation; either
*version 2.1 of the License, or (at your option) any later version.
*
*This library is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*Lesser General Public License for more details.
*
*You should have received a copy of the GNU Lesser General Public
*License along with this library; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: XBackendsErrors.h,v 1.1 2010/06/21 09:08:59 bliliana Exp $"
*************  THIS FILE IS AUTOMATICALLY GENERATED !!!!!!
*/
	
#include "XBackendsErrorsC.h"

#include "acserrExceptionManager.h"

namespace XBackendsErrors
{

class NoErrorCompletion: public ACSErr::CompletionImpl
{
	static const ACSErr::ACSErrType m_etype=ACSErr::XBackendsErrors; // = 2006
	static const ACSErr::ErrorCode m_code = NoError;
	static const char m_shortDescription[];
		
	public:

	const char * getShortDescription() { return NoErrorCompletion::m_shortDescription; }
	NoErrorCompletion () : ACSErr::CompletionImpl(m_etype, m_code) {}				
 };
 
class NoSettingCompletion: public ACSErr::CompletionImpl
{
	static const ACSErr::ACSErrType m_etype=ACSErr::XBackendsErrors; // = 2006
	static const ACSErr::ErrorCode m_code = NoSetting;
	static const char m_shortDescription[];
		
	public:

	const char * getShortDescription() { return NoSettingCompletion::m_shortDescription; }
	NoSettingCompletion (const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
		ACSErr::CompletionImpl(m_etype, m_code, file, line, routine, m_shortDescription, severity) {}
					
	NoSettingCompletion (ACSErr::Completion *pc, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
		ACSErr::CompletionImpl(*pc, m_etype, m_code, file, line, routine, m_shortDescription, severity) {}
		
	NoSettingCompletion (const ACSErr::Completion &pc, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
		ACSErr::CompletionImpl(pc, m_etype, m_code, file, line, routine, m_shortDescription, severity) {}
		
	NoSettingCompletion (ACSErr::CompletionImpl *pc, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
		ACSErr::CompletionImpl(pc, m_etype, m_code, file, line, routine, m_shortDescription, severity) {}
		
	NoSettingCompletion (const ACSErr::ErrorTrace &et, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
		ACSErr::CompletionImpl(et, m_etype, m_code, file, line, routine, m_shortDescription, severity) {}	
						
	template <class T >
	NoSettingCompletion (const T &pe, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
		ACSErr::CompletionImpl(ETHolder<T>(pe).getErrorTrace(), m_etype, m_code, file, line, routine, m_shortDescription, severity) {}

};


 // ******************************************************************* 
 //                                excptions for type:
 // ******************************************************************* 
class XBackendsErrorsExImpl : public ACSErr::ACSbaseExImpl
{
	protected:
	XBackendsErrorsExImpl(const ACSErr::ErrorTrace &et) : ACSErr::ACSbaseExImpl(et) {}
	
	XBackendsErrorsExImpl (ACSErr::ACSErrType et, ACSErr::ErrorCode ec, const char* file, 
						int line, const char* routine, const char* sd,
					   	ACSErr::Severity severity):
		   			ACSErr::ACSbaseExImpl(et, ec, file, line, routine, sd, severity) {}
				
	XBackendsErrorsExImpl (const ACSErr::ErrorTrace &pet,
						   ACSErr::ACSErrType et, ACSErr::ErrorCode ec,
						   const char* file, int line, const char* routine, const char* sd, 
						   ACSErr::Severity severity) :
					ACSErr::ACSbaseExImpl(pet, et, ec, file, line, routine, sd, severity) {}
	
	public:
					
	XBackendsErrorsExImpl (XBackendsErrors::XBackendsErrorsEx & ex) : ACSErr::ACSbaseExImpl(ex.errorTrace) {}
			
	XBackendsErrors::XBackendsErrorsEx getXBackendsErrorsEx () { return XBackendsErrors::XBackendsErrorsEx (getErrorTrace()); }
};


 // ******************************************************************* 
 //                                excptions for codes:
 // ******************************************************************* 
class NoSettingExImpl: public XBackendsErrorsExImpl
{
	static const ACSErr::ACSErrType m_etype=ACSErr::XBackendsErrors;
	static const ACSErr::ErrorCode m_code = NoSetting;
	static const char m_shortDescription[]  ;
	
	public:

        static const char * getShortDescription() { return m_shortDescription;}
	NoSettingExImpl(const NoSettingExImpl& ex) :
			XBackendsErrorsExImpl(const_cast<NoSettingExImpl&>(ex).getErrorTrace()) {}
		
	NoSettingExImpl (const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
			XBackendsErrorsExImpl(m_etype, m_code, file, line, routine, m_shortDescription, severity) {}
	
	NoSettingExImpl (const ACSErr::ErrorTrace &et, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
			XBackendsErrorsExImpl(et, m_etype, m_code, file, line, routine, m_shortDescription, severity) {}
				
	NoSettingExImpl (ACSErr::CompletionImpl *pc, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
			XBackendsErrorsExImpl((pc->isErrorFree() ? ACSErr::ErrorTrace()  : pc->getErrorTraceHelper()->getErrorTrace()), m_etype, m_code, file, line, routine, m_shortDescription, severity) {}
				
	NoSettingExImpl (const XBackendsErrors::NoSettingEx & ex) : 
			XBackendsErrorsExImpl(ex.errorTrace) {}
			
	XBackendsErrors::NoSettingEx getNoSettingEx () { return XBackendsErrors::NoSettingEx (getErrorTrace()); }
	
	template <class T >
	NoSettingExImpl (const T& pe, const char* file, int line, const char* routine, ACSErr::Severity severity=DEFAULT_SEVERITY) : 
			XBackendsErrorsExImpl(ETHolder<T>(pe).getErrorTrace(), m_etype, m_code, file, line, routine, m_shortDescription, severity) {}


};

}

#endif
