#! /usr/bin/env python
from Acspy.Clients.SimpleClient import PySimpleClient
import Acspy.Common.Err
import maciErrType
import maciErrTypeImpl
import ClientErrorsImpl 
import ACSLog


import ACS, ACS__POA                                  # Import the Python CORBA stubs for BACI
from PyQt4 import Qt
from PyQt4.QtCore import   pyqtSlot,QThread,QMutex,QTimer
import PyQt4.Qwt5 as Qwt
import sys,getopt
from time import sleep


import calibrationtool_ui # file generated by pyuic4 but modified to include 
		          #custom widgets.
			  
__version__ = '$Id'


'''
@version $Id$
'''


class MyWorker(QThread):
	def __init__(self,component,parent=None):
		self.Mutex =QMutex()
		QThread.__init__(self,parent)
		self.component=component
	        self.run=True;
                self.arrayDataY=self.component._get_arrayDataY()
		self.arrayDataX=self.component._get_arrayDataX()
 
	def run (self):
              try:
        	
#	           arrayDataX=self.component._get_arrayDataX()
#        	   arrayDataY=self.component._get_arrayDataY()
	           while self.run:
 
        		(datax,compl)=self.arrayDataX.get_sync()
		
	         	self.emit(Qt.SIGNAL("arrayDataX"),datax)
                        (datay,compl2)=self.arrayDataY.get_sync()
                        self.emit(Qt.SIGNAL("arrayDataY"),datay)
 
		        QThread.msleep(10)
                   print "Exited from thread"
                   
	      except Exception,ex:
			newEx = ClientErrorsImpl.CouldntAccessPropertyExImpl(exception=ex, create=1)
        		newEx.setPropertyName("")
         #ACS_LOG_ERROR
        		newEx.log(self.simpleClient.getLogger(),ACSLog.ACS_LOG_ERROR)

                        self.run=False
                        
	def __del__(self):
		pass
 
 



class Application(Qt.QDialog,calibrationtool_ui.Ui_CalibrationToolDialog):
 
	def __init__(self,compname,parent=None):
		Qt.QDialog.__init__(self)
		self.componentname = compname
 		print self.componentname
		self.simpleClient = PySimpleClient()
		try:
			component= self.simpleClient.getComponent(self.componentname)
     			self.thread=MyWorker(component)
			self.setupUi(self)
			self.setWindowTitle(self.componentname)

			self.connect(self.thread,Qt.SIGNAL("arrayDataX"),self.qwtPlot_datax.setVal)
    	 		self.connect(self.thread,Qt.SIGNAL("arrayDataY"),self.qwtPlot_datay.setVal)
		except  Exception,ex:
			newEx = ClientErrorsImpl.CouldntAccessComponentExImpl(exception=ex, create=1)
        		newEx.setComponentName(self.componentname)
         #ACS_LOG_ERROR
        		newEx.log(self.simpleClient.getLogger(),ACSLog.ACS_LOG_ERROR)
        		self.simpleClient.disconnect()
        		sys.exit(-1)	
 	 
	
	
 
			
	def run(self):
		self.thread.start()
					
	def __del__(self):
		self.thread.run=False  
                try:
 		     self.simpleClient.releaseComponent(self.componentname)
		     self.simpleClient.disconnect()
                except Exception,ex:
                      print "exception"
                      
		print "end app"
		

def usage(nameapp):
        print nameapp+" [component name]"
        
        
  

 

def main(args):
	try:
           opts,args=      opts, args = getopt.getopt(sys.argv[1:],"h",["help"])
        except getopt.GetoptError, err:
            print str(err)
            usage()
            sys.exit(1)
         
        for o,a in opts:
            if o in ("-h", "--help"):
              usage()
              sys.exit()
        
        if len(args)==0:
            componentname="MANAGEMENT/Point"
        else:
            componentname=args[0]
         
           
        app = Qt.QApplication(args)
	a=Application(componentname) #passa il nome del component al costruttore
	a.run()
	p=a.show()
		
     	sys.exit(app.exec_())
	sleep(2)
if __name__=='__main__':
	main(sys.argv)
