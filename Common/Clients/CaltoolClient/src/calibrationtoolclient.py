#! /usr/bin/env python
from Acspy.Clients.SimpleClient import PySimpleClient
import ACS, ACS__POA                                  # Import the Python CORBA stubs for BACI
from PyQt4 import Qt
from PyQt4.QtCore import   pyqtSlot,QThread,QMutex
import PyQt4.Qwt5 as Qwt
import sys
from time import sleep

import ClientErrorsImpl 

import Acspy.Common.Err
import maciErrType
import maciErrTypeImpl
import ClientErrorsImpl

import calibrationtool_ui # file generated by pyuic4 but modified to include 
		          #custom widgets.
			  

'''
@version $id 
'''


class Worker(QThread):
	def __init__(self,component,parent=None):
#		self.Mutex =QMutex()
		QThread.__init__(self,parent)
		self.component=component
	

	def run (self):
	   arrayDataX=self.component._get_arrayDataX()
	   arrayDataY=self.component._get_arrayDataY()
	   while 1:
		(datax,compl)=arrayDataX.get_sync()
		self.emit(Qt.SIGNAL("arrayDataX"),datax)
		(datay,compl)=arrayDataY.get_sync()
		self.emit(Qt.SIGNAL("arrayDataY"),datay)
		QThread.msleep(10)
		
	def __del__(self):
		pass
	
 



class Application(Qt.QDialog,calibrationtool_ui.Ui_CalibrationToolDialog):

	def __init__(self,compname,parent=None):
		Qt.QDialog.__init__(self)
		self.componentname = compname
		print self.componentname
		self.simpleClient = PySimpleClient()
		try:
			component= self.simpleClient.getComponent(self.componentname)
     			self.thread=Worker(component)
			self.setupUi(self)
			self.connect(self.thread,Qt.SIGNAL("arrayDataX"),self.qwtPlot_datax.setVal)
    	 		self.connect(self.thread,Qt.SIGNAL("arrayDataY"),self.qwtPlot_datay.setVal)
		except  Exception,ex:
			newEx = ClientErrorsImpl.CouldntAccessComponentExImpl( exception=ex, create=1 )
        		newEx.setComponentName(self.componentname)
        #ACS_LOG_ERROR
        		newEx.log()
        		simpleClient.disconnect()
        		sys.exit(-1)	
 	 
	
	
 
			
	def run(self):
		self.thread.start()
					
	def __del__(self):
		self.thread.terminate()
 		self.simpleClient.releaseComponent(self.componentname)
		self.simpleClient.disconnect()
		print "end app"
		


 

def main(args):
	
        app = Qt.QApplication(args)
	a=Application("CalSim") #passa il nome del component al costruttore
	a.run()
	p=a.show()
		
     	sys.exit(app.exec_())
	sleep(2)
if __name__=='__main__':
	main(sys.argv)
