# Python stubs generated by omniidl from ../idl/XMount.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")
# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")
# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "Xarcos"
#
__name__ = "Xarcos"
_0_Xarcos = omniORB.openModule("Xarcos", r"../idl/XMount.idl")
_0_Xarcos__POA = omniORB.openModule("Xarcos__POA", r"../idl/XMount.idl")


# interface XMount
_0_Xarcos._d_XMount = (omniORB.tcInternal.tv_objref, "IDL:alma/Xarcos/XMount:1.0", "XMount")
omniORB.typeMapping["IDL:alma/Xarcos/XMount:1.0"] = _0_Xarcos._d_XMount
_0_Xarcos.XMount = omniORB.newEmptyClass()
class XMount (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_Xarcos._d_XMount[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Xarcos.XMount = XMount
_0_Xarcos._tc_XMount = omniORB.tcInternal.createTypeCode(_0_Xarcos._d_XMount)
omniORB.registerType(XMount._NP_RepositoryId, _0_Xarcos._d_XMount, _0_Xarcos._tc_XMount)

# XMount operations and attributes
XMount._d__get_Status = ((),(omniORB.typeMapping["IDL:alma/ACS/ROdouble:1.0"],),None)
XMount._d__get_desc = ((),(omniORB.typeMapping["IDL:alma/ACS/ROstring:1.0"],),None)
XMount._d_Int = ((), (), None)
XMount._d_Abort = ((), (), None)
XMount._d_Start = ((), (), None)
XMount._d_Specifiche = ((), (), None)

# XMount object reference
class _objref_XMount (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = XMount._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_CharacteristicComponent.__init__(self)

    def _get_Status(self, *args):
        return _omnipy.invoke(self, "_get_Status", _0_Xarcos.XMount._d__get_Status, args)

    def _get_desc(self, *args):
        return _omnipy.invoke(self, "_get_desc", _0_Xarcos.XMount._d__get_desc, args)

    def Int(self, *args):
        return _omnipy.invoke(self, "Int", _0_Xarcos.XMount._d_Int, args)

    def Abort(self, *args):
        return _omnipy.invoke(self, "Abort", _0_Xarcos.XMount._d_Abort, args)

    def Start(self, *args):
        return _omnipy.invoke(self, "Start", _0_Xarcos.XMount._d_Start, args)

    def Specifiche(self, *args):
        return _omnipy.invoke(self, "Specifiche", _0_Xarcos.XMount._d_Specifiche, args)

    __methods__ = ["_get_Status", "_get_desc", "Int", "Abort", "Start", "Specifiche"] + _0_ACS._objref_CharacteristicComponent.__methods__

omniORB.registerObjref(XMount._NP_RepositoryId, _objref_XMount)
_0_Xarcos._objref_XMount = _objref_XMount
del XMount, _objref_XMount

# XMount skeleton
__name__ = "Xarcos__POA"
class XMount (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_Xarcos.XMount._NP_RepositoryId


    _omni_op_d = {"_get_Status": _0_Xarcos.XMount._d__get_Status, "_get_desc": _0_Xarcos.XMount._d__get_desc, "Int": _0_Xarcos.XMount._d_Int, "Abort": _0_Xarcos.XMount._d_Abort, "Start": _0_Xarcos.XMount._d_Start, "Specifiche": _0_Xarcos.XMount._d_Specifiche}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

XMount._omni_skeleton = XMount
_0_Xarcos__POA.XMount = XMount
omniORB.registerSkeleton(XMount._NP_RepositoryId, XMount)
del XMount
__name__ = "Xarcos"

#
# End of module "Xarcos"
#
__name__ = "XMount_idl"

_exported_modules = ( "Xarcos", )

# The end.
