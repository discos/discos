/***************************************************************\
 *  Authors: 
 *      Marco Buttu <mbuttu@oa-cagliari.inaf.it>
 *
 *  Created: Mon Oct 12 09:45:07 CEST 2009
 *  Last Modified: Mon Nov  9 11:20:11 CET 2009
\***************************************************************/
#ifndef __MINORSERVOBOSS_IDL__
#define __MINORSERVOBOSS_IDL__

#include <baci.idl>
#include <ComponentErrors.idl>
#include <ManagmentDefinitions.idl>
#include <MinorServoErrors.idl>

#pragma prefix "alma"

/** 
* This module defines the interface of MinorServo Subsystem.
* @author <a href=mailto:mbuttu@oa-cagliari.inaf.it>Marco Buttu</a>
*/
module MinorServo {

    struct MinorServoDataBlock {
        ACS::Time timeMark;
        boolean tracking;
        boolean starting;
        boolean parking;
        boolean parked;
        Management::TSystemStatus status;
    };

    const string MINORSERVO_DATA_CHANNEL = "MinorServoData";

    /// Interface of MinorServoBoss
	interface MinorServoBoss: ACS::CharacteristicComponent, Management::CommandInterpreter, Management::Subsystem {

        /** 
         *  This property reports the status of MinorServoBoss. 
         *  The returned pattern is a 7 bits field with the following meaning:
         *
         * 	@arg \c 1 Tracking: 1 means the system is on target
         * 	@arg \c 2 Configuring: 1 means the system is executing a setup
         * 	@arg \c 3 Parking: 1 means the system is executing a park
         * 	@arg \c 4 Parked: 1 means the system is parked
         * 	@arg \c 5 Warning: 1 means there is a warning due to a warning in some active 
         *            minor servo or due to some minor servo not parked
         *  @arg \c 6 Failure: 1 means there is a failure in some minor servo
         */
         // readonly attribute ACS::ROpattern verbose_status;
		
		/**
		 * Turn the elevation tracking of minor servos on
		 * @throw ManagementErrors::ConfigurationErrorEx
		 */
		void turnTrackingOn() raises (ManagementErrors::ConfigurationErrorEx);
		
		/**
		 * Turn the elevation tracking of minor servos off
		 * @throw ManagementErrors::ConfigurationErrorEx
		 */
		void turnTrackingOff() raises (ManagementErrors::ConfigurationErrorEx);
			
	
        /**
         * Should the minor servo position follows the antenna elevation?
         * @return true if the tracking elevation is enabled
         */
		boolean isElevationTrackingEn();
	
	
        /**
         * Is the minor servo positions following the antenna elevation?
         * @return true if the minor servo is following the antenna elevation
         */
		boolean isElevationTracking();
	
	
        /**
         * Is the system following the commanded position?
         * @return true if the minor servos are following the commanded positions
         */
		boolean isTracking();

		
        /**
         * Is the system starting?
         * @return true if the system is starting
         */
		boolean isStarting();

        /*
         * Is the Active surface configuration (polynomial to use when te AS is active)?
         * @return true if we are using the configuration with the AS active.
         */
        boolean isASConfiguration();

		
        /**
         * Is the system parking?
         * @return true if the system is parking
         */
		boolean isParking();
	
		
        /**
         * Is the system ready?
         * @return true if the system is ready
         */
		boolean isReady();	
	
		
        /**
         * Is the system performing a scan?
         * @return true if the system is performing a scan
         */
		boolean isScanning();	
	
		
        /**
         * Is the system performing a scan or waiting for another scan?
         * @return true if the system is performing a scan or waiting for another scan
         */
		boolean isScanActive();	


		/** Return the actual configuration */
		string getActualSetup();

		
		/** Return the commanded configuration */
		string getCommandedSetup();

		
		/** Return the central position of the axis involved in the scan */
		double getCentralScanPosition() raises (ManagementErrors::SubscanErrorEx);

 
        /** 
         * Check if the scan is achievable
         *
         * @param starting_time the time the scan will start
         * @param range the total axis movement in mm (centered in the actual position)
         * @param total_time the duration of axis movement
         * @param axis the identification code of the axis
         * @param servo the servo name
         *
         * @return true if the scan is achievable
         * @throw ManagementErrors::ConfigurationErrorEx, ManagementErrors::SubscanErrorEx
         */
        boolean checkScan(
                in ACS::Time starting_time, 
                in double range, 
                in ACS::Time total_time, 
                in unsigned short axis, 
                in string servo
        ) raises (ManagementErrors::ConfigurationErrorEx, ManagementErrors::SubscanErrorEx);

        
        /** 
         * Start the scan of the Z axis of the MinorServo active in the primary focus.
         *
         * @param starting_time the time the scan will start
         * @param range the total axis movement in mm (centered in the actual position)
         * @param total_time the duration of axis movement
         *
         * @throw ManagementErrors::ConfigurationErrorEx, ManagementErrors::SubscanErrorEx
         */
        void startFocusScan(
                in ACS::Time starting_time, 
                in double range, 
                in ACS::Time total_time
        ) raises (ManagementErrors::ConfigurationErrorEx, ManagementErrors::SubscanErrorEx);
 

        /** 
         * Start the scan of one axis of a MinorServo target.
         *
         * @param starting_time the time the scan will start
         * @param range the total axis movement in mm (centered in the actual position)
         * @param total_time the duration of axis movement
         * @param axis_code the identification code of the axis (SRP_ZT, GFR_ZT, ecc.)
         *
         * @throw ManagementErrors::ConfigurationErrorEx, ManagementErrors::SubscanErrorEx
         */
        void startScan(
                in ACS::Time starting_time, 
                in double range, 
                in ACS::Time total_time, 
                in string axis_code
        ) raises (ManagementErrors::ConfigurationErrorEx, ManagementErrors::SubscanErrorEx);


        void stopScan() raises (ManagementErrors::SubscanErrorEx);

 
        /** 
         * Clear the user offset of a servo (or all servos)
         *
         * @param servo a string:
         *     * the servo name 
         *     * "ALL" to clear the user offset of all servos
         * @throw MinorServoErrors::OperationNotPermittedEx
         */
        void clearUserOffset(
                in string servo
        ) raises (MinorServoErrors::OperationNotPermittedEx);

 
        /** 
         * Set the user offset of the servo
         *
         * @param servo the servo name
         * @param doubleSeq offset sequence of user offsets to add to the position;
         * one offset for each axis
         * @throw MinorServoErrors::OperationNotPermittedEx
         */
        void setUserOffset(
                in string servo,
                in ACS::doubleSeq offset
        ) raises (MinorServoErrors::OperationNotPermittedEx);


        /** Return the user offset of a servo
         * @param servo the servo name
         * @return offset the user offset of the servo
         * @throw MinorServoErrors::OperationNotPermittedEx
         */
         ACS::doubleSeq getUserOffset(in string servo)  raises (MinorServoErrors::OperationNotPermittedEx);

 
        /** 
         * Clear the system offset of a servo (or all servos)
         *
         * @param servo a string:
         *     * the servo name 
         *     * "ALL" to clear the system offset of all servos
         * @throw MinorServoErrors::OperationNotPermittedEx
         */
        void clearSystemOffset(
                in string servo
        ) raises (MinorServoErrors::OperationNotPermittedEx);

 
        /** 
         * Set the system offset of the servo
         *
         * @param servo the servo name
         * @param doubleSeq offset sequence of system offsets to add to the position;
         * one offset for each axis
         * @throw MinorServoErrors::OperationNotPermittedEx
         */
        void setSystemOffset(
                in string servo,
                in ACS::doubleSeq offset
        ) raises (MinorServoErrors::OperationNotPermittedEx);


        /** Return the system offset of a servo
         * @param servo the servo name
         * @return offset the system offset of the servo
         * @throw MinorServoErrors::OperationNotPermittedEx
         */
         ACS::doubleSeq getSystemOffset(in string servo)  raises (MinorServoErrors::OperationNotPermittedEx);

 
        /** Return the active axes names and related units
         *
         * @param axes a sequence of active axes. For instance: 
         * ("SRP_XT", "SRP_YT", "SRP_ZT", "SRP_XR", "SRP_YR", "SRP_ZR", "GFR_ZR")
         * @param units a sequence of strings, each one is the unit of the corresponding axis.
         * For instance: ("mm", "mm", "mm", "degree", "degree", "degree", "mm")
         * @throw MinorServoErrors::ConfigurationErrorEx
         */
        void getAxesInfo(out ACS::stringSeq axes, out ACS::stringSeq units) raises (ManagementErrors::ConfigurationErrorEx);

 
        /** Return the positions of the active axes
         *  
         * @param time the time related to the positin we want to retrieve
         * @return a sequence of positions, in the same order of the axes parameter of getAxesInfo()
         * @throw MinorServoErrors::ConfigurationErrorEx if the system is not configured
         * @throw ComponentErrors::UnexpectedEx
         */
        ACS::doubleSeq getAxesPosition(in ACS::Time time) raises (ManagementErrors::ConfigurationErrorEx, ComponentErrors::UnexpectedEx);
            
    };

};

#endif
