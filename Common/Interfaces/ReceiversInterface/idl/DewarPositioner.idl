/***************************************************************\
 *  Authors: 
 *      Marco Buttu <mbuttu@oa-cagliari.inaf.it>
 *      Andrea Orlati <a.orlati@ira.inaf.it>
\***************************************************************/

#ifndef __DEWAR_POSITIONER__IDL__ 
#define __DEWAR_POSITIONER__IDL__

#include <baci.idl>
#include <maciErrType.idl>
#include <ComponentErrors.idl>

#pragma prefix "alma"


module Receivers {

    interface DewarPositioner: ACS::CharacteristicComponent {

        /** A dummy property */
        readonly attribute ACS::ROdouble fooProperty;

        /** Take a configuration code and configure the component
         * 
         * This method takes a configuration code, gets the corresponding
         * derotator component reference and initializes the DewarPositioner. 
         * For instance, by passing the code KKG the DewarPositioner gets the 
         * KBandDerotator reference and performs its setup.
         */
        void setup(in string code) raises (
            ComponentErrors::ValidationErrorEx,
            ComponentErrors::OperationErrorEx,
            maciErrType::CannotGetComponentEx,
            ComponentErrors::UnexpectedEx
        );


        /** Put the derotator in the park position */
        void park() raises (ComponentErrors::NotAllowedEx);
 
        /** Set an absolute position offset for the derotator */
        void setOffset(in double offset);
        
        /** Start the parallactic angle correction */
        void startTracking();

        /** Stop the parallactic angle correction */
        void stopTracking();

        /** Return true when the dewar positioner is configured */
        boolean isConfigured();

        /** Return true when the derotator is ready to move */
        boolean isReady();

        /** Return true when the derotator is tracking the commanded position */
        boolean isTracking();

        /** Return true when the derotator is moving */
        boolean isSlewing();

        /** Return true when the derotator is rewinding */
        boolean isRewinding();

        /** Return true actual position in the user reference system */
        double getPosition() raises (
            ComponentErrors::OperationErrorEx, ComponentErrors::NotAllowedEx
        );

        /** Return the actual setup configuration (KKG, etc.) */
        string getActualSetup();

        /** Return the commanded setup configuration (KKG, etc.) */
        string getCommandedSetup();

    };
};

#endif

