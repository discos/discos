/***************************************************************\
 *  Authors: 
 *      Marco Buttu <mbuttu@oa-cagliari.inaf.it>
 *      Andrea Orlati <a.orlati@ira.inaf.it>
\***************************************************************/

#ifndef __DEWAR_POSITIONER__IDL__ 
#define __DEWAR_POSITIONER__IDL__

#include <baci.idl>
#include <maciErrType.idl>
#include <ComponentErrors.idl>

#pragma prefix "alma"


module Receivers {

    interface DewarPositioner: ACS::CharacteristicComponent {

        /** Take a configuration code and configure the component
         * 
         * This method takes a configuration code, gets the corresponding
         * derotator component reference and initializes the DewarPositioner. 
         * For instance, by giving the code KKG, the DewarPositioner gets the 
         * KBandDerotator reference and performs its setup.
         * The setup() method sets the offset and rewinding mode default values:
         *
         *     setOffset(0)
         *     setRewindingMode(AUTO)
         */
        void setup(in string code) raises (
            ComponentErrors::ValidationErrorEx,
            ComponentErrors::OperationErrorEx,
            ComponentErrors::NotAllowedEx,
            maciErrType::CannotGetComponentEx,
            ComponentErrors::UnexpectedEx
        );


        /** Put the derotator in the park position and reset the configuration
         *  
         * This method sets the default values:
         * 
         *   + setOffset(0)
         *   + setPosition(0)
         *   + actualSetup = 'unknown'
         *   + commandedSetup = ''
         *   + rewindingMode = ''
         */
        void park() raises (ComponentErrors::NotAllowedEx, ComponentErrors::UnexpectedEx);

 
        /** Set the absolute offset and move the derotator to the new position */
        void setOffset(in double offset) raises (ComponentErrors::NotAllowedEx);


        /** Return the offset */
        double getOffset();


        /** Clear the absolute offset and move the derotator to the new position */
        void clearOffset() raises (ComponentErrors::NotAllowedEx);

        
        /** Start the parallactic angle correction 
         * 
         * It raises a NotAllowedEx either when the tracking mode is not yet selected
         * or the system is not configured.
         */
        void startTracking() raises (ComponentErrors::NotAllowedEx);


        /** Stop the parallactic angle correction */
        void stopTracking() raises (
            ComponentErrors::OperationErrorEx,
            ComponentErrors::UnexpectedEx
        );


        /** Return true when the dewar positioner is properly configured */
        boolean isConfigured();


        /** Return true when the system is configured and the derotator ready to move */
        boolean isReady();


        /** Return true when the derotator is tracking the commanded position */
        boolean isTracking();


        /** Return true when the derotator is moving */
        boolean isSlewing();


        /** Set the rewinding mode to "AUTO" or "MANUAL" */
        void setRewindingMode(in string mode) raises (ComponentErrors::ValidationErrorEx);


        /** Get the rewinding mode */
        string getRewindingMode();


        /** Set the tracking mode to "FIXED" or "OPTIMIZED"
         *
         * This method does not start the tracking, but just enable it. Once the tracking mode is
         * selected, the tracking can be started by calling the startTracking() method.
         * See the documentation for more details about the mode meaning.
         */
        void setTrackingMode(in string mode) raises (ComponentErrors::ValidationErrorEx);


        /** Get the tracking mode */
        string getTrackingMode();


        /** Return true when the derotator is rewinding */
        boolean isRewinding();


        /** Return the actual position in the user reference system */
        double getPosition() raises (
            ComponentErrors::OperationErrorEx,
            ComponentErrors::NotAllowedEx,
            ComponentErrors::UnexpectedEx
        );


        /** Return the actual setup configuration (KKG, etc.) */
        string getActualSetup();


        /** Return the commanded setup configuration (KKG, etc.) */
        string getCommandedSetup();


        /** A dummy property */
        readonly attribute ACS::ROdouble fooProperty;

    };
};

#endif

