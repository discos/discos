#ifndef __GENERICRECEIVER_IDL__
#define __GENERICRECEIVER_IDL__

/***************************************************************\
 *  Authors: 
 *      Marco Buttu <mbuttu@oa-cagliari.inaf.it>
 *      Andrea Orlati <a.orlati@ira.inaf.it>
 *
 *  Created: Mon May  3 10:44:59 CEST 2010
 *  Last Modified: 
\***************************************************************/

#include <baci.idl>
#include <ComponentErrors.idl>
#include <ReceiversErrors.idl>
#include "ReceiversDefinitions.idl"
#include "CommonReceiverInterface.idl"

#pragma prefix "alma"

/** 
* This module defines the interfaces of receiver components.
* A Receiver is a component composed of one or more Feed components.
* @author <a href=mailto:mbuttu@oa-cagliari.inaf.it>Marco Buttu</a>
* @author <a href=mailto:a.orlati@ira.inaf.it>Andrea Orlati</a>
*/
module Receivers { 
    
    /**
     * <h2>Interface of a generic receiver</h2>
     * <p>This CORBA interface exports properties and methods defined for a generic 
     * <em>Receiver</em>.</p>
     */
    interface Receiver : CommonReceiverInterface {

        /** Dewar vacuum. */
        readonly attribute ACS::ROdouble vacuum;

        /** Dewar low cryogenic temperature. */
        readonly attribute ACS::ROdouble lowTemperature;

        /** Dewar high cryogenic temperature. */
        readonly attribute ACS::ROdouble highTemperature;

        /** 
         *  This property reports the current Receiver status. The returned 
         *  pattern is a X bits field with the following meaning:
         *
         *  @arg \c 0 CHO: cool head status; 1 means it is not cooling (Cool Head Off)
         *  @arg \c 1 CLA: calibration status; 1 means the calibration is active
         *  @arg \c 2 VPO: vacuum pump status; 1 means the pump is opened
         *  @arg \c 3 VVO: vacuum valve status; 1 means the valve is opened
         */
        readonly attribute ACS::ROpattern status;
        
        
        /** Turn the LNAs of every channel on */
        void turnLNAsOn();


        /** Turn the LNAs of every channel off */
        void turnLNAsOff();


        /***************************************************\
         *           COMMON_RECEIVER_INTERFACE             *
         ***************************************************

            readonly attribute ACS::ROdoubleSeq LO;
            
            readonly attribute ACS::ROlong feeds;
            
            readonly attribute ACS::ROlong IFs;

            readonly attribute ACS::ROlongSeq polarization;

            void calOn() raises (ComponentErrors::ComponentErrorsEx);

            void calOff() raises (ComponentErrors::ComponentErrorsEx);

            void setLO(in ACS::doubleSeq lo1) raises (ComponentErrors::ComponentErrorsEx);

            ACS::doubleSeq getCalibrationMark(in ACS::doubleSeq freqs,in ACS::doubleSeq bandwidths,in ACS::longSeq feeds,in ACS::longSeq ifs) 
               raises (ComponentErrors::ComponentErrorsEx);

            long getFeeds(out ACS::doubleSeq X,out ACS::doubleSeq Y,out ACS::doubleSeq power) raises (ComponentErrors::ComponentErrorsEx);

            double getTaper(in double freq,in double bandWidth,in long feed,in long ifNumber,out double waveLen) 
                raises (ComponentErrors::ComponentErrorsEx);

        \***************************************************/
        
    };

};

#endif
