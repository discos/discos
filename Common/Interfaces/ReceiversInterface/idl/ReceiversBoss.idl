#ifndef __RECEIVERS_BOSS_IDL__
#define __RECEIVERS_BOSS_IDL__

/***************************************************************\
 *  Authors: 
 *      Marco Buttu <mbuttu@oa-cagliari.inaf.it>
 *      Andrea Orlati <a.orlati@ira.inaf.it>
 *
 *  Created: Thu Oct 21 15:33:10 CEST 2010 
\***************************************************************/

#include <baci.idl>
#include <ComponentErrors.idl>
#include <ReceiversErrors.idl>
#include <ManagmentDefinitions.idl>
#include "CommonReceiverInterface.idl"

#pragma prefix "alma"

module Receivers { 
    
    /**
     * <h2>Interface of a generic receiver</h2>
     * <p>This CORBA interface exports properties and methods defined for a generic 
     * <em>Receiver</em>.</p>
     */
    interface ReceiversBoss : ACS::CharacteristicComponent, CommonReceiverInterface, Management::CommandInterpreter, Management::Subsystem {

        /** **** THIS PROPERTY SHOULD BE MOVED IN THE SUBSYSTEM INTERFACE ****
         *
         * This attribute reports the current configuration name of the receiver subsystem (the configuration commanded by a subsystem setup). 
         * This string can be either a valid configuration name or 'unknown' when the system is in an unknown status 
         */
        readonly attribute ACS::ROstring actualSetup;

 
        /***************************************************\
         *           COMMON_RECEIVER_INTERFACE             *
         ***************************************************

            readonly attribute ACS::ROdoubleSeq LO;
            
            readonly attribute ACS::ROlong feeds;
            
            readonly attribute ACS::ROlong IFs;

            readonly attribute ACS::ROlongSeq polarization;

            void calOn() raises (ComponentErrors::ComponentErrorsEx);

            void calOff() raises (ComponentErrors::ComponentErrorsEx);

            void setLO(in ACS::doubleSeq lo1) raises (ComponentErrors::ComponentErrorsEx);

            ACS::doubleSeq getCalibrationMark(in ACS::doubleSeq freqs,in ACS::doubleSeq bandwidths,in ACS::longSeq feeds,in ACS::longSeq ifs) 
               raises (ComponentErrors::ComponentErrorsEx);

            long getFeeds(out ACS::doubleSeq X,out ACS::doubleSeq Y,out ACS::doubleSeq power) raises (ComponentErrors::ComponentErrorsEx);

            double getTaper(in double freq,in double bandWidth,in long feed,in long ifNumber,out double waveLen) 
                raises (ComponentErrors::ComponentErrorsEx);


        /***************************************************\
         *               COMMAND_INTERPRETER               *
         ***************************************************

            string  command(in string command) raises (ManagementErrors::CommandLineErrorEx);


        /***************************************************\
         *                  SUBSYSTEM                      *
         ***************************************************

            readonly attribute Management::ROTSystemStatus status;
            
            void setup(in string config) raises (ManagementErrors::ConfigurationErrorEx);
            
            void park() raises (ManagementErrors::ParkingErrorEx);

        \***************************************************/


    };
    
    
};

#endif
