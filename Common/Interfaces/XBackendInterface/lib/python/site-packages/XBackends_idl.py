# Python stubs generated by omniidl from ../idl/XBackends.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")
# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")
# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "ACSBulkDataError.idl"
import ACSBulkDataError_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ACSBulkDataError = omniORB.openModule("ACSBulkDataError")
_0_ACSBulkDataError__POA = omniORB.openModule("ACSBulkDataError__POA")
# #include "AVStreams.idl"
import AVStreams_idl
_0_AVStreams = omniORB.openModule("AVStreams")
_0_AVStreams__POA = omniORB.openModule("AVStreams__POA")
# #include "bulkData.idl"
import bulkData_idl
_0_bulkdata = omniORB.openModule("bulkdata")
_0_bulkdata__POA = omniORB.openModule("bulkdata__POA")
# #include "ACSBulkDataStatus.idl"
import ACSBulkDataStatus_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ACSBulkDataStatus = omniORB.openModule("ACSBulkDataStatus")
_0_ACSBulkDataStatus__POA = omniORB.openModule("ACSBulkDataStatus__POA")
# #include "bulkDataReceiver.idl"
import bulkDataReceiver_idl
_0_bulkdata = omniORB.openModule("bulkdata")
_0_bulkdata__POA = omniORB.openModule("bulkdata__POA")
# #include "bulkDataSender.idl"
import bulkDataSender_idl
_0_bulkdata = omniORB.openModule("bulkdata")
_0_bulkdata__POA = omniORB.openModule("bulkdata__POA")
# #include "BackendsDefinitions.idl"
import BackendsDefinitions_idl
_0_Backends = omniORB.openModule("Backends")
_0_Backends__POA = omniORB.openModule("Backends__POA")
# #include "ManagmentDefinitions.idl"
import ManagmentDefinitions_idl
_0_Management = omniORB.openModule("Management")
_0_Management__POA = omniORB.openModule("Management__POA")
# #include "ComponentErrors.idl"
import ComponentErrors_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ComponentErrors = omniORB.openModule("ComponentErrors")
_0_ComponentErrors__POA = omniORB.openModule("ComponentErrors__POA")
# #include "BackendsErrors.idl"
import BackendsErrors_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_BackendsErrors = omniORB.openModule("BackendsErrors")
_0_BackendsErrors__POA = omniORB.openModule("BackendsErrors__POA")
# #include "GenericBackend.idl"
import GenericBackend_idl
_0_Backends = omniORB.openModule("Backends")
_0_Backends__POA = omniORB.openModule("Backends__POA")

#
# Start of module "Backends"
#
__name__ = "Backends"
_0_Backends = omniORB.openModule("Backends", r"../idl/XBackends.idl")
_0_Backends__POA = omniORB.openModule("Backends__POA", r"../idl/XBackends.idl")


# interface XBackends
_0_Backends._d_XBackends = (omniORB.tcInternal.tv_objref, "IDL:alma/Backends/XBackends:1.0", "XBackends")
omniORB.typeMapping["IDL:alma/Backends/XBackends:1.0"] = _0_Backends._d_XBackends
_0_Backends.XBackends = omniORB.newEmptyClass()
class XBackends (_0_Backends.GenericBackend):
    _NP_RepositoryId = _0_Backends._d_XBackends[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Backends.XBackends = XBackends
_0_Backends._tc_XBackends = omniORB.tcInternal.createTypeCode(_0_Backends._d_XBackends)
omniORB.registerType(XBackends._NP_RepositoryId, _0_Backends._d_XBackends, _0_Backends._tc_XBackends)

# XBackends operations and attributes
XBackends._d_Int = ((), (), None)
XBackends._d_Abort = ((), (), None)
XBackends._d_Start = ((), (), None)
XBackends._d_Specifiche = ((), (), None)

# XBackends object reference
class _objref_XBackends (_0_Backends._objref_GenericBackend):
    _NP_RepositoryId = XBackends._NP_RepositoryId

    def __init__(self):
        _0_Backends._objref_GenericBackend.__init__(self)

    def Int(self, *args):
        return _omnipy.invoke(self, "Int", _0_Backends.XBackends._d_Int, args)

    def Abort(self, *args):
        return _omnipy.invoke(self, "Abort", _0_Backends.XBackends._d_Abort, args)

    def Start(self, *args):
        return _omnipy.invoke(self, "Start", _0_Backends.XBackends._d_Start, args)

    def Specifiche(self, *args):
        return _omnipy.invoke(self, "Specifiche", _0_Backends.XBackends._d_Specifiche, args)

    __methods__ = ["Int", "Abort", "Start", "Specifiche"] + _0_Backends._objref_GenericBackend.__methods__

omniORB.registerObjref(XBackends._NP_RepositoryId, _objref_XBackends)
_0_Backends._objref_XBackends = _objref_XBackends
del XBackends, _objref_XBackends

# XBackends skeleton
__name__ = "Backends__POA"
class XBackends (_0_Backends__POA.GenericBackend):
    _NP_RepositoryId = _0_Backends.XBackends._NP_RepositoryId


    _omni_op_d = {"Int": _0_Backends.XBackends._d_Int, "Abort": _0_Backends.XBackends._d_Abort, "Start": _0_Backends.XBackends._d_Start, "Specifiche": _0_Backends.XBackends._d_Specifiche}
    _omni_op_d.update(_0_Backends__POA.GenericBackend._omni_op_d)

XBackends._omni_skeleton = XBackends
_0_Backends__POA.XBackends = XBackends
omniORB.registerSkeleton(XBackends._NP_RepositoryId, XBackends)
del XBackends
__name__ = "Backends"

#
# End of module "Backends"
#
__name__ = "XBackends_idl"

_exported_modules = ( "Backends", )

# The end.
