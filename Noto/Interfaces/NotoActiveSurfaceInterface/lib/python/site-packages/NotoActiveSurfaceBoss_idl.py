# Python stubs generated by omniidl from ../idl/NotoActiveSurfaceBoss.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")
# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")
# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "ComponentErrors.idl"
import ComponentErrors_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ComponentErrors = omniORB.openModule("ComponentErrors")
_0_ComponentErrors__POA = omniORB.openModule("ComponentErrors__POA")
# #include "ASErrors.idl"
import ASErrors_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ASErrors = omniORB.openModule("ASErrors")
_0_ASErrors__POA = omniORB.openModule("ASErrors__POA")
# #include "ManagementErrors.idl"
import ManagementErrors_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ManagementErrors = omniORB.openModule("ManagementErrors")
_0_ManagementErrors__POA = omniORB.openModule("ManagementErrors__POA")
# #include "ManagmentDefinitions.idl"
import ManagmentDefinitions_idl
_0_Management = omniORB.openModule("Management")
_0_Management__POA = omniORB.openModule("Management__POA")
# #include "ActiveSurfaceBoss.idl"
import ActiveSurfaceBoss_idl
_0_ActiveSurface = omniORB.openModule("ActiveSurface")
_0_ActiveSurface__POA = omniORB.openModule("ActiveSurface__POA")

#
# Start of module "ActiveSurface"
#
__name__ = "ActiveSurface"
_0_ActiveSurface = omniORB.openModule("ActiveSurface", r"../idl/NotoActiveSurfaceBoss.idl")
_0_ActiveSurface__POA = omniORB.openModule("ActiveSurface__POA", r"../idl/NotoActiveSurfaceBoss.idl")


# enum TASOneWayAction
_0_ActiveSurface.AS_STOP = omniORB.EnumItem("AS_STOP", 0)
_0_ActiveSurface.AS_SETUP = omniORB.EnumItem("AS_SETUP", 1)
_0_ActiveSurface.AS_STOW = omniORB.EnumItem("AS_STOW", 2)
_0_ActiveSurface.AS_REFPOS = omniORB.EnumItem("AS_REFPOS", 3)
_0_ActiveSurface.AS_UP = omniORB.EnumItem("AS_UP", 4)
_0_ActiveSurface.AS_DOWN = omniORB.EnumItem("AS_DOWN", 5)
_0_ActiveSurface.AS_BOTTOM = omniORB.EnumItem("AS_BOTTOM", 6)
_0_ActiveSurface.AS_TOP = omniORB.EnumItem("AS_TOP", 7)
_0_ActiveSurface.AS_UPDATE = omniORB.EnumItem("AS_UPDATE", 8)
_0_ActiveSurface.AS_CORRECTION = omniORB.EnumItem("AS_CORRECTION", 9)
_0_ActiveSurface.AS_MOVE = omniORB.EnumItem("AS_MOVE", 10)
_0_ActiveSurface.AS_PROFILE = omniORB.EnumItem("AS_PROFILE", 11)
_0_ActiveSurface.TASOneWayAction = omniORB.Enum("IDL:alma/ActiveSurface/TASOneWayAction:1.0", (_0_ActiveSurface.AS_STOP, _0_ActiveSurface.AS_SETUP, _0_ActiveSurface.AS_STOW, _0_ActiveSurface.AS_REFPOS, _0_ActiveSurface.AS_UP, _0_ActiveSurface.AS_DOWN, _0_ActiveSurface.AS_BOTTOM, _0_ActiveSurface.AS_TOP, _0_ActiveSurface.AS_UPDATE, _0_ActiveSurface.AS_CORRECTION, _0_ActiveSurface.AS_MOVE, _0_ActiveSurface.AS_PROFILE,))

_0_ActiveSurface._d_TASOneWayAction  = (omniORB.tcInternal.tv_enum, _0_ActiveSurface.TASOneWayAction._NP_RepositoryId, "TASOneWayAction", _0_ActiveSurface.TASOneWayAction._items)
_0_ActiveSurface._tc_TASOneWayAction = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_TASOneWayAction)
omniORB.registerType(_0_ActiveSurface.TASOneWayAction._NP_RepositoryId, _0_ActiveSurface._d_TASOneWayAction, _0_ActiveSurface._tc_TASOneWayAction)

# typedef ... TASOneWayActionSeq
class TASOneWayActionSeq:
    _NP_RepositoryId = "IDL:alma/ActiveSurface/TASOneWayActionSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ActiveSurface.TASOneWayActionSeq = TASOneWayActionSeq
_0_ActiveSurface._d_TASOneWayActionSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], 0)
_0_ActiveSurface._ad_TASOneWayActionSeq = (omniORB.tcInternal.tv_alias, TASOneWayActionSeq._NP_RepositoryId, "TASOneWayActionSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], 0))
_0_ActiveSurface._tc_TASOneWayActionSeq = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._ad_TASOneWayActionSeq)
omniORB.registerType(TASOneWayActionSeq._NP_RepositoryId, _0_ActiveSurface._ad_TASOneWayActionSeq, _0_ActiveSurface._tc_TASOneWayActionSeq)
del TASOneWayActionSeq

# interface CBTASOneWayAction
_0_ActiveSurface._d_CBTASOneWayAction = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/CBTASOneWayAction:1.0", "CBTASOneWayAction")
omniORB.typeMapping["IDL:alma/ActiveSurface/CBTASOneWayAction:1.0"] = _0_ActiveSurface._d_CBTASOneWayAction
_0_ActiveSurface.CBTASOneWayAction = omniORB.newEmptyClass()
class CBTASOneWayAction (_0_ACS.Callback):
    _NP_RepositoryId = _0_ActiveSurface._d_CBTASOneWayAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.CBTASOneWayAction = CBTASOneWayAction
_0_ActiveSurface._tc_CBTASOneWayAction = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_CBTASOneWayAction)
omniORB.registerType(CBTASOneWayAction._NP_RepositoryId, _0_ActiveSurface._d_CBTASOneWayAction, _0_ActiveSurface._tc_CBTASOneWayAction)

# CBTASOneWayAction operations and attributes
CBTASOneWayAction._d_working = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)
CBTASOneWayAction._d_done = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)

# CBTASOneWayAction object reference
class _objref_CBTASOneWayAction (_0_ACS._objref_Callback):
    _NP_RepositoryId = CBTASOneWayAction._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_Callback.__init__(self)

    def working(self, *args):
        return _omnipy.invoke(self, "working", _0_ActiveSurface.CBTASOneWayAction._d_working, args)

    def done(self, *args):
        return _omnipy.invoke(self, "done", _0_ActiveSurface.CBTASOneWayAction._d_done, args)

    __methods__ = ["working", "done"] + _0_ACS._objref_Callback.__methods__

omniORB.registerObjref(CBTASOneWayAction._NP_RepositoryId, _objref_CBTASOneWayAction)
_0_ActiveSurface._objref_CBTASOneWayAction = _objref_CBTASOneWayAction
del CBTASOneWayAction, _objref_CBTASOneWayAction

# CBTASOneWayAction skeleton
__name__ = "ActiveSurface__POA"
class CBTASOneWayAction (_0_ACS__POA.Callback):
    _NP_RepositoryId = _0_ActiveSurface.CBTASOneWayAction._NP_RepositoryId


    _omni_op_d = {"working": _0_ActiveSurface.CBTASOneWayAction._d_working, "done": _0_ActiveSurface.CBTASOneWayAction._d_done}
    _omni_op_d.update(_0_ACS__POA.Callback._omni_op_d)

CBTASOneWayAction._omni_skeleton = CBTASOneWayAction
_0_ActiveSurface__POA.CBTASOneWayAction = CBTASOneWayAction
omniORB.registerSkeleton(CBTASOneWayAction._NP_RepositoryId, CBTASOneWayAction)
del CBTASOneWayAction
__name__ = "ActiveSurface"

# typedef ... TASOneWayActionCB
class TASOneWayActionCB:
    _NP_RepositoryId = "IDL:alma/ActiveSurface/TASOneWayActionCB:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ActiveSurface.TASOneWayActionCB = TASOneWayActionCB
_0_ActiveSurface._d_TASOneWayActionCB  = omniORB.typeMapping["IDL:alma/ActiveSurface/CBTASOneWayAction:1.0"]
_0_ActiveSurface._ad_TASOneWayActionCB = (omniORB.tcInternal.tv_alias, TASOneWayActionCB._NP_RepositoryId, "TASOneWayActionCB", omniORB.typeMapping["IDL:alma/ActiveSurface/CBTASOneWayAction:1.0"])
_0_ActiveSurface._tc_TASOneWayActionCB = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._ad_TASOneWayActionCB)
omniORB.registerType(TASOneWayActionCB._NP_RepositoryId, _0_ActiveSurface._ad_TASOneWayActionCB, _0_ActiveSurface._tc_TASOneWayActionCB)
del TASOneWayActionCB

# interface AlarmTASOneWayAction
_0_ActiveSurface._d_AlarmTASOneWayAction = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0", "AlarmTASOneWayAction")
omniORB.typeMapping["IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0"] = _0_ActiveSurface._d_AlarmTASOneWayAction
_0_ActiveSurface.AlarmTASOneWayAction = omniORB.newEmptyClass()
class AlarmTASOneWayAction (_0_ACS.Callback):
    _NP_RepositoryId = _0_ActiveSurface._d_AlarmTASOneWayAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.AlarmTASOneWayAction = AlarmTASOneWayAction
_0_ActiveSurface._tc_AlarmTASOneWayAction = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_AlarmTASOneWayAction)
omniORB.registerType(AlarmTASOneWayAction._NP_RepositoryId, _0_ActiveSurface._d_AlarmTASOneWayAction, _0_ActiveSurface._tc_AlarmTASOneWayAction)

# AlarmTASOneWayAction operations and attributes
AlarmTASOneWayAction._d_alarm_raised = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)
AlarmTASOneWayAction._d_alarm_cleared = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)

# AlarmTASOneWayAction object reference
class _objref_AlarmTASOneWayAction (_0_ACS._objref_Callback):
    _NP_RepositoryId = AlarmTASOneWayAction._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_Callback.__init__(self)

    def alarm_raised(self, *args):
        return _omnipy.invoke(self, "alarm_raised", _0_ActiveSurface.AlarmTASOneWayAction._d_alarm_raised, args)

    def alarm_cleared(self, *args):
        return _omnipy.invoke(self, "alarm_cleared", _0_ActiveSurface.AlarmTASOneWayAction._d_alarm_cleared, args)

    __methods__ = ["alarm_raised", "alarm_cleared"] + _0_ACS._objref_Callback.__methods__

omniORB.registerObjref(AlarmTASOneWayAction._NP_RepositoryId, _objref_AlarmTASOneWayAction)
_0_ActiveSurface._objref_AlarmTASOneWayAction = _objref_AlarmTASOneWayAction
del AlarmTASOneWayAction, _objref_AlarmTASOneWayAction

# AlarmTASOneWayAction skeleton
__name__ = "ActiveSurface__POA"
class AlarmTASOneWayAction (_0_ACS__POA.Callback):
    _NP_RepositoryId = _0_ActiveSurface.AlarmTASOneWayAction._NP_RepositoryId


    _omni_op_d = {"alarm_raised": _0_ActiveSurface.AlarmTASOneWayAction._d_alarm_raised, "alarm_cleared": _0_ActiveSurface.AlarmTASOneWayAction._d_alarm_cleared}
    _omni_op_d.update(_0_ACS__POA.Callback._omni_op_d)

AlarmTASOneWayAction._omni_skeleton = AlarmTASOneWayAction
_0_ActiveSurface__POA.AlarmTASOneWayAction = AlarmTASOneWayAction
omniORB.registerSkeleton(AlarmTASOneWayAction._NP_RepositoryId, AlarmTASOneWayAction)
del AlarmTASOneWayAction
__name__ = "ActiveSurface"

# typedef ... TASOneWayActionAlarm
class TASOneWayActionAlarm:
    _NP_RepositoryId = "IDL:alma/ActiveSurface/TASOneWayActionAlarm:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ActiveSurface.TASOneWayActionAlarm = TASOneWayActionAlarm
_0_ActiveSurface._d_TASOneWayActionAlarm  = omniORB.typeMapping["IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0"]
_0_ActiveSurface._ad_TASOneWayActionAlarm = (omniORB.tcInternal.tv_alias, TASOneWayActionAlarm._NP_RepositoryId, "TASOneWayActionAlarm", omniORB.typeMapping["IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0"])
_0_ActiveSurface._tc_TASOneWayActionAlarm = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._ad_TASOneWayActionAlarm)
omniORB.registerType(TASOneWayActionAlarm._NP_RepositoryId, _0_ActiveSurface._ad_TASOneWayActionAlarm, _0_ActiveSurface._tc_TASOneWayActionAlarm)
del TASOneWayActionAlarm

# interface PTASOneWayAction
_0_ActiveSurface._d_PTASOneWayAction = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/PTASOneWayAction:1.0", "PTASOneWayAction")
omniORB.typeMapping["IDL:alma/ActiveSurface/PTASOneWayAction:1.0"] = _0_ActiveSurface._d_PTASOneWayAction
_0_ActiveSurface.PTASOneWayAction = omniORB.newEmptyClass()
class PTASOneWayAction (_0_ACS.TypelessProperty):
    _NP_RepositoryId = _0_ActiveSurface._d_PTASOneWayAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.PTASOneWayAction = PTASOneWayAction
_0_ActiveSurface._tc_PTASOneWayAction = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_PTASOneWayAction)
omniORB.registerType(PTASOneWayAction._NP_RepositoryId, _0_ActiveSurface._d_PTASOneWayAction, _0_ActiveSurface._tc_PTASOneWayAction)

# PTASOneWayAction operations and attributes
PTASOneWayAction._d_get_sync = ((), (omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"]), None)
PTASOneWayAction._d_get_async = ((omniORB.typeMapping["IDL:alma/ACS/CBpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (), None)
PTASOneWayAction._d_get_history = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayActionSeq:1.0"], omniORB.typeMapping["IDL:alma/ACS/TimeSeq:1.0"]), None)
PTASOneWayAction._d_create_monitor = ((omniORB.typeMapping["IDL:alma/ACS/CBpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (omniORB.typeMapping["IDL:alma/ACS/Monitorpattern:1.0"], ), None)
PTASOneWayAction._d_create_postponed_monitor = ((omniORB.typeMapping["IDL:alma/ACS/Time:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (omniORB.typeMapping["IDL:alma/ACS/Monitor:1.0"], ), None)
PTASOneWayAction._d__get_default_timer_trigger = ((),(omniORB.typeMapping["IDL:alma/ACS/TimeInterval:1.0"],),None)
PTASOneWayAction._d__get_min_timer_trigger = ((),(omniORB.typeMapping["IDL:alma/ACS/TimeInterval:1.0"],),None)
PTASOneWayAction._d__get_default_value = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"],),None)
PTASOneWayAction._d__get_statesDescription = ((),(omniORB.typeMapping["IDL:alma/ACS/stringSeq:1.0"],),None)
PTASOneWayAction._d__get_condition = ((),(omniORB.typeMapping["IDL:alma/ACS/ConditionSeq:1.0"],),None)
PTASOneWayAction._d__get_allStates = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayActionSeq:1.0"],),None)

# PTASOneWayAction object reference
class _objref_PTASOneWayAction (_0_ACS._objref_TypelessProperty):
    _NP_RepositoryId = PTASOneWayAction._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_TypelessProperty.__init__(self)

    def get_sync(self, *args):
        return _omnipy.invoke(self, "get_sync", _0_ActiveSurface.PTASOneWayAction._d_get_sync, args)

    def get_async(self, *args):
        return _omnipy.invoke(self, "get_async", _0_ActiveSurface.PTASOneWayAction._d_get_async, args)

    def get_history(self, *args):
        return _omnipy.invoke(self, "get_history", _0_ActiveSurface.PTASOneWayAction._d_get_history, args)

    def create_monitor(self, *args):
        return _omnipy.invoke(self, "create_monitor", _0_ActiveSurface.PTASOneWayAction._d_create_monitor, args)

    def create_postponed_monitor(self, *args):
        return _omnipy.invoke(self, "create_postponed_monitor", _0_ActiveSurface.PTASOneWayAction._d_create_postponed_monitor, args)

    def _get_default_timer_trigger(self, *args):
        return _omnipy.invoke(self, "_get_default_timer_trigger", _0_ActiveSurface.PTASOneWayAction._d__get_default_timer_trigger, args)

    def _get_min_timer_trigger(self, *args):
        return _omnipy.invoke(self, "_get_min_timer_trigger", _0_ActiveSurface.PTASOneWayAction._d__get_min_timer_trigger, args)

    def _get_default_value(self, *args):
        return _omnipy.invoke(self, "_get_default_value", _0_ActiveSurface.PTASOneWayAction._d__get_default_value, args)

    def _get_statesDescription(self, *args):
        return _omnipy.invoke(self, "_get_statesDescription", _0_ActiveSurface.PTASOneWayAction._d__get_statesDescription, args)

    def _get_condition(self, *args):
        return _omnipy.invoke(self, "_get_condition", _0_ActiveSurface.PTASOneWayAction._d__get_condition, args)

    def _get_allStates(self, *args):
        return _omnipy.invoke(self, "_get_allStates", _0_ActiveSurface.PTASOneWayAction._d__get_allStates, args)

    __methods__ = ["get_sync", "get_async", "get_history", "create_monitor", "create_postponed_monitor", "_get_default_timer_trigger", "_get_min_timer_trigger", "_get_default_value", "_get_statesDescription", "_get_condition", "_get_allStates"] + _0_ACS._objref_TypelessProperty.__methods__

omniORB.registerObjref(PTASOneWayAction._NP_RepositoryId, _objref_PTASOneWayAction)
_0_ActiveSurface._objref_PTASOneWayAction = _objref_PTASOneWayAction
del PTASOneWayAction, _objref_PTASOneWayAction

# PTASOneWayAction skeleton
__name__ = "ActiveSurface__POA"
class PTASOneWayAction (_0_ACS__POA.TypelessProperty):
    _NP_RepositoryId = _0_ActiveSurface.PTASOneWayAction._NP_RepositoryId


    _omni_op_d = {"get_sync": _0_ActiveSurface.PTASOneWayAction._d_get_sync, "get_async": _0_ActiveSurface.PTASOneWayAction._d_get_async, "get_history": _0_ActiveSurface.PTASOneWayAction._d_get_history, "create_monitor": _0_ActiveSurface.PTASOneWayAction._d_create_monitor, "create_postponed_monitor": _0_ActiveSurface.PTASOneWayAction._d_create_postponed_monitor, "_get_default_timer_trigger": _0_ActiveSurface.PTASOneWayAction._d__get_default_timer_trigger, "_get_min_timer_trigger": _0_ActiveSurface.PTASOneWayAction._d__get_min_timer_trigger, "_get_default_value": _0_ActiveSurface.PTASOneWayAction._d__get_default_value, "_get_statesDescription": _0_ActiveSurface.PTASOneWayAction._d__get_statesDescription, "_get_condition": _0_ActiveSurface.PTASOneWayAction._d__get_condition, "_get_allStates": _0_ActiveSurface.PTASOneWayAction._d__get_allStates}
    _omni_op_d.update(_0_ACS__POA.TypelessProperty._omni_op_d)

PTASOneWayAction._omni_skeleton = PTASOneWayAction
_0_ActiveSurface__POA.PTASOneWayAction = PTASOneWayAction
omniORB.registerSkeleton(PTASOneWayAction._NP_RepositoryId, PTASOneWayAction)
del PTASOneWayAction
__name__ = "ActiveSurface"

# interface ROTASOneWayAction
_0_ActiveSurface._d_ROTASOneWayAction = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/ROTASOneWayAction:1.0", "ROTASOneWayAction")
omniORB.typeMapping["IDL:alma/ActiveSurface/ROTASOneWayAction:1.0"] = _0_ActiveSurface._d_ROTASOneWayAction
_0_ActiveSurface.ROTASOneWayAction = omniORB.newEmptyClass()
class ROTASOneWayAction (_0_ActiveSurface.PTASOneWayAction):
    _NP_RepositoryId = _0_ActiveSurface._d_ROTASOneWayAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.ROTASOneWayAction = ROTASOneWayAction
_0_ActiveSurface._tc_ROTASOneWayAction = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_ROTASOneWayAction)
omniORB.registerType(ROTASOneWayAction._NP_RepositoryId, _0_ActiveSurface._d_ROTASOneWayAction, _0_ActiveSurface._tc_ROTASOneWayAction)

# ROTASOneWayAction operations and attributes
ROTASOneWayAction._d_new_subscription_AlarmEnum = ((omniORB.typeMapping["IDL:alma/ACS/Alarmpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (omniORB.typeMapping["IDL:alma/ACS/Subscription:1.0"], ), None)
ROTASOneWayAction._d__get_alarm_on = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayActionSeq:1.0"],),None)
ROTASOneWayAction._d__get_alarm_off = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayActionSeq:1.0"],),None)

# ROTASOneWayAction object reference
class _objref_ROTASOneWayAction (_0_ActiveSurface._objref_PTASOneWayAction):
    _NP_RepositoryId = ROTASOneWayAction._NP_RepositoryId

    def __init__(self):
        _0_ActiveSurface._objref_PTASOneWayAction.__init__(self)

    def new_subscription_AlarmEnum(self, *args):
        return _omnipy.invoke(self, "new_subscription_AlarmEnum", _0_ActiveSurface.ROTASOneWayAction._d_new_subscription_AlarmEnum, args)

    def _get_alarm_on(self, *args):
        return _omnipy.invoke(self, "_get_alarm_on", _0_ActiveSurface.ROTASOneWayAction._d__get_alarm_on, args)

    def _get_alarm_off(self, *args):
        return _omnipy.invoke(self, "_get_alarm_off", _0_ActiveSurface.ROTASOneWayAction._d__get_alarm_off, args)

    __methods__ = ["new_subscription_AlarmEnum", "_get_alarm_on", "_get_alarm_off"] + _0_ActiveSurface._objref_PTASOneWayAction.__methods__

omniORB.registerObjref(ROTASOneWayAction._NP_RepositoryId, _objref_ROTASOneWayAction)
_0_ActiveSurface._objref_ROTASOneWayAction = _objref_ROTASOneWayAction
del ROTASOneWayAction, _objref_ROTASOneWayAction

# ROTASOneWayAction skeleton
__name__ = "ActiveSurface__POA"
class ROTASOneWayAction (_0_ActiveSurface__POA.PTASOneWayAction):
    _NP_RepositoryId = _0_ActiveSurface.ROTASOneWayAction._NP_RepositoryId


    _omni_op_d = {"new_subscription_AlarmEnum": _0_ActiveSurface.ROTASOneWayAction._d_new_subscription_AlarmEnum, "_get_alarm_on": _0_ActiveSurface.ROTASOneWayAction._d__get_alarm_on, "_get_alarm_off": _0_ActiveSurface.ROTASOneWayAction._d__get_alarm_off}
    _omni_op_d.update(_0_ActiveSurface__POA.PTASOneWayAction._omni_op_d)

ROTASOneWayAction._omni_skeleton = ROTASOneWayAction
_0_ActiveSurface__POA.ROTASOneWayAction = ROTASOneWayAction
omniORB.registerSkeleton(ROTASOneWayAction._NP_RepositoryId, ROTASOneWayAction)
del ROTASOneWayAction
__name__ = "ActiveSurface"

# interface RWTASOneWayAction
_0_ActiveSurface._d_RWTASOneWayAction = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/RWTASOneWayAction:1.0", "RWTASOneWayAction")
omniORB.typeMapping["IDL:alma/ActiveSurface/RWTASOneWayAction:1.0"] = _0_ActiveSurface._d_RWTASOneWayAction
_0_ActiveSurface.RWTASOneWayAction = omniORB.newEmptyClass()
class RWTASOneWayAction (_0_ActiveSurface.PTASOneWayAction):
    _NP_RepositoryId = _0_ActiveSurface._d_RWTASOneWayAction[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.RWTASOneWayAction = RWTASOneWayAction
_0_ActiveSurface._tc_RWTASOneWayAction = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_RWTASOneWayAction)
omniORB.registerType(RWTASOneWayAction._NP_RepositoryId, _0_ActiveSurface._d_RWTASOneWayAction, _0_ActiveSurface._tc_RWTASOneWayAction)

# RWTASOneWayAction operations and attributes
RWTASOneWayAction._d_set_sync = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], ), (omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], ), None)
RWTASOneWayAction._d_set_async = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBvoid:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (), None)
RWTASOneWayAction._d_set_nonblocking = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASOneWayAction:1.0"], ), (), None)

# RWTASOneWayAction object reference
class _objref_RWTASOneWayAction (_0_ActiveSurface._objref_PTASOneWayAction):
    _NP_RepositoryId = RWTASOneWayAction._NP_RepositoryId

    def __init__(self):
        _0_ActiveSurface._objref_PTASOneWayAction.__init__(self)

    def set_sync(self, *args):
        return _omnipy.invoke(self, "set_sync", _0_ActiveSurface.RWTASOneWayAction._d_set_sync, args)

    def set_async(self, *args):
        return _omnipy.invoke(self, "set_async", _0_ActiveSurface.RWTASOneWayAction._d_set_async, args)

    def set_nonblocking(self, *args):
        return _omnipy.invoke(self, "set_nonblocking", _0_ActiveSurface.RWTASOneWayAction._d_set_nonblocking, args)

    __methods__ = ["set_sync", "set_async", "set_nonblocking"] + _0_ActiveSurface._objref_PTASOneWayAction.__methods__

omniORB.registerObjref(RWTASOneWayAction._NP_RepositoryId, _objref_RWTASOneWayAction)
_0_ActiveSurface._objref_RWTASOneWayAction = _objref_RWTASOneWayAction
del RWTASOneWayAction, _objref_RWTASOneWayAction

# RWTASOneWayAction skeleton
__name__ = "ActiveSurface__POA"
class RWTASOneWayAction (_0_ActiveSurface__POA.PTASOneWayAction):
    _NP_RepositoryId = _0_ActiveSurface.RWTASOneWayAction._NP_RepositoryId


    _omni_op_d = {"set_sync": _0_ActiveSurface.RWTASOneWayAction._d_set_sync, "set_async": _0_ActiveSurface.RWTASOneWayAction._d_set_async, "set_nonblocking": _0_ActiveSurface.RWTASOneWayAction._d_set_nonblocking}
    _omni_op_d.update(_0_ActiveSurface__POA.PTASOneWayAction._omni_op_d)

RWTASOneWayAction._omni_skeleton = RWTASOneWayAction
_0_ActiveSurface__POA.RWTASOneWayAction = RWTASOneWayAction
omniORB.registerSkeleton(RWTASOneWayAction._NP_RepositoryId, RWTASOneWayAction)
del RWTASOneWayAction
__name__ = "ActiveSurface"

# enum TASProfile
_0_ActiveSurface.AS_SHAPED = omniORB.EnumItem("AS_SHAPED", 0)
_0_ActiveSurface.AS_SHAPED_FIXED = omniORB.EnumItem("AS_SHAPED_FIXED", 1)
_0_ActiveSurface.AS_PARABOLIC = omniORB.EnumItem("AS_PARABOLIC", 2)
_0_ActiveSurface.AS_PARABOLIC_FIXED = omniORB.EnumItem("AS_PARABOLIC_FIXED", 3)
_0_ActiveSurface.TASProfile = omniORB.Enum("IDL:alma/ActiveSurface/TASProfile:1.0", (_0_ActiveSurface.AS_SHAPED, _0_ActiveSurface.AS_SHAPED_FIXED, _0_ActiveSurface.AS_PARABOLIC, _0_ActiveSurface.AS_PARABOLIC_FIXED,))

_0_ActiveSurface._d_TASProfile  = (omniORB.tcInternal.tv_enum, _0_ActiveSurface.TASProfile._NP_RepositoryId, "TASProfile", _0_ActiveSurface.TASProfile._items)
_0_ActiveSurface._tc_TASProfile = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_TASProfile)
omniORB.registerType(_0_ActiveSurface.TASProfile._NP_RepositoryId, _0_ActiveSurface._d_TASProfile, _0_ActiveSurface._tc_TASProfile)

# typedef ... TASProfileSeq
class TASProfileSeq:
    _NP_RepositoryId = "IDL:alma/ActiveSurface/TASProfileSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ActiveSurface.TASProfileSeq = TASProfileSeq
_0_ActiveSurface._d_TASProfileSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], 0)
_0_ActiveSurface._ad_TASProfileSeq = (omniORB.tcInternal.tv_alias, TASProfileSeq._NP_RepositoryId, "TASProfileSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], 0))
_0_ActiveSurface._tc_TASProfileSeq = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._ad_TASProfileSeq)
omniORB.registerType(TASProfileSeq._NP_RepositoryId, _0_ActiveSurface._ad_TASProfileSeq, _0_ActiveSurface._tc_TASProfileSeq)
del TASProfileSeq

# interface CBTASProfile
_0_ActiveSurface._d_CBTASProfile = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/CBTASProfile:1.0", "CBTASProfile")
omniORB.typeMapping["IDL:alma/ActiveSurface/CBTASProfile:1.0"] = _0_ActiveSurface._d_CBTASProfile
_0_ActiveSurface.CBTASProfile = omniORB.newEmptyClass()
class CBTASProfile (_0_ACS.Callback):
    _NP_RepositoryId = _0_ActiveSurface._d_CBTASProfile[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.CBTASProfile = CBTASProfile
_0_ActiveSurface._tc_CBTASProfile = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_CBTASProfile)
omniORB.registerType(CBTASProfile._NP_RepositoryId, _0_ActiveSurface._d_CBTASProfile, _0_ActiveSurface._tc_CBTASProfile)

# CBTASProfile operations and attributes
CBTASProfile._d_working = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)
CBTASProfile._d_done = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)

# CBTASProfile object reference
class _objref_CBTASProfile (_0_ACS._objref_Callback):
    _NP_RepositoryId = CBTASProfile._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_Callback.__init__(self)

    def working(self, *args):
        return _omnipy.invoke(self, "working", _0_ActiveSurface.CBTASProfile._d_working, args)

    def done(self, *args):
        return _omnipy.invoke(self, "done", _0_ActiveSurface.CBTASProfile._d_done, args)

    __methods__ = ["working", "done"] + _0_ACS._objref_Callback.__methods__

omniORB.registerObjref(CBTASProfile._NP_RepositoryId, _objref_CBTASProfile)
_0_ActiveSurface._objref_CBTASProfile = _objref_CBTASProfile
del CBTASProfile, _objref_CBTASProfile

# CBTASProfile skeleton
__name__ = "ActiveSurface__POA"
class CBTASProfile (_0_ACS__POA.Callback):
    _NP_RepositoryId = _0_ActiveSurface.CBTASProfile._NP_RepositoryId


    _omni_op_d = {"working": _0_ActiveSurface.CBTASProfile._d_working, "done": _0_ActiveSurface.CBTASProfile._d_done}
    _omni_op_d.update(_0_ACS__POA.Callback._omni_op_d)

CBTASProfile._omni_skeleton = CBTASProfile
_0_ActiveSurface__POA.CBTASProfile = CBTASProfile
omniORB.registerSkeleton(CBTASProfile._NP_RepositoryId, CBTASProfile)
del CBTASProfile
__name__ = "ActiveSurface"

# typedef ... TASProfileCB
class TASProfileCB:
    _NP_RepositoryId = "IDL:alma/ActiveSurface/TASProfileCB:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ActiveSurface.TASProfileCB = TASProfileCB
_0_ActiveSurface._d_TASProfileCB  = omniORB.typeMapping["IDL:alma/ActiveSurface/CBTASProfile:1.0"]
_0_ActiveSurface._ad_TASProfileCB = (omniORB.tcInternal.tv_alias, TASProfileCB._NP_RepositoryId, "TASProfileCB", omniORB.typeMapping["IDL:alma/ActiveSurface/CBTASProfile:1.0"])
_0_ActiveSurface._tc_TASProfileCB = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._ad_TASProfileCB)
omniORB.registerType(TASProfileCB._NP_RepositoryId, _0_ActiveSurface._ad_TASProfileCB, _0_ActiveSurface._tc_TASProfileCB)
del TASProfileCB

# interface AlarmTASProfile
_0_ActiveSurface._d_AlarmTASProfile = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/AlarmTASProfile:1.0", "AlarmTASProfile")
omniORB.typeMapping["IDL:alma/ActiveSurface/AlarmTASProfile:1.0"] = _0_ActiveSurface._d_AlarmTASProfile
_0_ActiveSurface.AlarmTASProfile = omniORB.newEmptyClass()
class AlarmTASProfile (_0_ACS.Callback):
    _NP_RepositoryId = _0_ActiveSurface._d_AlarmTASProfile[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.AlarmTASProfile = AlarmTASProfile
_0_ActiveSurface._tc_AlarmTASProfile = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_AlarmTASProfile)
omniORB.registerType(AlarmTASProfile._NP_RepositoryId, _0_ActiveSurface._d_AlarmTASProfile, _0_ActiveSurface._tc_AlarmTASProfile)

# AlarmTASProfile operations and attributes
AlarmTASProfile._d_alarm_raised = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)
AlarmTASProfile._d_alarm_cleared = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescOut:1.0"]), None, None)

# AlarmTASProfile object reference
class _objref_AlarmTASProfile (_0_ACS._objref_Callback):
    _NP_RepositoryId = AlarmTASProfile._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_Callback.__init__(self)

    def alarm_raised(self, *args):
        return _omnipy.invoke(self, "alarm_raised", _0_ActiveSurface.AlarmTASProfile._d_alarm_raised, args)

    def alarm_cleared(self, *args):
        return _omnipy.invoke(self, "alarm_cleared", _0_ActiveSurface.AlarmTASProfile._d_alarm_cleared, args)

    __methods__ = ["alarm_raised", "alarm_cleared"] + _0_ACS._objref_Callback.__methods__

omniORB.registerObjref(AlarmTASProfile._NP_RepositoryId, _objref_AlarmTASProfile)
_0_ActiveSurface._objref_AlarmTASProfile = _objref_AlarmTASProfile
del AlarmTASProfile, _objref_AlarmTASProfile

# AlarmTASProfile skeleton
__name__ = "ActiveSurface__POA"
class AlarmTASProfile (_0_ACS__POA.Callback):
    _NP_RepositoryId = _0_ActiveSurface.AlarmTASProfile._NP_RepositoryId


    _omni_op_d = {"alarm_raised": _0_ActiveSurface.AlarmTASProfile._d_alarm_raised, "alarm_cleared": _0_ActiveSurface.AlarmTASProfile._d_alarm_cleared}
    _omni_op_d.update(_0_ACS__POA.Callback._omni_op_d)

AlarmTASProfile._omni_skeleton = AlarmTASProfile
_0_ActiveSurface__POA.AlarmTASProfile = AlarmTASProfile
omniORB.registerSkeleton(AlarmTASProfile._NP_RepositoryId, AlarmTASProfile)
del AlarmTASProfile
__name__ = "ActiveSurface"

# typedef ... TASProfileAlarm
class TASProfileAlarm:
    _NP_RepositoryId = "IDL:alma/ActiveSurface/TASProfileAlarm:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ActiveSurface.TASProfileAlarm = TASProfileAlarm
_0_ActiveSurface._d_TASProfileAlarm  = omniORB.typeMapping["IDL:alma/ActiveSurface/AlarmTASProfile:1.0"]
_0_ActiveSurface._ad_TASProfileAlarm = (omniORB.tcInternal.tv_alias, TASProfileAlarm._NP_RepositoryId, "TASProfileAlarm", omniORB.typeMapping["IDL:alma/ActiveSurface/AlarmTASProfile:1.0"])
_0_ActiveSurface._tc_TASProfileAlarm = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._ad_TASProfileAlarm)
omniORB.registerType(TASProfileAlarm._NP_RepositoryId, _0_ActiveSurface._ad_TASProfileAlarm, _0_ActiveSurface._tc_TASProfileAlarm)
del TASProfileAlarm

# interface PTASProfile
_0_ActiveSurface._d_PTASProfile = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/PTASProfile:1.0", "PTASProfile")
omniORB.typeMapping["IDL:alma/ActiveSurface/PTASProfile:1.0"] = _0_ActiveSurface._d_PTASProfile
_0_ActiveSurface.PTASProfile = omniORB.newEmptyClass()
class PTASProfile (_0_ACS.TypelessProperty):
    _NP_RepositoryId = _0_ActiveSurface._d_PTASProfile[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.PTASProfile = PTASProfile
_0_ActiveSurface._tc_PTASProfile = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_PTASProfile)
omniORB.registerType(PTASProfile._NP_RepositoryId, _0_ActiveSurface._d_PTASProfile, _0_ActiveSurface._tc_PTASProfile)

# PTASProfile operations and attributes
PTASProfile._d_get_sync = ((), (omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"]), None)
PTASProfile._d_get_async = ((omniORB.typeMapping["IDL:alma/ACS/CBpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (), None)
PTASProfile._d_get_history = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfileSeq:1.0"], omniORB.typeMapping["IDL:alma/ACS/TimeSeq:1.0"]), None)
PTASProfile._d_create_monitor = ((omniORB.typeMapping["IDL:alma/ACS/CBpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (omniORB.typeMapping["IDL:alma/ACS/Monitorpattern:1.0"], ), None)
PTASProfile._d_create_postponed_monitor = ((omniORB.typeMapping["IDL:alma/ACS/Time:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (omniORB.typeMapping["IDL:alma/ACS/Monitor:1.0"], ), None)
PTASProfile._d__get_default_timer_trigger = ((),(omniORB.typeMapping["IDL:alma/ACS/TimeInterval:1.0"],),None)
PTASProfile._d__get_min_timer_trigger = ((),(omniORB.typeMapping["IDL:alma/ACS/TimeInterval:1.0"],),None)
PTASProfile._d__get_default_value = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"],),None)
PTASProfile._d__get_statesDescription = ((),(omniORB.typeMapping["IDL:alma/ACS/stringSeq:1.0"],),None)
PTASProfile._d__get_condition = ((),(omniORB.typeMapping["IDL:alma/ACS/ConditionSeq:1.0"],),None)
PTASProfile._d__get_allStates = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfileSeq:1.0"],),None)

# PTASProfile object reference
class _objref_PTASProfile (_0_ACS._objref_TypelessProperty):
    _NP_RepositoryId = PTASProfile._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_TypelessProperty.__init__(self)

    def get_sync(self, *args):
        return _omnipy.invoke(self, "get_sync", _0_ActiveSurface.PTASProfile._d_get_sync, args)

    def get_async(self, *args):
        return _omnipy.invoke(self, "get_async", _0_ActiveSurface.PTASProfile._d_get_async, args)

    def get_history(self, *args):
        return _omnipy.invoke(self, "get_history", _0_ActiveSurface.PTASProfile._d_get_history, args)

    def create_monitor(self, *args):
        return _omnipy.invoke(self, "create_monitor", _0_ActiveSurface.PTASProfile._d_create_monitor, args)

    def create_postponed_monitor(self, *args):
        return _omnipy.invoke(self, "create_postponed_monitor", _0_ActiveSurface.PTASProfile._d_create_postponed_monitor, args)

    def _get_default_timer_trigger(self, *args):
        return _omnipy.invoke(self, "_get_default_timer_trigger", _0_ActiveSurface.PTASProfile._d__get_default_timer_trigger, args)

    def _get_min_timer_trigger(self, *args):
        return _omnipy.invoke(self, "_get_min_timer_trigger", _0_ActiveSurface.PTASProfile._d__get_min_timer_trigger, args)

    def _get_default_value(self, *args):
        return _omnipy.invoke(self, "_get_default_value", _0_ActiveSurface.PTASProfile._d__get_default_value, args)

    def _get_statesDescription(self, *args):
        return _omnipy.invoke(self, "_get_statesDescription", _0_ActiveSurface.PTASProfile._d__get_statesDescription, args)

    def _get_condition(self, *args):
        return _omnipy.invoke(self, "_get_condition", _0_ActiveSurface.PTASProfile._d__get_condition, args)

    def _get_allStates(self, *args):
        return _omnipy.invoke(self, "_get_allStates", _0_ActiveSurface.PTASProfile._d__get_allStates, args)

    __methods__ = ["get_sync", "get_async", "get_history", "create_monitor", "create_postponed_monitor", "_get_default_timer_trigger", "_get_min_timer_trigger", "_get_default_value", "_get_statesDescription", "_get_condition", "_get_allStates"] + _0_ACS._objref_TypelessProperty.__methods__

omniORB.registerObjref(PTASProfile._NP_RepositoryId, _objref_PTASProfile)
_0_ActiveSurface._objref_PTASProfile = _objref_PTASProfile
del PTASProfile, _objref_PTASProfile

# PTASProfile skeleton
__name__ = "ActiveSurface__POA"
class PTASProfile (_0_ACS__POA.TypelessProperty):
    _NP_RepositoryId = _0_ActiveSurface.PTASProfile._NP_RepositoryId


    _omni_op_d = {"get_sync": _0_ActiveSurface.PTASProfile._d_get_sync, "get_async": _0_ActiveSurface.PTASProfile._d_get_async, "get_history": _0_ActiveSurface.PTASProfile._d_get_history, "create_monitor": _0_ActiveSurface.PTASProfile._d_create_monitor, "create_postponed_monitor": _0_ActiveSurface.PTASProfile._d_create_postponed_monitor, "_get_default_timer_trigger": _0_ActiveSurface.PTASProfile._d__get_default_timer_trigger, "_get_min_timer_trigger": _0_ActiveSurface.PTASProfile._d__get_min_timer_trigger, "_get_default_value": _0_ActiveSurface.PTASProfile._d__get_default_value, "_get_statesDescription": _0_ActiveSurface.PTASProfile._d__get_statesDescription, "_get_condition": _0_ActiveSurface.PTASProfile._d__get_condition, "_get_allStates": _0_ActiveSurface.PTASProfile._d__get_allStates}
    _omni_op_d.update(_0_ACS__POA.TypelessProperty._omni_op_d)

PTASProfile._omni_skeleton = PTASProfile
_0_ActiveSurface__POA.PTASProfile = PTASProfile
omniORB.registerSkeleton(PTASProfile._NP_RepositoryId, PTASProfile)
del PTASProfile
__name__ = "ActiveSurface"

# interface ROTASProfile
_0_ActiveSurface._d_ROTASProfile = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/ROTASProfile:1.0", "ROTASProfile")
omniORB.typeMapping["IDL:alma/ActiveSurface/ROTASProfile:1.0"] = _0_ActiveSurface._d_ROTASProfile
_0_ActiveSurface.ROTASProfile = omniORB.newEmptyClass()
class ROTASProfile (_0_ActiveSurface.PTASProfile):
    _NP_RepositoryId = _0_ActiveSurface._d_ROTASProfile[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.ROTASProfile = ROTASProfile
_0_ActiveSurface._tc_ROTASProfile = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_ROTASProfile)
omniORB.registerType(ROTASProfile._NP_RepositoryId, _0_ActiveSurface._d_ROTASProfile, _0_ActiveSurface._tc_ROTASProfile)

# ROTASProfile operations and attributes
ROTASProfile._d_new_subscription_AlarmEnum = ((omniORB.typeMapping["IDL:alma/ACS/Alarmpattern:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (omniORB.typeMapping["IDL:alma/ACS/Subscription:1.0"], ), None)
ROTASProfile._d__get_alarm_on = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfileSeq:1.0"],),None)
ROTASProfile._d__get_alarm_off = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfileSeq:1.0"],),None)

# ROTASProfile object reference
class _objref_ROTASProfile (_0_ActiveSurface._objref_PTASProfile):
    _NP_RepositoryId = ROTASProfile._NP_RepositoryId

    def __init__(self):
        _0_ActiveSurface._objref_PTASProfile.__init__(self)

    def new_subscription_AlarmEnum(self, *args):
        return _omnipy.invoke(self, "new_subscription_AlarmEnum", _0_ActiveSurface.ROTASProfile._d_new_subscription_AlarmEnum, args)

    def _get_alarm_on(self, *args):
        return _omnipy.invoke(self, "_get_alarm_on", _0_ActiveSurface.ROTASProfile._d__get_alarm_on, args)

    def _get_alarm_off(self, *args):
        return _omnipy.invoke(self, "_get_alarm_off", _0_ActiveSurface.ROTASProfile._d__get_alarm_off, args)

    __methods__ = ["new_subscription_AlarmEnum", "_get_alarm_on", "_get_alarm_off"] + _0_ActiveSurface._objref_PTASProfile.__methods__

omniORB.registerObjref(ROTASProfile._NP_RepositoryId, _objref_ROTASProfile)
_0_ActiveSurface._objref_ROTASProfile = _objref_ROTASProfile
del ROTASProfile, _objref_ROTASProfile

# ROTASProfile skeleton
__name__ = "ActiveSurface__POA"
class ROTASProfile (_0_ActiveSurface__POA.PTASProfile):
    _NP_RepositoryId = _0_ActiveSurface.ROTASProfile._NP_RepositoryId


    _omni_op_d = {"new_subscription_AlarmEnum": _0_ActiveSurface.ROTASProfile._d_new_subscription_AlarmEnum, "_get_alarm_on": _0_ActiveSurface.ROTASProfile._d__get_alarm_on, "_get_alarm_off": _0_ActiveSurface.ROTASProfile._d__get_alarm_off}
    _omni_op_d.update(_0_ActiveSurface__POA.PTASProfile._omni_op_d)

ROTASProfile._omni_skeleton = ROTASProfile
_0_ActiveSurface__POA.ROTASProfile = ROTASProfile
omniORB.registerSkeleton(ROTASProfile._NP_RepositoryId, ROTASProfile)
del ROTASProfile
__name__ = "ActiveSurface"

# interface RWTASProfile
_0_ActiveSurface._d_RWTASProfile = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/RWTASProfile:1.0", "RWTASProfile")
omniORB.typeMapping["IDL:alma/ActiveSurface/RWTASProfile:1.0"] = _0_ActiveSurface._d_RWTASProfile
_0_ActiveSurface.RWTASProfile = omniORB.newEmptyClass()
class RWTASProfile (_0_ActiveSurface.PTASProfile):
    _NP_RepositoryId = _0_ActiveSurface._d_RWTASProfile[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.RWTASProfile = RWTASProfile
_0_ActiveSurface._tc_RWTASProfile = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_RWTASProfile)
omniORB.registerType(RWTASProfile._NP_RepositoryId, _0_ActiveSurface._d_RWTASProfile, _0_ActiveSurface._tc_RWTASProfile)

# RWTASProfile operations and attributes
RWTASProfile._d_set_sync = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], ), (omniORB.typeMapping["IDL:alma/ACSErr/Completion:1.0"], ), None)
RWTASProfile._d_set_async = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBvoid:1.0"], omniORB.typeMapping["IDL:alma/ACS/CBDescIn:1.0"]), (), None)
RWTASProfile._d_set_nonblocking = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], ), (), None)

# RWTASProfile object reference
class _objref_RWTASProfile (_0_ActiveSurface._objref_PTASProfile):
    _NP_RepositoryId = RWTASProfile._NP_RepositoryId

    def __init__(self):
        _0_ActiveSurface._objref_PTASProfile.__init__(self)

    def set_sync(self, *args):
        return _omnipy.invoke(self, "set_sync", _0_ActiveSurface.RWTASProfile._d_set_sync, args)

    def set_async(self, *args):
        return _omnipy.invoke(self, "set_async", _0_ActiveSurface.RWTASProfile._d_set_async, args)

    def set_nonblocking(self, *args):
        return _omnipy.invoke(self, "set_nonblocking", _0_ActiveSurface.RWTASProfile._d_set_nonblocking, args)

    __methods__ = ["set_sync", "set_async", "set_nonblocking"] + _0_ActiveSurface._objref_PTASProfile.__methods__

omniORB.registerObjref(RWTASProfile._NP_RepositoryId, _objref_RWTASProfile)
_0_ActiveSurface._objref_RWTASProfile = _objref_RWTASProfile
del RWTASProfile, _objref_RWTASProfile

# RWTASProfile skeleton
__name__ = "ActiveSurface__POA"
class RWTASProfile (_0_ActiveSurface__POA.PTASProfile):
    _NP_RepositoryId = _0_ActiveSurface.RWTASProfile._NP_RepositoryId


    _omni_op_d = {"set_sync": _0_ActiveSurface.RWTASProfile._d_set_sync, "set_async": _0_ActiveSurface.RWTASProfile._d_set_async, "set_nonblocking": _0_ActiveSurface.RWTASProfile._d_set_nonblocking}
    _omni_op_d.update(_0_ActiveSurface__POA.PTASProfile._omni_op_d)

RWTASProfile._omni_skeleton = RWTASProfile
_0_ActiveSurface__POA.RWTASProfile = RWTASProfile
omniORB.registerSkeleton(RWTASProfile._NP_RepositoryId, RWTASProfile)
del RWTASProfile
__name__ = "ActiveSurface"

# interface NotoActiveSurfaceBoss
_0_ActiveSurface._d_NotoActiveSurfaceBoss = (omniORB.tcInternal.tv_objref, "IDL:alma/ActiveSurface/NotoActiveSurfaceBoss:1.0", "NotoActiveSurfaceBoss")
omniORB.typeMapping["IDL:alma/ActiveSurface/NotoActiveSurfaceBoss:1.0"] = _0_ActiveSurface._d_NotoActiveSurfaceBoss
_0_ActiveSurface.NotoActiveSurfaceBoss = omniORB.newEmptyClass()
class NotoActiveSurfaceBoss (_0_ActiveSurface.ActiveSurfaceBoss):
    _NP_RepositoryId = _0_ActiveSurface._d_NotoActiveSurfaceBoss[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ActiveSurface.NotoActiveSurfaceBoss = NotoActiveSurfaceBoss
_0_ActiveSurface._tc_NotoActiveSurfaceBoss = omniORB.tcInternal.createTypeCode(_0_ActiveSurface._d_NotoActiveSurfaceBoss)
omniORB.registerType(NotoActiveSurfaceBoss._NP_RepositoryId, _0_ActiveSurface._d_NotoActiveSurfaceBoss, _0_ActiveSurface._tc_NotoActiveSurfaceBoss)

# NotoActiveSurfaceBoss operations and attributes
NotoActiveSurfaceBoss._d__get_enabled = ((),(omniORB.typeMapping["IDL:alma/Management/ROTBoolean:1.0"],),None)
NotoActiveSurfaceBoss._d__get_pprofile = ((),(omniORB.typeMapping["IDL:alma/ActiveSurface/ROTASProfile:1.0"],),None)
NotoActiveSurfaceBoss._d__get_tracking = ((),(omniORB.typeMapping["IDL:alma/Management/ROTBoolean:1.0"],),None)
NotoActiveSurfaceBoss._d_stop = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_stow = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_refPos = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_update = ((omniORB.tcInternal.tv_double, ), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_move = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_correction = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_double), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_setProfile = ((omniORB.typeMapping["IDL:alma/ActiveSurface/TASProfile:1.0"], ), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_usdStatus4GUIClient = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, ), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_setActuator = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_up = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_down = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_bottom = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_top = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_reset = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_recoverUSD = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})
NotoActiveSurfaceBoss._d_calibrate = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), None, None)
NotoActiveSurfaceBoss._d_calVer = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), {_0_ComponentErrors.ComponentErrorsEx._NP_RepositoryId: _0_ComponentErrors._d_ComponentErrorsEx})

# NotoActiveSurfaceBoss object reference
class _objref_NotoActiveSurfaceBoss (_0_ActiveSurface._objref_ActiveSurfaceBoss):
    _NP_RepositoryId = NotoActiveSurfaceBoss._NP_RepositoryId

    def __init__(self):
        _0_ActiveSurface._objref_ActiveSurfaceBoss.__init__(self)

    def _get_enabled(self, *args):
        return _omnipy.invoke(self, "_get_enabled", _0_ActiveSurface.NotoActiveSurfaceBoss._d__get_enabled, args)

    def _get_pprofile(self, *args):
        return _omnipy.invoke(self, "_get_pprofile", _0_ActiveSurface.NotoActiveSurfaceBoss._d__get_pprofile, args)

    def _get_tracking(self, *args):
        return _omnipy.invoke(self, "_get_tracking", _0_ActiveSurface.NotoActiveSurfaceBoss._d__get_tracking, args)

    def stop(self, *args):
        return _omnipy.invoke(self, "stop", _0_ActiveSurface.NotoActiveSurfaceBoss._d_stop, args)

    def stow(self, *args):
        return _omnipy.invoke(self, "stow", _0_ActiveSurface.NotoActiveSurfaceBoss._d_stow, args)

    def refPos(self, *args):
        return _omnipy.invoke(self, "refPos", _0_ActiveSurface.NotoActiveSurfaceBoss._d_refPos, args)

    def update(self, *args):
        return _omnipy.invoke(self, "update", _0_ActiveSurface.NotoActiveSurfaceBoss._d_update, args)

    def move(self, *args):
        return _omnipy.invoke(self, "move", _0_ActiveSurface.NotoActiveSurfaceBoss._d_move, args)

    def correction(self, *args):
        return _omnipy.invoke(self, "correction", _0_ActiveSurface.NotoActiveSurfaceBoss._d_correction, args)

    def setProfile(self, *args):
        return _omnipy.invoke(self, "setProfile", _0_ActiveSurface.NotoActiveSurfaceBoss._d_setProfile, args)

    def usdStatus4GUIClient(self, *args):
        return _omnipy.invoke(self, "usdStatus4GUIClient", _0_ActiveSurface.NotoActiveSurfaceBoss._d_usdStatus4GUIClient, args)

    def setActuator(self, *args):
        return _omnipy.invoke(self, "setActuator", _0_ActiveSurface.NotoActiveSurfaceBoss._d_setActuator, args)

    def up(self, *args):
        return _omnipy.invoke(self, "up", _0_ActiveSurface.NotoActiveSurfaceBoss._d_up, args)

    def down(self, *args):
        return _omnipy.invoke(self, "down", _0_ActiveSurface.NotoActiveSurfaceBoss._d_down, args)

    def bottom(self, *args):
        return _omnipy.invoke(self, "bottom", _0_ActiveSurface.NotoActiveSurfaceBoss._d_bottom, args)

    def top(self, *args):
        return _omnipy.invoke(self, "top", _0_ActiveSurface.NotoActiveSurfaceBoss._d_top, args)

    def reset(self, *args):
        return _omnipy.invoke(self, "reset", _0_ActiveSurface.NotoActiveSurfaceBoss._d_reset, args)

    def recoverUSD(self, *args):
        return _omnipy.invoke(self, "recoverUSD", _0_ActiveSurface.NotoActiveSurfaceBoss._d_recoverUSD, args)

    def calibrate(self, *args):
        return _omnipy.invoke(self, "calibrate", _0_ActiveSurface.NotoActiveSurfaceBoss._d_calibrate, args)

    def calVer(self, *args):
        return _omnipy.invoke(self, "calVer", _0_ActiveSurface.NotoActiveSurfaceBoss._d_calVer, args)

    __methods__ = ["_get_enabled", "_get_pprofile", "_get_tracking", "stop", "stow", "refPos", "update", "move", "correction", "setProfile", "usdStatus4GUIClient", "setActuator", "up", "down", "bottom", "top", "reset", "recoverUSD", "calibrate", "calVer"] + _0_ActiveSurface._objref_ActiveSurfaceBoss.__methods__

omniORB.registerObjref(NotoActiveSurfaceBoss._NP_RepositoryId, _objref_NotoActiveSurfaceBoss)
_0_ActiveSurface._objref_NotoActiveSurfaceBoss = _objref_NotoActiveSurfaceBoss
del NotoActiveSurfaceBoss, _objref_NotoActiveSurfaceBoss

# NotoActiveSurfaceBoss skeleton
__name__ = "ActiveSurface__POA"
class NotoActiveSurfaceBoss (_0_ActiveSurface__POA.ActiveSurfaceBoss):
    _NP_RepositoryId = _0_ActiveSurface.NotoActiveSurfaceBoss._NP_RepositoryId


    _omni_op_d = {"_get_enabled": _0_ActiveSurface.NotoActiveSurfaceBoss._d__get_enabled, "_get_pprofile": _0_ActiveSurface.NotoActiveSurfaceBoss._d__get_pprofile, "_get_tracking": _0_ActiveSurface.NotoActiveSurfaceBoss._d__get_tracking, "stop": _0_ActiveSurface.NotoActiveSurfaceBoss._d_stop, "stow": _0_ActiveSurface.NotoActiveSurfaceBoss._d_stow, "refPos": _0_ActiveSurface.NotoActiveSurfaceBoss._d_refPos, "update": _0_ActiveSurface.NotoActiveSurfaceBoss._d_update, "move": _0_ActiveSurface.NotoActiveSurfaceBoss._d_move, "correction": _0_ActiveSurface.NotoActiveSurfaceBoss._d_correction, "setProfile": _0_ActiveSurface.NotoActiveSurfaceBoss._d_setProfile, "usdStatus4GUIClient": _0_ActiveSurface.NotoActiveSurfaceBoss._d_usdStatus4GUIClient, "setActuator": _0_ActiveSurface.NotoActiveSurfaceBoss._d_setActuator, "up": _0_ActiveSurface.NotoActiveSurfaceBoss._d_up, "down": _0_ActiveSurface.NotoActiveSurfaceBoss._d_down, "bottom": _0_ActiveSurface.NotoActiveSurfaceBoss._d_bottom, "top": _0_ActiveSurface.NotoActiveSurfaceBoss._d_top, "reset": _0_ActiveSurface.NotoActiveSurfaceBoss._d_reset, "recoverUSD": _0_ActiveSurface.NotoActiveSurfaceBoss._d_recoverUSD, "calibrate": _0_ActiveSurface.NotoActiveSurfaceBoss._d_calibrate, "calVer": _0_ActiveSurface.NotoActiveSurfaceBoss._d_calVer}
    _omni_op_d.update(_0_ActiveSurface__POA.ActiveSurfaceBoss._omni_op_d)

NotoActiveSurfaceBoss._omni_skeleton = NotoActiveSurfaceBoss
_0_ActiveSurface__POA.NotoActiveSurfaceBoss = NotoActiveSurfaceBoss
omniORB.registerSkeleton(NotoActiveSurfaceBoss._NP_RepositoryId, NotoActiveSurfaceBoss)
del NotoActiveSurfaceBoss
__name__ = "ActiveSurface"

#
# End of module "ActiveSurface"
#
__name__ = "NotoActiveSurfaceBoss_idl"

_exported_modules = ( "ActiveSurface", )

# The end.
