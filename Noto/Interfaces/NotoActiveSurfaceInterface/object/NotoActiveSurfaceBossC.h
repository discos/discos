// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6.5 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:135

#ifndef _TAO_IDL____OBJECT_NOTOACTIVESURFACEBOSSC_H_
#define _TAO_IDL____OBJECT_NOTOACTIVESURFACEBOSSC_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "baciC.h"
#include "enumpropMACROC.h"
#include "ComponentErrorsC.h"
#include "ASErrorsC.h"
#include "ManagmentDefinitionsC.h"
#include "ActiveSurfaceBossC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// be/be_visitor_root/root_ch.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:49

namespace ActiveSurface
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:57
  
  enum TASOneWayAction
  {
    AS_STOP,
    AS_SETUP,
    AS_STOW,
    AS_REFPOS,
    AS_UP,
    AS_DOWN,
    AS_BOTTOM,
    AS_TOP,
    AS_UPDATE,
    AS_CORRECTION,
    AS_MOVE,
    AS_PROFILE
  };
  
  typedef TASOneWayAction &TASOneWayAction_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASOneWayAction;
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_ACTIVESURFACE_TASONEWAYACTIONSEQ_CH_)
#define _ACTIVESURFACE_TASONEWAYACTIONSEQ_CH_
  
  class TASOneWayActionSeq;
  
  typedef
    TAO_FixedSeq_Var_T<
        TASOneWayActionSeq
      >
    TASOneWayActionSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        TASOneWayActionSeq
      >
    TASOneWayActionSeq_out;
  
  class  TASOneWayActionSeq
    : public
        TAO::unbounded_value_sequence<
            TASOneWayAction
          >
  {
  public:
    TASOneWayActionSeq (void);
    TASOneWayActionSeq ( ::CORBA::ULong max);
    TASOneWayActionSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        TASOneWayAction* buffer, 
        ::CORBA::Boolean release = false
      );
    TASOneWayActionSeq (const TASOneWayActionSeq &);
    virtual ~TASOneWayActionSeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef TASOneWayActionSeq_var _var_type;
    typedef TASOneWayActionSeq_out _out_type;
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASOneWayActionSeq;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_CBTASONEWAYACTION__VAR_OUT_CH_)
#define _ACTIVESURFACE_CBTASONEWAYACTION__VAR_OUT_CH_
  
  class CBTASOneWayAction;
  typedef CBTASOneWayAction *CBTASOneWayAction_ptr;
  
  typedef
    TAO_Objref_Var_T<
        CBTASOneWayAction
      >
    CBTASOneWayAction_var;
  
  typedef
    TAO_Objref_Out_T<
        CBTASOneWayAction
      >
    CBTASOneWayAction_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_CBTASONEWAYACTION_CH_)
#define _ACTIVESURFACE_CBTASONEWAYACTION_CH_
  
  class  CBTASOneWayAction
    : public virtual ::ACS::Callback
  {
  public:
    friend class TAO::Narrow_Utils<CBTASOneWayAction>;
    typedef CBTASOneWayAction_ptr _ptr_type;
    typedef CBTASOneWayAction_var _var_type;
    typedef CBTASOneWayAction_out _out_type;
    
    // The static operations.
    static CBTASOneWayAction_ptr _duplicate (CBTASOneWayAction_ptr obj);
    
    static void _tao_release (CBTASOneWayAction_ptr obj);
    
    static CBTASOneWayAction_ptr _narrow (::CORBA::Object_ptr obj);
    static CBTASOneWayAction_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CBTASOneWayAction_ptr _nil (void)
    {
      return static_cast<CBTASOneWayAction_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void working (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void done (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_CBTASOneWayAction_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    CBTASOneWayAction (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_CBTASOneWayAction_setup_collocation (void);
    
    // Concrete non-local interface only.
    CBTASOneWayAction (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    CBTASOneWayAction (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~CBTASOneWayAction (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CBTASOneWayAction (const CBTASOneWayAction &);
    
    void operator= (const CBTASOneWayAction &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_CBTASOneWayAction;
  
  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:330
  
  typedef CBTASOneWayAction TASOneWayActionCB;
  typedef CBTASOneWayAction_ptr TASOneWayActionCB_ptr;
  typedef CBTASOneWayAction_var TASOneWayActionCB_var;
  typedef CBTASOneWayAction_out TASOneWayActionCB_out;
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASOneWayActionCB;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_ALARMTASONEWAYACTION__VAR_OUT_CH_)
#define _ACTIVESURFACE_ALARMTASONEWAYACTION__VAR_OUT_CH_
  
  class AlarmTASOneWayAction;
  typedef AlarmTASOneWayAction *AlarmTASOneWayAction_ptr;
  
  typedef
    TAO_Objref_Var_T<
        AlarmTASOneWayAction
      >
    AlarmTASOneWayAction_var;
  
  typedef
    TAO_Objref_Out_T<
        AlarmTASOneWayAction
      >
    AlarmTASOneWayAction_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_ALARMTASONEWAYACTION_CH_)
#define _ACTIVESURFACE_ALARMTASONEWAYACTION_CH_
  
  class  AlarmTASOneWayAction
    : public virtual ::ACS::Callback
  {
  public:
    friend class TAO::Narrow_Utils<AlarmTASOneWayAction>;
    typedef AlarmTASOneWayAction_ptr _ptr_type;
    typedef AlarmTASOneWayAction_var _var_type;
    typedef AlarmTASOneWayAction_out _out_type;
    
    // The static operations.
    static AlarmTASOneWayAction_ptr _duplicate (AlarmTASOneWayAction_ptr obj);
    
    static void _tao_release (AlarmTASOneWayAction_ptr obj);
    
    static AlarmTASOneWayAction_ptr _narrow (::CORBA::Object_ptr obj);
    static AlarmTASOneWayAction_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AlarmTASOneWayAction_ptr _nil (void)
    {
      return static_cast<AlarmTASOneWayAction_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void alarm_raised (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void alarm_cleared (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AlarmTASOneWayAction_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AlarmTASOneWayAction (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_AlarmTASOneWayAction_setup_collocation (void);
    
    // Concrete non-local interface only.
    AlarmTASOneWayAction (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    AlarmTASOneWayAction (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~AlarmTASOneWayAction (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AlarmTASOneWayAction (const AlarmTASOneWayAction &);
    
    void operator= (const AlarmTASOneWayAction &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_AlarmTASOneWayAction;
  
  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:330
  
  typedef AlarmTASOneWayAction TASOneWayActionAlarm;
  typedef AlarmTASOneWayAction_ptr TASOneWayActionAlarm_ptr;
  typedef AlarmTASOneWayAction_var TASOneWayActionAlarm_var;
  typedef AlarmTASOneWayAction_out TASOneWayActionAlarm_out;
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASOneWayActionAlarm;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_PTASONEWAYACTION__VAR_OUT_CH_)
#define _ACTIVESURFACE_PTASONEWAYACTION__VAR_OUT_CH_
  
  class PTASOneWayAction;
  typedef PTASOneWayAction *PTASOneWayAction_ptr;
  
  typedef
    TAO_Objref_Var_T<
        PTASOneWayAction
      >
    PTASOneWayAction_var;
  
  typedef
    TAO_Objref_Out_T<
        PTASOneWayAction
      >
    PTASOneWayAction_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_PTASONEWAYACTION_CH_)
#define _ACTIVESURFACE_PTASONEWAYACTION_CH_
  
  class  PTASOneWayAction
    : public virtual ::ACS::TypelessProperty
  {
  public:
    friend class TAO::Narrow_Utils<PTASOneWayAction>;
    typedef PTASOneWayAction_ptr _ptr_type;
    typedef PTASOneWayAction_var _var_type;
    typedef PTASOneWayAction_out _out_type;
    
    // The static operations.
    static PTASOneWayAction_ptr _duplicate (PTASOneWayAction_ptr obj);
    
    static void _tao_release (PTASOneWayAction_ptr obj);
    
    static PTASOneWayAction_ptr _narrow (::CORBA::Object_ptr obj);
    static PTASOneWayAction_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PTASOneWayAction_ptr _nil (void)
    {
      return static_cast<PTASOneWayAction_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASOneWayAction get_sync (
        ::ACSErr::Completion_out c);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_async (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Long get_history (
        ::CORBA::Long n_last_values,
        ::ActiveSurface::TASOneWayActionSeq_out vs,
        ::ACS::TimeSeq_out ts);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::Monitorpattern_ptr create_monitor (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::Monitor_ptr create_postponed_monitor (
        ::ACS::Time start_time,
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::TimeInterval default_timer_trigger (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::TimeInterval min_timer_trigger (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASOneWayAction default_value (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::stringSeq * statesDescription (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::ConditionSeq * condition (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASOneWayActionSeq * allStates (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PTASOneWayAction_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PTASOneWayAction (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_PTASOneWayAction_setup_collocation (void);
    
    // Concrete non-local interface only.
    PTASOneWayAction (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    PTASOneWayAction (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~PTASOneWayAction (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PTASOneWayAction (const PTASOneWayAction &);
    
    void operator= (const PTASOneWayAction &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_PTASOneWayAction;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_ROTASONEWAYACTION__VAR_OUT_CH_)
#define _ACTIVESURFACE_ROTASONEWAYACTION__VAR_OUT_CH_
  
  class ROTASOneWayAction;
  typedef ROTASOneWayAction *ROTASOneWayAction_ptr;
  
  typedef
    TAO_Objref_Var_T<
        ROTASOneWayAction
      >
    ROTASOneWayAction_var;
  
  typedef
    TAO_Objref_Out_T<
        ROTASOneWayAction
      >
    ROTASOneWayAction_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_ROTASONEWAYACTION_CH_)
#define _ACTIVESURFACE_ROTASONEWAYACTION_CH_
  
  class  ROTASOneWayAction
    : public virtual ::ActiveSurface::PTASOneWayAction
  {
  public:
    friend class TAO::Narrow_Utils<ROTASOneWayAction>;
    typedef ROTASOneWayAction_ptr _ptr_type;
    typedef ROTASOneWayAction_var _var_type;
    typedef ROTASOneWayAction_out _out_type;
    
    // The static operations.
    static ROTASOneWayAction_ptr _duplicate (ROTASOneWayAction_ptr obj);
    
    static void _tao_release (ROTASOneWayAction_ptr obj);
    
    static ROTASOneWayAction_ptr _narrow (::CORBA::Object_ptr obj);
    static ROTASOneWayAction_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ROTASOneWayAction_ptr _nil (void)
    {
      return static_cast<ROTASOneWayAction_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::Subscription_ptr new_subscription_AlarmEnum (
        ::ACS::Alarmpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASOneWayActionSeq * alarm_on (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASOneWayActionSeq * alarm_off (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_ROTASOneWayAction_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    ROTASOneWayAction (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_ROTASOneWayAction_setup_collocation (void);
    
    // Concrete non-local interface only.
    ROTASOneWayAction (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    ROTASOneWayAction (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~ROTASOneWayAction (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ROTASOneWayAction (const ROTASOneWayAction &);
    
    void operator= (const ROTASOneWayAction &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_ROTASOneWayAction;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_RWTASONEWAYACTION__VAR_OUT_CH_)
#define _ACTIVESURFACE_RWTASONEWAYACTION__VAR_OUT_CH_
  
  class RWTASOneWayAction;
  typedef RWTASOneWayAction *RWTASOneWayAction_ptr;
  
  typedef
    TAO_Objref_Var_T<
        RWTASOneWayAction
      >
    RWTASOneWayAction_var;
  
  typedef
    TAO_Objref_Out_T<
        RWTASOneWayAction
      >
    RWTASOneWayAction_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_RWTASONEWAYACTION_CH_)
#define _ACTIVESURFACE_RWTASONEWAYACTION_CH_
  
  class  RWTASOneWayAction
    : public virtual ::ActiveSurface::PTASOneWayAction
  {
  public:
    friend class TAO::Narrow_Utils<RWTASOneWayAction>;
    typedef RWTASOneWayAction_ptr _ptr_type;
    typedef RWTASOneWayAction_var _var_type;
    typedef RWTASOneWayAction_out _out_type;
    
    // The static operations.
    static RWTASOneWayAction_ptr _duplicate (RWTASOneWayAction_ptr obj);
    
    static void _tao_release (RWTASOneWayAction_ptr obj);
    
    static RWTASOneWayAction_ptr _narrow (::CORBA::Object_ptr obj);
    static RWTASOneWayAction_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static RWTASOneWayAction_ptr _nil (void)
    {
      return static_cast<RWTASOneWayAction_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACSErr::Completion * set_sync (
        ::ActiveSurface::TASOneWayAction value);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void set_async (
        ::ActiveSurface::TASOneWayAction value,
        ::ACS::CBvoid_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void set_nonblocking (
        ::ActiveSurface::TASOneWayAction value);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_RWTASOneWayAction_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    RWTASOneWayAction (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_RWTASOneWayAction_setup_collocation (void);
    
    // Concrete non-local interface only.
    RWTASOneWayAction (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    RWTASOneWayAction (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~RWTASOneWayAction (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    RWTASOneWayAction (const RWTASOneWayAction &);
    
    void operator= (const RWTASOneWayAction &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_RWTASOneWayAction;
  
  // TAO_IDL - Generated from
  // be/be_visitor_enum/enum_ch.cpp:57
  
  enum TASProfile
  {
    AS_SHAPED,
    AS_SHAPED_FIXED,
    AS_PARABOLIC,
    AS_PARABOLIC_FIXED
  };
  
  typedef TASProfile &TASProfile_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASProfile;
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_ACTIVESURFACE_TASPROFILESEQ_CH_)
#define _ACTIVESURFACE_TASPROFILESEQ_CH_
  
  class TASProfileSeq;
  
  typedef
    TAO_FixedSeq_Var_T<
        TASProfileSeq
      >
    TASProfileSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        TASProfileSeq
      >
    TASProfileSeq_out;
  
  class  TASProfileSeq
    : public
        TAO::unbounded_value_sequence<
            TASProfile
          >
  {
  public:
    TASProfileSeq (void);
    TASProfileSeq ( ::CORBA::ULong max);
    TASProfileSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        TASProfile* buffer, 
        ::CORBA::Boolean release = false
      );
    TASProfileSeq (const TASProfileSeq &);
    virtual ~TASProfileSeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef TASProfileSeq_var _var_type;
    typedef TASProfileSeq_out _out_type;
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASProfileSeq;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_CBTASPROFILE__VAR_OUT_CH_)
#define _ACTIVESURFACE_CBTASPROFILE__VAR_OUT_CH_
  
  class CBTASProfile;
  typedef CBTASProfile *CBTASProfile_ptr;
  
  typedef
    TAO_Objref_Var_T<
        CBTASProfile
      >
    CBTASProfile_var;
  
  typedef
    TAO_Objref_Out_T<
        CBTASProfile
      >
    CBTASProfile_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_CBTASPROFILE_CH_)
#define _ACTIVESURFACE_CBTASPROFILE_CH_
  
  class  CBTASProfile
    : public virtual ::ACS::Callback
  {
  public:
    friend class TAO::Narrow_Utils<CBTASProfile>;
    typedef CBTASProfile_ptr _ptr_type;
    typedef CBTASProfile_var _var_type;
    typedef CBTASProfile_out _out_type;
    
    // The static operations.
    static CBTASProfile_ptr _duplicate (CBTASProfile_ptr obj);
    
    static void _tao_release (CBTASProfile_ptr obj);
    
    static CBTASProfile_ptr _narrow (::CORBA::Object_ptr obj);
    static CBTASProfile_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CBTASProfile_ptr _nil (void)
    {
      return static_cast<CBTASProfile_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void working (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void done (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_CBTASProfile_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    CBTASProfile (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_CBTASProfile_setup_collocation (void);
    
    // Concrete non-local interface only.
    CBTASProfile (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    CBTASProfile (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~CBTASProfile (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CBTASProfile (const CBTASProfile &);
    
    void operator= (const CBTASProfile &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_CBTASProfile;
  
  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:330
  
  typedef CBTASProfile TASProfileCB;
  typedef CBTASProfile_ptr TASProfileCB_ptr;
  typedef CBTASProfile_var TASProfileCB_var;
  typedef CBTASProfile_out TASProfileCB_out;
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASProfileCB;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_ALARMTASPROFILE__VAR_OUT_CH_)
#define _ACTIVESURFACE_ALARMTASPROFILE__VAR_OUT_CH_
  
  class AlarmTASProfile;
  typedef AlarmTASProfile *AlarmTASProfile_ptr;
  
  typedef
    TAO_Objref_Var_T<
        AlarmTASProfile
      >
    AlarmTASProfile_var;
  
  typedef
    TAO_Objref_Out_T<
        AlarmTASProfile
      >
    AlarmTASProfile_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_ALARMTASPROFILE_CH_)
#define _ACTIVESURFACE_ALARMTASPROFILE_CH_
  
  class  AlarmTASProfile
    : public virtual ::ACS::Callback
  {
  public:
    friend class TAO::Narrow_Utils<AlarmTASProfile>;
    typedef AlarmTASProfile_ptr _ptr_type;
    typedef AlarmTASProfile_var _var_type;
    typedef AlarmTASProfile_out _out_type;
    
    // The static operations.
    static AlarmTASProfile_ptr _duplicate (AlarmTASProfile_ptr obj);
    
    static void _tao_release (AlarmTASProfile_ptr obj);
    
    static AlarmTASProfile_ptr _narrow (::CORBA::Object_ptr obj);
    static AlarmTASProfile_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AlarmTASProfile_ptr _nil (void)
    {
      return static_cast<AlarmTASProfile_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void alarm_raised (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void alarm_cleared (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AlarmTASProfile_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AlarmTASProfile (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_AlarmTASProfile_setup_collocation (void);
    
    // Concrete non-local interface only.
    AlarmTASProfile (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    AlarmTASProfile (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~AlarmTASProfile (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AlarmTASProfile (const AlarmTASProfile &);
    
    void operator= (const AlarmTASProfile &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_AlarmTASProfile;
  
  // TAO_IDL - Generated from
  // be/be_visitor_typedef/typedef_ch.cpp:330
  
  typedef AlarmTASProfile TASProfileAlarm;
  typedef AlarmTASProfile_ptr TASProfileAlarm_ptr;
  typedef AlarmTASProfile_var TASProfileAlarm_var;
  typedef AlarmTASProfile_out TASProfileAlarm_out;
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TASProfileAlarm;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_PTASPROFILE__VAR_OUT_CH_)
#define _ACTIVESURFACE_PTASPROFILE__VAR_OUT_CH_
  
  class PTASProfile;
  typedef PTASProfile *PTASProfile_ptr;
  
  typedef
    TAO_Objref_Var_T<
        PTASProfile
      >
    PTASProfile_var;
  
  typedef
    TAO_Objref_Out_T<
        PTASProfile
      >
    PTASProfile_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_PTASPROFILE_CH_)
#define _ACTIVESURFACE_PTASPROFILE_CH_
  
  class  PTASProfile
    : public virtual ::ACS::TypelessProperty
  {
  public:
    friend class TAO::Narrow_Utils<PTASProfile>;
    typedef PTASProfile_ptr _ptr_type;
    typedef PTASProfile_var _var_type;
    typedef PTASProfile_out _out_type;
    
    // The static operations.
    static PTASProfile_ptr _duplicate (PTASProfile_ptr obj);
    
    static void _tao_release (PTASProfile_ptr obj);
    
    static PTASProfile_ptr _narrow (::CORBA::Object_ptr obj);
    static PTASProfile_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PTASProfile_ptr _nil (void)
    {
      return static_cast<PTASProfile_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASProfile get_sync (
        ::ACSErr::Completion_out c);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void get_async (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Long get_history (
        ::CORBA::Long n_last_values,
        ::ActiveSurface::TASProfileSeq_out vs,
        ::ACS::TimeSeq_out ts);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::Monitorpattern_ptr create_monitor (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::Monitor_ptr create_postponed_monitor (
        ::ACS::Time start_time,
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::TimeInterval default_timer_trigger (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::TimeInterval min_timer_trigger (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASProfile default_value (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::stringSeq * statesDescription (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::ConditionSeq * condition (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASProfileSeq * allStates (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PTASProfile_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PTASProfile (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_PTASProfile_setup_collocation (void);
    
    // Concrete non-local interface only.
    PTASProfile (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    PTASProfile (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~PTASProfile (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PTASProfile (const PTASProfile &);
    
    void operator= (const PTASProfile &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_PTASProfile;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_ROTASPROFILE__VAR_OUT_CH_)
#define _ACTIVESURFACE_ROTASPROFILE__VAR_OUT_CH_
  
  class ROTASProfile;
  typedef ROTASProfile *ROTASProfile_ptr;
  
  typedef
    TAO_Objref_Var_T<
        ROTASProfile
      >
    ROTASProfile_var;
  
  typedef
    TAO_Objref_Out_T<
        ROTASProfile
      >
    ROTASProfile_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_ROTASPROFILE_CH_)
#define _ACTIVESURFACE_ROTASPROFILE_CH_
  
  class  ROTASProfile
    : public virtual ::ActiveSurface::PTASProfile
  {
  public:
    friend class TAO::Narrow_Utils<ROTASProfile>;
    typedef ROTASProfile_ptr _ptr_type;
    typedef ROTASProfile_var _var_type;
    typedef ROTASProfile_out _out_type;
    
    // The static operations.
    static ROTASProfile_ptr _duplicate (ROTASProfile_ptr obj);
    
    static void _tao_release (ROTASProfile_ptr obj);
    
    static ROTASProfile_ptr _narrow (::CORBA::Object_ptr obj);
    static ROTASProfile_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ROTASProfile_ptr _nil (void)
    {
      return static_cast<ROTASProfile_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACS::Subscription_ptr new_subscription_AlarmEnum (
        ::ACS::Alarmpattern_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASProfileSeq * alarm_on (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::TASProfileSeq * alarm_off (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_ROTASProfile_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    ROTASProfile (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_ROTASProfile_setup_collocation (void);
    
    // Concrete non-local interface only.
    ROTASProfile (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    ROTASProfile (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~ROTASProfile (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ROTASProfile (const ROTASProfile &);
    
    void operator= (const ROTASProfile &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_ROTASProfile;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_RWTASPROFILE__VAR_OUT_CH_)
#define _ACTIVESURFACE_RWTASPROFILE__VAR_OUT_CH_
  
  class RWTASProfile;
  typedef RWTASProfile *RWTASProfile_ptr;
  
  typedef
    TAO_Objref_Var_T<
        RWTASProfile
      >
    RWTASProfile_var;
  
  typedef
    TAO_Objref_Out_T<
        RWTASProfile
      >
    RWTASProfile_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_RWTASPROFILE_CH_)
#define _ACTIVESURFACE_RWTASPROFILE_CH_
  
  class  RWTASProfile
    : public virtual ::ActiveSurface::PTASProfile
  {
  public:
    friend class TAO::Narrow_Utils<RWTASProfile>;
    typedef RWTASProfile_ptr _ptr_type;
    typedef RWTASProfile_var _var_type;
    typedef RWTASProfile_out _out_type;
    
    // The static operations.
    static RWTASProfile_ptr _duplicate (RWTASProfile_ptr obj);
    
    static void _tao_release (RWTASProfile_ptr obj);
    
    static RWTASProfile_ptr _narrow (::CORBA::Object_ptr obj);
    static RWTASProfile_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static RWTASProfile_ptr _nil (void)
    {
      return static_cast<RWTASProfile_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ACSErr::Completion * set_sync (
        ::ActiveSurface::TASProfile value);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void set_async (
        ::ActiveSurface::TASProfile value,
        ::ACS::CBvoid_ptr cb,
        const ::ACS::CBDescIn & desc);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void set_nonblocking (
        ::ActiveSurface::TASProfile value);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_RWTASProfile_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    RWTASProfile (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_RWTASProfile_setup_collocation (void);
    
    // Concrete non-local interface only.
    RWTASProfile (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    RWTASProfile (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~RWTASProfile (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    RWTASProfile (const RWTASProfile &);
    
    void operator= (const RWTASProfile &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_RWTASProfile;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:644

#if !defined (_ACTIVESURFACE_NOTOACTIVESURFACEBOSS__VAR_OUT_CH_)
#define _ACTIVESURFACE_NOTOACTIVESURFACEBOSS__VAR_OUT_CH_
  
  class NotoActiveSurfaceBoss;
  typedef NotoActiveSurfaceBoss *NotoActiveSurfaceBoss_ptr;
  
  typedef
    TAO_Objref_Var_T<
        NotoActiveSurfaceBoss
      >
    NotoActiveSurfaceBoss_var;
  
  typedef
    TAO_Objref_Out_T<
        NotoActiveSurfaceBoss
      >
    NotoActiveSurfaceBoss_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_ACTIVESURFACE_NOTOACTIVESURFACEBOSS_CH_)
#define _ACTIVESURFACE_NOTOACTIVESURFACEBOSS_CH_
  
  class  NotoActiveSurfaceBoss
    : public virtual ::ActiveSurface::ActiveSurfaceBoss
  {
  public:
    friend class TAO::Narrow_Utils<NotoActiveSurfaceBoss>;
    typedef NotoActiveSurfaceBoss_ptr _ptr_type;
    typedef NotoActiveSurfaceBoss_var _var_type;
    typedef NotoActiveSurfaceBoss_out _out_type;
    
    // The static operations.
    static NotoActiveSurfaceBoss_ptr _duplicate (NotoActiveSurfaceBoss_ptr obj);
    
    static void _tao_release (NotoActiveSurfaceBoss_ptr obj);
    
    static NotoActiveSurfaceBoss_ptr _narrow (::CORBA::Object_ptr obj);
    static NotoActiveSurfaceBoss_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static NotoActiveSurfaceBoss_ptr _nil (void)
    {
      return static_cast<NotoActiveSurfaceBoss_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Management::ROTBoolean_ptr enabled (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::ActiveSurface::ROTASProfile_ptr pprofile (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::Management::ROTBoolean_ptr tracking (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void stop (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void stow (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void refPos (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void update (
        ::CORBA::Double elevation);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void move (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius,
        ::CORBA::Long incr);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void correction (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius,
        ::CORBA::Double correction);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void setProfile (
        ::ActiveSurface::TASProfile profile);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void usdStatus4GUIClient (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long_out status);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void setActuator (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long_out actPos,
        ::CORBA::Long_out cmdPos,
        ::CORBA::Long_out Fmin,
        ::CORBA::Long_out Fmax,
        ::CORBA::Long_out acc,
        ::CORBA::Long_out delay);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void up (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void down (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void bottom (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void top (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void reset (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void recoverUSD (
        ::CORBA::Long circle,
        ::CORBA::Long actuator);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void calibrate (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void calVer (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    NotoActiveSurfaceBoss (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void ActiveSurface_NotoActiveSurfaceBoss_setup_collocation (void);
    
    // Concrete non-local interface only.
    NotoActiveSurfaceBoss (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    NotoActiveSurfaceBoss (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~NotoActiveSurfaceBoss (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    NotoActiveSurfaceBoss (const NotoActiveSurfaceBoss &);
    
    void operator= (const NotoActiveSurfaceBoss &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_NotoActiveSurfaceBoss;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:78

} // module ActiveSurface

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be/be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_CBTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_AlarmTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_PTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_ROTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_RWTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_CBTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_AlarmTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_PTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_ROTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_RWTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*ActiveSurface__TAO_NotoActiveSurfaceBoss_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:64

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_ACTIVESURFACE_CBTASONEWAYACTION__TRAITS_)
#define _ACTIVESURFACE_CBTASONEWAYACTION__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::CBTASOneWayAction>
  {
    static ::ActiveSurface::CBTASOneWayAction_ptr duplicate (
        ::ActiveSurface::CBTASOneWayAction_ptr p
      );
    static void release (
        ::ActiveSurface::CBTASOneWayAction_ptr p
      );
    static ::ActiveSurface::CBTASOneWayAction_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::CBTASOneWayAction_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_ALARMTASONEWAYACTION__TRAITS_)
#define _ACTIVESURFACE_ALARMTASONEWAYACTION__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::AlarmTASOneWayAction>
  {
    static ::ActiveSurface::AlarmTASOneWayAction_ptr duplicate (
        ::ActiveSurface::AlarmTASOneWayAction_ptr p
      );
    static void release (
        ::ActiveSurface::AlarmTASOneWayAction_ptr p
      );
    static ::ActiveSurface::AlarmTASOneWayAction_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::AlarmTASOneWayAction_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_PTASONEWAYACTION__TRAITS_)
#define _ACTIVESURFACE_PTASONEWAYACTION__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::PTASOneWayAction>
  {
    static ::ActiveSurface::PTASOneWayAction_ptr duplicate (
        ::ActiveSurface::PTASOneWayAction_ptr p
      );
    static void release (
        ::ActiveSurface::PTASOneWayAction_ptr p
      );
    static ::ActiveSurface::PTASOneWayAction_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::PTASOneWayAction_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_ROTASONEWAYACTION__TRAITS_)
#define _ACTIVESURFACE_ROTASONEWAYACTION__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::ROTASOneWayAction>
  {
    static ::ActiveSurface::ROTASOneWayAction_ptr duplicate (
        ::ActiveSurface::ROTASOneWayAction_ptr p
      );
    static void release (
        ::ActiveSurface::ROTASOneWayAction_ptr p
      );
    static ::ActiveSurface::ROTASOneWayAction_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::ROTASOneWayAction_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_RWTASONEWAYACTION__TRAITS_)
#define _ACTIVESURFACE_RWTASONEWAYACTION__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::RWTASOneWayAction>
  {
    static ::ActiveSurface::RWTASOneWayAction_ptr duplicate (
        ::ActiveSurface::RWTASOneWayAction_ptr p
      );
    static void release (
        ::ActiveSurface::RWTASOneWayAction_ptr p
      );
    static ::ActiveSurface::RWTASOneWayAction_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::RWTASOneWayAction_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_CBTASPROFILE__TRAITS_)
#define _ACTIVESURFACE_CBTASPROFILE__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::CBTASProfile>
  {
    static ::ActiveSurface::CBTASProfile_ptr duplicate (
        ::ActiveSurface::CBTASProfile_ptr p
      );
    static void release (
        ::ActiveSurface::CBTASProfile_ptr p
      );
    static ::ActiveSurface::CBTASProfile_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::CBTASProfile_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_ALARMTASPROFILE__TRAITS_)
#define _ACTIVESURFACE_ALARMTASPROFILE__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::AlarmTASProfile>
  {
    static ::ActiveSurface::AlarmTASProfile_ptr duplicate (
        ::ActiveSurface::AlarmTASProfile_ptr p
      );
    static void release (
        ::ActiveSurface::AlarmTASProfile_ptr p
      );
    static ::ActiveSurface::AlarmTASProfile_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::AlarmTASProfile_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_PTASPROFILE__TRAITS_)
#define _ACTIVESURFACE_PTASPROFILE__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::PTASProfile>
  {
    static ::ActiveSurface::PTASProfile_ptr duplicate (
        ::ActiveSurface::PTASProfile_ptr p
      );
    static void release (
        ::ActiveSurface::PTASProfile_ptr p
      );
    static ::ActiveSurface::PTASProfile_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::PTASProfile_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_ROTASPROFILE__TRAITS_)
#define _ACTIVESURFACE_ROTASPROFILE__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::ROTASProfile>
  {
    static ::ActiveSurface::ROTASProfile_ptr duplicate (
        ::ActiveSurface::ROTASProfile_ptr p
      );
    static void release (
        ::ActiveSurface::ROTASProfile_ptr p
      );
    static ::ActiveSurface::ROTASProfile_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::ROTASProfile_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_RWTASPROFILE__TRAITS_)
#define _ACTIVESURFACE_RWTASPROFILE__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::RWTASProfile>
  {
    static ::ActiveSurface::RWTASProfile_ptr duplicate (
        ::ActiveSurface::RWTASProfile_ptr p
      );
    static void release (
        ::ActiveSurface::RWTASProfile_ptr p
      );
    static ::ActiveSurface::RWTASProfile_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::RWTASProfile_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_ACTIVESURFACE_NOTOACTIVESURFACEBOSS__TRAITS_)
#define _ACTIVESURFACE_NOTOACTIVESURFACEBOSS__TRAITS_
  
  template<>
  struct  Objref_Traits< ::ActiveSurface::NotoActiveSurfaceBoss>
  {
    static ::ActiveSurface::NotoActiveSurfaceBoss_ptr duplicate (
        ::ActiveSurface::NotoActiveSurfaceBoss_ptr p
      );
    static void release (
        ::ActiveSurface::NotoActiveSurfaceBoss_ptr p
      );
    static ::ActiveSurface::NotoActiveSurfaceBoss_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ActiveSurface::NotoActiveSurfaceBoss_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, ActiveSurface::TASOneWayAction);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::TASOneWayAction &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const ActiveSurface::TASOneWayActionSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, ActiveSurface::TASOneWayActionSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::TASOneWayActionSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ActiveSurface::TASOneWayActionSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, CBTASOneWayAction_ptr); // copying
   void operator<<= ( ::CORBA::Any &, CBTASOneWayAction_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CBTASOneWayAction_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::CBTASOneWayAction_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::CBTASOneWayAction_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::CBTASOneWayAction_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, AlarmTASOneWayAction_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AlarmTASOneWayAction_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AlarmTASOneWayAction_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::AlarmTASOneWayAction_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::AlarmTASOneWayAction_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::AlarmTASOneWayAction_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, PTASOneWayAction_ptr); // copying
   void operator<<= ( ::CORBA::Any &, PTASOneWayAction_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PTASOneWayAction_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::PTASOneWayAction_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::PTASOneWayAction_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::PTASOneWayAction_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, ROTASOneWayAction_ptr); // copying
   void operator<<= ( ::CORBA::Any &, ROTASOneWayAction_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ROTASOneWayAction_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::ROTASOneWayAction_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::ROTASOneWayAction_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::ROTASOneWayAction_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, RWTASOneWayAction_ptr); // copying
   void operator<<= ( ::CORBA::Any &, RWTASOneWayAction_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RWTASOneWayAction_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::RWTASOneWayAction_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::RWTASOneWayAction_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::RWTASOneWayAction_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, ActiveSurface::TASProfile);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::TASProfile &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const ActiveSurface::TASProfileSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, ActiveSurface::TASProfileSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::TASProfileSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ActiveSurface::TASProfileSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, CBTASProfile_ptr); // copying
   void operator<<= ( ::CORBA::Any &, CBTASProfile_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CBTASProfile_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::CBTASProfile_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::CBTASProfile_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::CBTASProfile_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, AlarmTASProfile_ptr); // copying
   void operator<<= ( ::CORBA::Any &, AlarmTASProfile_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AlarmTASProfile_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::AlarmTASProfile_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::AlarmTASProfile_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::AlarmTASProfile_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, PTASProfile_ptr); // copying
   void operator<<= ( ::CORBA::Any &, PTASProfile_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PTASProfile_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::PTASProfile_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::PTASProfile_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::PTASProfile_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, ROTASProfile_ptr); // copying
   void operator<<= ( ::CORBA::Any &, ROTASProfile_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ROTASProfile_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::ROTASProfile_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::ROTASProfile_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::ROTASProfile_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, RWTASProfile_ptr); // copying
   void operator<<= ( ::CORBA::Any &, RWTASProfile_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RWTASProfile_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::RWTASProfile_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::RWTASProfile_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::RWTASProfile_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
   void operator<<= ( ::CORBA::Any &, NotoActiveSurfaceBoss_ptr); // copying
   void operator<<= ( ::CORBA::Any &, NotoActiveSurfaceBoss_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NotoActiveSurfaceBoss_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, ActiveSurface::NotoActiveSurfaceBoss_ptr); // copying
 void operator<<= (::CORBA::Any &, ActiveSurface::NotoActiveSurfaceBoss_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActiveSurface::NotoActiveSurfaceBoss_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ActiveSurface::TASOneWayAction _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, ActiveSurface::TASOneWayAction &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_ActiveSurface_TASOneWayActionSeq_H_
#define _TAO_CDR_OP_ActiveSurface_TASOneWayActionSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::TASOneWayActionSeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::TASOneWayActionSeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_ActiveSurface_TASOneWayActionSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::CBTASOneWayAction_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::CBTASOneWayAction_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::AlarmTASOneWayAction_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::AlarmTASOneWayAction_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::PTASOneWayAction_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::PTASOneWayAction_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::ROTASOneWayAction_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::ROTASOneWayAction_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::RWTASOneWayAction_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::RWTASOneWayAction_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_ch.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ActiveSurface::TASProfile _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, ActiveSurface::TASProfile &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_ActiveSurface_TASProfileSeq_H_
#define _TAO_CDR_OP_ActiveSurface_TASProfileSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::TASProfileSeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::TASProfileSeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_ActiveSurface_TASProfileSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::CBTASProfile_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::CBTASProfile_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::AlarmTASProfile_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::AlarmTASProfile_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::PTASProfile_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::PTASProfile_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::ROTASProfile_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::ROTASProfile_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::RWTASProfile_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::RWTASProfile_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ActiveSurface::NotoActiveSurfaceBoss_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, ActiveSurface::NotoActiveSurfaceBoss_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1226
#if defined (__ACE_INLINE__)
#include "NotoActiveSurfaceBossC.inl"
#endif /* defined INLINE */

#endif /* ifndef */


