// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6.5 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:487

#ifndef _TAO_IDL____OBJECT_NOTOACTIVESURFACEBOSSS_H_
#define _TAO_IDL____OBJECT_NOTOACTIVESURFACEBOSSS_H_


#include "NotoActiveSurfaceBossC.h"
#include "baciS.h"
#include "enumpropMACROS.h"
#include "ComponentErrorsS.h"
#include "ASErrorsS.h"
#include "ManagmentDefinitionsS.h"
#include "ActiveSurfaceBossS.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:49

namespace POA_ActiveSurface
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class CBTASOneWayAction;
  typedef CBTASOneWayAction *CBTASOneWayAction_ptr;
  
  class  CBTASOneWayAction
    : public virtual POA_ACS::Callback
  {
  protected:
    CBTASOneWayAction (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::CBTASOneWayAction _stub_type;
    typedef ::ActiveSurface::CBTASOneWayAction_ptr _stub_ptr_type;
    typedef ::ActiveSurface::CBTASOneWayAction_var _stub_var_type;
    
    CBTASOneWayAction (const CBTASOneWayAction& rhs);
    virtual ~CBTASOneWayAction (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::CBTASOneWayAction *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void working (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void working_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void done (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void done_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    negotiate_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class AlarmTASOneWayAction;
  typedef AlarmTASOneWayAction *AlarmTASOneWayAction_ptr;
  
  class  AlarmTASOneWayAction
    : public virtual POA_ACS::Callback
  {
  protected:
    AlarmTASOneWayAction (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::AlarmTASOneWayAction _stub_type;
    typedef ::ActiveSurface::AlarmTASOneWayAction_ptr _stub_ptr_type;
    typedef ::ActiveSurface::AlarmTASOneWayAction_var _stub_var_type;
    
    AlarmTASOneWayAction (const AlarmTASOneWayAction& rhs);
    virtual ~AlarmTASOneWayAction (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::AlarmTASOneWayAction *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void alarm_raised (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void alarm_raised_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void alarm_cleared (
        ::ActiveSurface::TASOneWayAction value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void alarm_cleared_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    negotiate_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class PTASOneWayAction;
  typedef PTASOneWayAction *PTASOneWayAction_ptr;
  
  class  PTASOneWayAction
    : public virtual POA_ACS::TypelessProperty
  {
  protected:
    PTASOneWayAction (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::PTASOneWayAction _stub_type;
    typedef ::ActiveSurface::PTASOneWayAction_ptr _stub_ptr_type;
    typedef ::ActiveSurface::PTASOneWayAction_var _stub_var_type;
    
    PTASOneWayAction (const PTASOneWayAction& rhs);
    virtual ~PTASOneWayAction (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::PTASOneWayAction *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASOneWayAction get_sync (
        ::ACSErr::Completion_out c) = 0;
    
    static void get_sync_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void get_async (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void get_async_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::CORBA::Long get_history (
        ::CORBA::Long n_last_values,
        ::ActiveSurface::TASOneWayActionSeq_out vs,
        ::ACS::TimeSeq_out ts) = 0;
    
    static void get_history_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::Monitorpattern_ptr create_monitor (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void create_monitor_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::Monitor_ptr create_postponed_monitor (
        ::ACS::Time start_time,
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void create_postponed_monitor_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::TimeInterval default_timer_trigger (
        void) = 0;
    
    static void _get_default_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::TimeInterval min_timer_trigger (
        void) = 0;
    
    static void _get_min_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASOneWayAction default_value (
        void) = 0;
    
    static void _get_default_value_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::stringSeq * statesDescription (
        void) = 0;
    
    static void _get_statesDescription_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::ConditionSeq * condition (
        void) = 0;
    
    static void _get_condition_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASOneWayActionSeq * allStates (
        void) = 0;
    
    static void _get_allStates_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_characteristic_by_name_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    find_characteristic_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_all_characteristics_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_characteristic_component_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_description_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_format_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_units_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_resolution_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class ROTASOneWayAction;
  typedef ROTASOneWayAction *ROTASOneWayAction_ptr;
  
  class  ROTASOneWayAction
    : public virtual POA_ActiveSurface::PTASOneWayAction
  {
  protected:
    ROTASOneWayAction (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::ROTASOneWayAction _stub_type;
    typedef ::ActiveSurface::ROTASOneWayAction_ptr _stub_ptr_type;
    typedef ::ActiveSurface::ROTASOneWayAction_var _stub_var_type;
    
    ROTASOneWayAction (const ROTASOneWayAction& rhs);
    virtual ~ROTASOneWayAction (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::ROTASOneWayAction *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::Subscription_ptr new_subscription_AlarmEnum (
        ::ACS::Alarmpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void new_subscription_AlarmEnum_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASOneWayActionSeq * alarm_on (
        void) = 0;
    
    static void _get_alarm_on_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASOneWayActionSeq * alarm_off (
        void) = 0;
    
    static void _get_alarm_off_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_characteristic_by_name_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    find_characteristic_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_all_characteristics_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_characteristic_component_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_description_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_format_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_units_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_resolution_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_sync_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_async_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_history_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_postponed_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_min_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_value_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_statesDescription_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_condition_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_allStates_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class RWTASOneWayAction;
  typedef RWTASOneWayAction *RWTASOneWayAction_ptr;
  
  class  RWTASOneWayAction
    : public virtual POA_ActiveSurface::PTASOneWayAction
  {
  protected:
    RWTASOneWayAction (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::RWTASOneWayAction _stub_type;
    typedef ::ActiveSurface::RWTASOneWayAction_ptr _stub_ptr_type;
    typedef ::ActiveSurface::RWTASOneWayAction_var _stub_var_type;
    
    RWTASOneWayAction (const RWTASOneWayAction& rhs);
    virtual ~RWTASOneWayAction (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::RWTASOneWayAction *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACSErr::Completion * set_sync (
        ::ActiveSurface::TASOneWayAction value) = 0;
    
    static void set_sync_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void set_async (
        ::ActiveSurface::TASOneWayAction value,
        ::ACS::CBvoid_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void set_async_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void set_nonblocking (
        ::ActiveSurface::TASOneWayAction value) = 0;
    
    static void set_nonblocking_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_characteristic_by_name_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    find_characteristic_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_all_characteristics_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_characteristic_component_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_description_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_format_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_units_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_resolution_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_sync_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_async_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_history_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_postponed_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_min_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_value_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_statesDescription_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_condition_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_allStates_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class CBTASProfile;
  typedef CBTASProfile *CBTASProfile_ptr;
  
  class  CBTASProfile
    : public virtual POA_ACS::Callback
  {
  protected:
    CBTASProfile (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::CBTASProfile _stub_type;
    typedef ::ActiveSurface::CBTASProfile_ptr _stub_ptr_type;
    typedef ::ActiveSurface::CBTASProfile_var _stub_var_type;
    
    CBTASProfile (const CBTASProfile& rhs);
    virtual ~CBTASProfile (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::CBTASProfile *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void working (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void working_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void done (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void done_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    negotiate_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class AlarmTASProfile;
  typedef AlarmTASProfile *AlarmTASProfile_ptr;
  
  class  AlarmTASProfile
    : public virtual POA_ACS::Callback
  {
  protected:
    AlarmTASProfile (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::AlarmTASProfile _stub_type;
    typedef ::ActiveSurface::AlarmTASProfile_ptr _stub_ptr_type;
    typedef ::ActiveSurface::AlarmTASProfile_var _stub_var_type;
    
    AlarmTASProfile (const AlarmTASProfile& rhs);
    virtual ~AlarmTASProfile (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::AlarmTASProfile *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void alarm_raised (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void alarm_raised_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void alarm_cleared (
        ::ActiveSurface::TASProfile value,
        const ::ACSErr::Completion & c,
        const ::ACS::CBDescOut & desc) = 0;
    
    static void alarm_cleared_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    negotiate_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class PTASProfile;
  typedef PTASProfile *PTASProfile_ptr;
  
  class  PTASProfile
    : public virtual POA_ACS::TypelessProperty
  {
  protected:
    PTASProfile (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::PTASProfile _stub_type;
    typedef ::ActiveSurface::PTASProfile_ptr _stub_ptr_type;
    typedef ::ActiveSurface::PTASProfile_var _stub_var_type;
    
    PTASProfile (const PTASProfile& rhs);
    virtual ~PTASProfile (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::PTASProfile *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASProfile get_sync (
        ::ACSErr::Completion_out c) = 0;
    
    static void get_sync_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void get_async (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void get_async_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::CORBA::Long get_history (
        ::CORBA::Long n_last_values,
        ::ActiveSurface::TASProfileSeq_out vs,
        ::ACS::TimeSeq_out ts) = 0;
    
    static void get_history_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::Monitorpattern_ptr create_monitor (
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void create_monitor_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::Monitor_ptr create_postponed_monitor (
        ::ACS::Time start_time,
        ::ACS::CBpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void create_postponed_monitor_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::TimeInterval default_timer_trigger (
        void) = 0;
    
    static void _get_default_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::TimeInterval min_timer_trigger (
        void) = 0;
    
    static void _get_min_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASProfile default_value (
        void) = 0;
    
    static void _get_default_value_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::stringSeq * statesDescription (
        void) = 0;
    
    static void _get_statesDescription_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::ConditionSeq * condition (
        void) = 0;
    
    static void _get_condition_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASProfileSeq * allStates (
        void) = 0;
    
    static void _get_allStates_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_characteristic_by_name_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    find_characteristic_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_all_characteristics_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_characteristic_component_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_description_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_format_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_units_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_resolution_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class ROTASProfile;
  typedef ROTASProfile *ROTASProfile_ptr;
  
  class  ROTASProfile
    : public virtual POA_ActiveSurface::PTASProfile
  {
  protected:
    ROTASProfile (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::ROTASProfile _stub_type;
    typedef ::ActiveSurface::ROTASProfile_ptr _stub_ptr_type;
    typedef ::ActiveSurface::ROTASProfile_var _stub_var_type;
    
    ROTASProfile (const ROTASProfile& rhs);
    virtual ~ROTASProfile (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::ROTASProfile *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACS::Subscription_ptr new_subscription_AlarmEnum (
        ::ACS::Alarmpattern_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void new_subscription_AlarmEnum_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASProfileSeq * alarm_on (
        void) = 0;
    
    static void _get_alarm_on_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::TASProfileSeq * alarm_off (
        void) = 0;
    
    static void _get_alarm_off_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_characteristic_by_name_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    find_characteristic_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_all_characteristics_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_characteristic_component_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_description_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_format_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_units_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_resolution_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_sync_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_async_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_history_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_postponed_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_min_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_value_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_statesDescription_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_condition_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_allStates_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class RWTASProfile;
  typedef RWTASProfile *RWTASProfile_ptr;
  
  class  RWTASProfile
    : public virtual POA_ActiveSurface::PTASProfile
  {
  protected:
    RWTASProfile (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::RWTASProfile _stub_type;
    typedef ::ActiveSurface::RWTASProfile_ptr _stub_ptr_type;
    typedef ::ActiveSurface::RWTASProfile_var _stub_var_type;
    
    RWTASProfile (const RWTASProfile& rhs);
    virtual ~RWTASProfile (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::RWTASProfile *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ACSErr::Completion * set_sync (
        ::ActiveSurface::TASProfile value) = 0;
    
    static void set_sync_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void set_async (
        ::ActiveSurface::TASProfile value,
        ::ACS::CBvoid_ptr cb,
        const ::ACS::CBDescIn & desc) = 0;
    
    static void set_async_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void set_nonblocking (
        ::ActiveSurface::TASProfile value) = 0;
    
    static void set_nonblocking_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_characteristic_by_name_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    find_characteristic_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_all_characteristics_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_characteristic_component_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_description_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_format_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_units_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_resolution_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_sync_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_async_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_history_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    create_postponed_monitor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_min_timer_trigger_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_default_value_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_statesDescription_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_condition_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_allStates_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class NotoActiveSurfaceBoss;
  typedef NotoActiveSurfaceBoss *NotoActiveSurfaceBoss_ptr;
  
  class  NotoActiveSurfaceBoss
    : public virtual POA_ActiveSurface::ActiveSurfaceBoss
  {
  protected:
    NotoActiveSurfaceBoss (void);
  
  public:
    // Useful for template programming.
    typedef ::ActiveSurface::NotoActiveSurfaceBoss _stub_type;
    typedef ::ActiveSurface::NotoActiveSurfaceBoss_ptr _stub_ptr_type;
    typedef ::ActiveSurface::NotoActiveSurfaceBoss_var _stub_var_type;
    
    NotoActiveSurfaceBoss (const NotoActiveSurfaceBoss& rhs);
    virtual ~NotoActiveSurfaceBoss (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::ActiveSurface::NotoActiveSurfaceBoss *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::Management::ROTBoolean_ptr enabled (
        void) = 0;
    
    static void _get_enabled_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::ActiveSurface::ROTASProfile_ptr pprofile (
        void) = 0;
    
    static void _get_pprofile_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::Management::ROTBoolean_ptr tracking (
        void) = 0;
    
    static void _get_tracking_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void stop (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void stop_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void stow (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void stow_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void refPos (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void refPos_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void update (
        ::CORBA::Double elevation) = 0;
    
    static void update_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void move (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius,
        ::CORBA::Long incr) = 0;
    
    static void move_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void correction (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius,
        ::CORBA::Double correction) = 0;
    
    static void correction_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void setProfile (
        ::ActiveSurface::TASProfile profile) = 0;
    
    static void setProfile_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void usdStatus4GUIClient (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long_out status) = 0;
    
    static void usdStatus4GUIClient_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void setActuator (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long_out actPos,
        ::CORBA::Long_out cmdPos,
        ::CORBA::Long_out Fmin,
        ::CORBA::Long_out Fmax,
        ::CORBA::Long_out acc,
        ::CORBA::Long_out delay) = 0;
    
    static void setActuator_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void up (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void up_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void down (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void down_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void bottom (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void bottom_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void top (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void top_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void reset (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void reset_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void recoverUSD (
        ::CORBA::Long circle,
        ::CORBA::Long actuator) = 0;
    
    static void recoverUSD_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void calibrate (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void calibrate_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void calVer (
        ::CORBA::Long circle,
        ::CORBA::Long actuator,
        ::CORBA::Long radius) = 0;
    
    static void calVer_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_componentState_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_characteristic_by_name_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    find_characteristic_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    get_all_characteristics_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    descriptor_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    command_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    static void
    _get_status_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    setup_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    park_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    asOff_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_interface.cpp:2043
    
    static void
    asOn_skel (
        TAO_ServerRequest & server_request, 
        void * servant_upcall,
        void * servant
      );
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:80

} // module ActiveSurface

// TAO_IDL - Generated from 
// be/be_codegen.cpp:1288


#if defined (__ACE_INLINE__)
#include "NotoActiveSurfaceBossS.inl"
#endif /* defined INLINE */

#endif /* ifndef */

