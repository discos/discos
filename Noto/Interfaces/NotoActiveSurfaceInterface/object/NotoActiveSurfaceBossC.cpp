// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6.5 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:381


#include "NotoActiveSurfaceBossC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "NotoActiveSurfaceBossC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:620

#if !defined (_ACS_STRINGSEQ__ARG_TRAITS_)
#define _ACS_STRINGSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ACS::stringSeq>
    : public
        Var_Size_Arg_Traits_T<
            ACS::stringSeq,
            TAO::Any_Insert_Policy_Stream <ACS::stringSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:620

#if !defined (_ACS_TIMESEQ__ARG_TRAITS_)
#define _ACS_TIMESEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ACS::TimeSeq>
    : public
        Var_Size_Arg_Traits_T<
            ACS::TimeSeq,
            TAO::Any_Insert_Policy_Stream <ACS::TimeSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:620

#if !defined (_ACS_CONDITIONSEQ__ARG_TRAITS_)
#define _ACS_CONDITIONSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ACS::ConditionSeq>
    : public
        Var_Size_Arg_Traits_T<
            ACS::ConditionSeq,
            TAO::Any_Insert_Policy_Stream <ACS::ConditionSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:868

#if !defined (_ACSERR_COMPLETION__ARG_TRAITS_)
#define _ACSERR_COMPLETION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ACSErr::Completion>
    : public
        Var_Size_Arg_Traits_T<
            ACSErr::Completion,
            TAO::Any_Insert_Policy_Stream <ACSErr::Completion>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:868

#if !defined (_ACS_CBDESCIN__ARG_TRAITS_)
#define _ACS_CBDESCIN__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ACS::CBDescIn>
    : public
        Fixed_Size_Arg_Traits_T<
            ACS::CBDescIn,
            TAO::Any_Insert_Policy_Stream <ACS::CBDescIn>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:868

#if !defined (_ACS_CBDESCOUT__ARG_TRAITS_)
#define _ACS_CBDESCOUT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ACS::CBDescOut>
    : public
        Fixed_Size_Arg_Traits_T<
            ACS::CBDescOut,
            TAO::Any_Insert_Policy_Stream <ACS::CBDescOut>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACS_SUBSCRIPTION__ARG_TRAITS_)
#define _ACS_SUBSCRIPTION__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ACS::Subscription>
    : public
        Object_Arg_Traits_T<
            ACS::Subscription_ptr,
            ACS::Subscription_var,
            ACS::Subscription_out,
            TAO::Objref_Traits<ACS::Subscription>,
            TAO::Any_Insert_Policy_Stream <ACS::Subscription_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACS_MONITOR__ARG_TRAITS_)
#define _ACS_MONITOR__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ACS::Monitor>
    : public
        Object_Arg_Traits_T<
            ACS::Monitor_ptr,
            ACS::Monitor_var,
            ACS::Monitor_out,
            TAO::Objref_Traits<ACS::Monitor>,
            TAO::Any_Insert_Policy_Stream <ACS::Monitor_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACS_MONITORPATTERN__ARG_TRAITS_)
#define _ACS_MONITORPATTERN__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ACS::Monitorpattern>
    : public
        Object_Arg_Traits_T<
            ACS::Monitorpattern_ptr,
            ACS::Monitorpattern_var,
            ACS::Monitorpattern_out,
            TAO::Objref_Traits<ACS::Monitorpattern>,
            TAO::Any_Insert_Policy_Stream <ACS::Monitorpattern_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACS_CBVOID__ARG_TRAITS_)
#define _ACS_CBVOID__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ACS::CBvoid>
    : public
        Object_Arg_Traits_T<
            ACS::CBvoid_ptr,
            ACS::CBvoid_var,
            ACS::CBvoid_out,
            TAO::Objref_Traits<ACS::CBvoid>,
            TAO::Any_Insert_Policy_Stream <ACS::CBvoid_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACS_CBPATTERN__ARG_TRAITS_)
#define _ACS_CBPATTERN__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ACS::CBpattern>
    : public
        Object_Arg_Traits_T<
            ACS::CBpattern_ptr,
            ACS::CBpattern_var,
            ACS::CBpattern_out,
            TAO::Objref_Traits<ACS::CBpattern>,
            TAO::Any_Insert_Policy_Stream <ACS::CBpattern_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACS_ALARMPATTERN__ARG_TRAITS_)
#define _ACS_ALARMPATTERN__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ACS::Alarmpattern>
    : public
        Object_Arg_Traits_T<
            ACS::Alarmpattern_ptr,
            ACS::Alarmpattern_var,
            ACS::Alarmpattern_out,
            TAO::Objref_Traits<ACS::Alarmpattern>,
            TAO::Any_Insert_Policy_Stream <ACS::Alarmpattern_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_MANAGEMENT_ROTBOOLEAN__ARG_TRAITS_)
#define _MANAGEMENT_ROTBOOLEAN__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<Management::ROTBoolean>
    : public
        Object_Arg_Traits_T<
            Management::ROTBoolean_ptr,
            Management::ROTBoolean_var,
            Management::ROTBoolean_out,
            TAO::Objref_Traits<Management::ROTBoolean>,
            TAO::Any_Insert_Policy_Stream <Management::ROTBoolean_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:826

#if !defined (_ACTIVESURFACE_TASONEWAYACTION__ARG_TRAITS_)
#define _ACTIVESURFACE_TASONEWAYACTION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ActiveSurface::TASOneWayAction>
    : public
        Basic_Arg_Traits_T<
            ActiveSurface::TASOneWayAction,
            TAO::Any_Insert_Policy_Stream <ActiveSurface::TASOneWayAction>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:620

#if !defined (_ACTIVESURFACE_TASONEWAYACTIONSEQ__ARG_TRAITS_)
#define _ACTIVESURFACE_TASONEWAYACTIONSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ActiveSurface::TASOneWayActionSeq>
    : public
        Var_Size_Arg_Traits_T<
            ActiveSurface::TASOneWayActionSeq,
            TAO::Any_Insert_Policy_Stream <ActiveSurface::TASOneWayActionSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:826

#if !defined (_ACTIVESURFACE_TASPROFILE__ARG_TRAITS_)
#define _ACTIVESURFACE_TASPROFILE__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ActiveSurface::TASProfile>
    : public
        Basic_Arg_Traits_T<
            ActiveSurface::TASProfile,
            TAO::Any_Insert_Policy_Stream <ActiveSurface::TASProfile>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:620

#if !defined (_ACTIVESURFACE_TASPROFILESEQ__ARG_TRAITS_)
#define _ACTIVESURFACE_TASPROFILESEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<ActiveSurface::TASProfileSeq>
    : public
        Var_Size_Arg_Traits_T<
            ActiveSurface::TASProfileSeq,
            TAO::Any_Insert_Policy_Stream <ActiveSurface::TASProfileSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACTIVESURFACE_ROTASPROFILE__ARG_TRAITS_)
#define _ACTIVESURFACE_ROTASPROFILE__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ActiveSurface::ROTASProfile>
    : public
        Object_Arg_Traits_T<
            ActiveSurface::ROTASProfile_ptr,
            ActiveSurface::ROTASProfile_var,
            ActiveSurface::ROTASProfile_out,
            TAO::Objref_Traits<ActiveSurface::ROTASProfile>,
            TAO::Any_Insert_Policy_Stream <ActiveSurface::ROTASProfile_ptr>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_ActiveSurface_TASOneWayAction[] =
  {
    "AS_STOP",
    "AS_SETUP",
    "AS_STOW",
    "AS_REFPOS",
    "AS_UP",
    "AS_DOWN",
    "AS_BOTTOM",
    "AS_TOP",
    "AS_UPDATE",
    "AS_CORRECTION",
    "AS_MOVE",
    "AS_PROFILE"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASOneWayAction (
    "IDL:alma/ActiveSurface/TASOneWayAction:1.0",
    "TASOneWayAction",
    _tao_enumerators_ActiveSurface_TASOneWayAction,
    12);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASOneWayAction =
    &_tao_tc_ActiveSurface_TASOneWayAction;
}



// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_ACTIVESURFACE_TASONEWAYACTIONSEQ_CS_)
#define _ACTIVESURFACE_TASONEWAYACTIONSEQ_CS_

ActiveSurface::TASOneWayActionSeq::TASOneWayActionSeq (void)
{}

ActiveSurface::TASOneWayActionSeq::TASOneWayActionSeq (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        TASOneWayAction
      >
    (max)
{}

ActiveSurface::TASOneWayActionSeq::TASOneWayActionSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ActiveSurface::TASOneWayAction * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        TASOneWayAction
      >
    (max, length, buffer, release)
{}

ActiveSurface::TASOneWayActionSeq::TASOneWayActionSeq (
    const TASOneWayActionSeq &seq
  )
  : TAO::unbounded_value_sequence<
        TASOneWayAction
      >
    (seq)
{}

ActiveSurface::TASOneWayActionSeq::~TASOneWayActionSeq (void)
{}

void ActiveSurface::TASOneWayActionSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  TASOneWayActionSeq * _tao_tmp_pointer =
    static_cast<TASOneWayActionSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:516


#ifndef _TAO_TYPECODE_ActiveSurface_TASOneWayActionSeq_GUARD
#define _TAO_TYPECODE_ActiveSurface_TASOneWayActionSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ActiveSurface_TASOneWayActionSeq_0 (
          ::CORBA::tk_sequence,
          &ActiveSurface::_tc_TASOneWayAction,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_ActiveSurface_TASOneWayActionSeq_0 =
        &ActiveSurface_TASOneWayActionSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ActiveSurface_TASOneWayActionSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASOneWayActionSeq (
    ::CORBA::tk_alias,
    "IDL:alma/ActiveSurface/TASOneWayActionSeq:1.0",
    "TASOneWayActionSeq",
    &TAO::TypeCode::tc_ActiveSurface_TASOneWayActionSeq_0);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASOneWayActionSeq =
    &_tao_tc_ActiveSurface_TASOneWayActionSeq;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::CBTASOneWayAction.

ActiveSurface::CBTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::CBTASOneWayAction>::duplicate (
    ActiveSurface::CBTASOneWayAction_ptr p)
{
  return ActiveSurface::CBTASOneWayAction::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::CBTASOneWayAction>::release (
    ActiveSurface::CBTASOneWayAction_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::CBTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::CBTASOneWayAction>::nil (void)
{
  return ActiveSurface::CBTASOneWayAction::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::CBTASOneWayAction>::marshal (
    const ActiveSurface::CBTASOneWayAction_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_CBTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::CBTASOneWayAction::working (
    ::ActiveSurface::TASOneWayAction value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CBTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_CBTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "working",
      7,
      this->the_TAO_CBTASOneWayAction_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::CBTASOneWayAction::done (
    ::ActiveSurface::TASOneWayAction value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CBTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_CBTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "done",
      4,
      this->the_TAO_CBTASOneWayAction_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

ActiveSurface::CBTASOneWayAction::CBTASOneWayAction (void)
 : the_TAO_CBTASOneWayAction_Proxy_Broker_ (0)
{
  this->ActiveSurface_CBTASOneWayAction_setup_collocation ();
}

void
ActiveSurface::CBTASOneWayAction::ActiveSurface_CBTASOneWayAction_setup_collocation ()
{
  if (::ActiveSurface__TAO_CBTASOneWayAction_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CBTASOneWayAction_Proxy_Broker_ =
        ::ActiveSurface__TAO_CBTASOneWayAction_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ACS_Callback_setup_collocation ();
}

ActiveSurface::CBTASOneWayAction::~CBTASOneWayAction (void)
{}

void 
ActiveSurface::CBTASOneWayAction::_tao_any_destructor (void *_tao_void_pointer)
{
  CBTASOneWayAction *_tao_tmp_pointer =
    static_cast<CBTASOneWayAction *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::CBTASOneWayAction_ptr
ActiveSurface::CBTASOneWayAction::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CBTASOneWayAction>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/CBTASOneWayAction:1.0",
        ActiveSurface__TAO_CBTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::CBTASOneWayAction_ptr
ActiveSurface::CBTASOneWayAction::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CBTASOneWayAction>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/CBTASOneWayAction:1.0",
        ActiveSurface__TAO_CBTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::CBTASOneWayAction_ptr
ActiveSurface::CBTASOneWayAction::_duplicate (CBTASOneWayAction_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::CBTASOneWayAction::_tao_release (CBTASOneWayAction_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::CBTASOneWayAction::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Callback:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/CBTASOneWayAction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::CBTASOneWayAction::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/CBTASOneWayAction:1.0";
}

::CORBA::Boolean
ActiveSurface::CBTASOneWayAction::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_CBTASOneWayAction (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/CBTASOneWayAction:1.0",
    "CBTASOneWayAction");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_CBTASOneWayAction =
    &_tao_tc_ActiveSurface_CBTASOneWayAction;
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASOneWayActionCB (
    ::CORBA::tk_alias,
    "IDL:alma/ActiveSurface/TASOneWayActionCB:1.0",
    "TASOneWayActionCB",
    &ActiveSurface::_tc_CBTASOneWayAction);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASOneWayActionCB =
    &_tao_tc_ActiveSurface_TASOneWayActionCB;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::AlarmTASOneWayAction.

ActiveSurface::AlarmTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::AlarmTASOneWayAction>::duplicate (
    ActiveSurface::AlarmTASOneWayAction_ptr p)
{
  return ActiveSurface::AlarmTASOneWayAction::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::AlarmTASOneWayAction>::release (
    ActiveSurface::AlarmTASOneWayAction_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::AlarmTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::AlarmTASOneWayAction>::nil (void)
{
  return ActiveSurface::AlarmTASOneWayAction::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::AlarmTASOneWayAction>::marshal (
    const ActiveSurface::AlarmTASOneWayAction_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_AlarmTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::AlarmTASOneWayAction::alarm_raised (
    ::ActiveSurface::TASOneWayAction value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AlarmTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_AlarmTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "alarm_raised",
      12,
      this->the_TAO_AlarmTASOneWayAction_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::AlarmTASOneWayAction::alarm_cleared (
    ::ActiveSurface::TASOneWayAction value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AlarmTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_AlarmTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "alarm_cleared",
      13,
      this->the_TAO_AlarmTASOneWayAction_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

ActiveSurface::AlarmTASOneWayAction::AlarmTASOneWayAction (void)
 : the_TAO_AlarmTASOneWayAction_Proxy_Broker_ (0)
{
  this->ActiveSurface_AlarmTASOneWayAction_setup_collocation ();
}

void
ActiveSurface::AlarmTASOneWayAction::ActiveSurface_AlarmTASOneWayAction_setup_collocation ()
{
  if (::ActiveSurface__TAO_AlarmTASOneWayAction_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_AlarmTASOneWayAction_Proxy_Broker_ =
        ::ActiveSurface__TAO_AlarmTASOneWayAction_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ACS_Callback_setup_collocation ();
}

ActiveSurface::AlarmTASOneWayAction::~AlarmTASOneWayAction (void)
{}

void 
ActiveSurface::AlarmTASOneWayAction::_tao_any_destructor (void *_tao_void_pointer)
{
  AlarmTASOneWayAction *_tao_tmp_pointer =
    static_cast<AlarmTASOneWayAction *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::AlarmTASOneWayAction_ptr
ActiveSurface::AlarmTASOneWayAction::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<AlarmTASOneWayAction>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0",
        ActiveSurface__TAO_AlarmTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::AlarmTASOneWayAction_ptr
ActiveSurface::AlarmTASOneWayAction::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<AlarmTASOneWayAction>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0",
        ActiveSurface__TAO_AlarmTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::AlarmTASOneWayAction_ptr
ActiveSurface::AlarmTASOneWayAction::_duplicate (AlarmTASOneWayAction_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::AlarmTASOneWayAction::_tao_release (AlarmTASOneWayAction_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::AlarmTASOneWayAction::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Callback:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::AlarmTASOneWayAction::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0";
}

::CORBA::Boolean
ActiveSurface::AlarmTASOneWayAction::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_AlarmTASOneWayAction (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/AlarmTASOneWayAction:1.0",
    "AlarmTASOneWayAction");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_AlarmTASOneWayAction =
    &_tao_tc_ActiveSurface_AlarmTASOneWayAction;
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASOneWayActionAlarm (
    ::CORBA::tk_alias,
    "IDL:alma/ActiveSurface/TASOneWayActionAlarm:1.0",
    "TASOneWayActionAlarm",
    &ActiveSurface::_tc_AlarmTASOneWayAction);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASOneWayActionAlarm =
    &_tao_tc_ActiveSurface_TASOneWayActionAlarm;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::PTASOneWayAction.

ActiveSurface::PTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::PTASOneWayAction>::duplicate (
    ActiveSurface::PTASOneWayAction_ptr p)
{
  return ActiveSurface::PTASOneWayAction::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::PTASOneWayAction>::release (
    ActiveSurface::PTASOneWayAction_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::PTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::PTASOneWayAction>::nil (void)
{
  return ActiveSurface::PTASOneWayAction::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::PTASOneWayAction>::marshal (
    const ActiveSurface::PTASOneWayAction_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_PTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASOneWayAction ActiveSurface::PTASOneWayAction::get_sync (
    ::ACSErr::Completion_out c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACSErr::Completion>::out_arg_val _tao_c (c);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_c
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_sync",
      8,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::PTASOneWayAction::get_async (
    ::ACS::CBpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::CBpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_async",
      9,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Long ActiveSurface::PTASOneWayAction::get_history (
    ::CORBA::Long n_last_values,
    ::ActiveSurface::TASOneWayActionSeq_out vs,
    ::ACS::TimeSeq_out ts)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_n_last_values (n_last_values);
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayActionSeq>::out_arg_val _tao_vs (vs);
  TAO::Arg_Traits< ::ACS::TimeSeq>::out_arg_val _tao_ts (ts);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n_last_values,
      &_tao_vs,
      &_tao_ts
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "get_history",
      11,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::Monitorpattern_ptr ActiveSurface::PTASOneWayAction::create_monitor (
    ::ACS::CBpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::Monitorpattern>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::CBpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "create_monitor",
      14,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::Monitor_ptr ActiveSurface::PTASOneWayAction::create_postponed_monitor (
    ::ACS::Time start_time,
    ::ACS::CBpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::Monitor>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::Time>::in_arg_val _tao_start_time (start_time);
  TAO::Arg_Traits< ::ACS::CBpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_start_time,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_postponed_monitor",
      24,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::TimeInterval ActiveSurface::PTASOneWayAction::default_timer_trigger (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::TimeInterval>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_default_timer_trigger",
      26,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::TimeInterval ActiveSurface::PTASOneWayAction::min_timer_trigger (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::TimeInterval>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_min_timer_trigger",
      22,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASOneWayAction ActiveSurface::PTASOneWayAction::default_value (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_default_value",
      18,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::stringSeq * ActiveSurface::PTASOneWayAction::statesDescription (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::stringSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_statesDescription",
      22,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::ConditionSeq * ActiveSurface::PTASOneWayAction::condition (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::ConditionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_condition",
      14,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASOneWayActionSeq * ActiveSurface::PTASOneWayAction::allStates (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayActionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_allStates",
      14,
      this->the_TAO_PTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

ActiveSurface::PTASOneWayAction::PTASOneWayAction (void)
 : the_TAO_PTASOneWayAction_Proxy_Broker_ (0)
{
  this->ActiveSurface_PTASOneWayAction_setup_collocation ();
}

void
ActiveSurface::PTASOneWayAction::ActiveSurface_PTASOneWayAction_setup_collocation ()
{
  if (::ActiveSurface__TAO_PTASOneWayAction_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PTASOneWayAction_Proxy_Broker_ =
        ::ActiveSurface__TAO_PTASOneWayAction_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ACS_TypelessProperty_setup_collocation ();
}

ActiveSurface::PTASOneWayAction::~PTASOneWayAction (void)
{}

void 
ActiveSurface::PTASOneWayAction::_tao_any_destructor (void *_tao_void_pointer)
{
  PTASOneWayAction *_tao_tmp_pointer =
    static_cast<PTASOneWayAction *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::PTASOneWayAction_ptr
ActiveSurface::PTASOneWayAction::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<PTASOneWayAction>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/PTASOneWayAction:1.0",
        ActiveSurface__TAO_PTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::PTASOneWayAction_ptr
ActiveSurface::PTASOneWayAction::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<PTASOneWayAction>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/PTASOneWayAction:1.0",
        ActiveSurface__TAO_PTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::PTASOneWayAction_ptr
ActiveSurface::PTASOneWayAction::_duplicate (PTASOneWayAction_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::PTASOneWayAction::_tao_release (PTASOneWayAction_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::PTASOneWayAction::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Property:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/TypelessProperty:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/PTASOneWayAction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::PTASOneWayAction::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/PTASOneWayAction:1.0";
}

::CORBA::Boolean
ActiveSurface::PTASOneWayAction::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_PTASOneWayAction (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/PTASOneWayAction:1.0",
    "PTASOneWayAction");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_PTASOneWayAction =
    &_tao_tc_ActiveSurface_PTASOneWayAction;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::ROTASOneWayAction.

ActiveSurface::ROTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::ROTASOneWayAction>::duplicate (
    ActiveSurface::ROTASOneWayAction_ptr p)
{
  return ActiveSurface::ROTASOneWayAction::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::ROTASOneWayAction>::release (
    ActiveSurface::ROTASOneWayAction_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::ROTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::ROTASOneWayAction>::nil (void)
{
  return ActiveSurface::ROTASOneWayAction::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::ROTASOneWayAction>::marshal (
    const ActiveSurface::ROTASOneWayAction_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_ROTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::Subscription_ptr ActiveSurface::ROTASOneWayAction::new_subscription_AlarmEnum (
    ::ACS::Alarmpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ROTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_ROTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::Subscription>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::Alarmpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "new_subscription_AlarmEnum",
      26,
      this->the_TAO_ROTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASOneWayActionSeq * ActiveSurface::ROTASOneWayAction::alarm_on (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ROTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_ROTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayActionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_alarm_on",
      13,
      this->the_TAO_ROTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASOneWayActionSeq * ActiveSurface::ROTASOneWayAction::alarm_off (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ROTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_ROTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayActionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_alarm_off",
      14,
      this->the_TAO_ROTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

ActiveSurface::ROTASOneWayAction::ROTASOneWayAction (void)
 : the_TAO_ROTASOneWayAction_Proxy_Broker_ (0)
{
  this->ActiveSurface_ROTASOneWayAction_setup_collocation ();
}

void
ActiveSurface::ROTASOneWayAction::ActiveSurface_ROTASOneWayAction_setup_collocation ()
{
  if (::ActiveSurface__TAO_ROTASOneWayAction_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ROTASOneWayAction_Proxy_Broker_ =
        ::ActiveSurface__TAO_ROTASOneWayAction_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ActiveSurface_PTASOneWayAction_setup_collocation ();
}

ActiveSurface::ROTASOneWayAction::~ROTASOneWayAction (void)
{}

void 
ActiveSurface::ROTASOneWayAction::_tao_any_destructor (void *_tao_void_pointer)
{
  ROTASOneWayAction *_tao_tmp_pointer =
    static_cast<ROTASOneWayAction *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::ROTASOneWayAction_ptr
ActiveSurface::ROTASOneWayAction::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<ROTASOneWayAction>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/ROTASOneWayAction:1.0",
        ActiveSurface__TAO_ROTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::ROTASOneWayAction_ptr
ActiveSurface::ROTASOneWayAction::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<ROTASOneWayAction>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/ROTASOneWayAction:1.0",
        ActiveSurface__TAO_ROTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::ROTASOneWayAction_ptr
ActiveSurface::ROTASOneWayAction::_duplicate (ROTASOneWayAction_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::ROTASOneWayAction::_tao_release (ROTASOneWayAction_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::ROTASOneWayAction::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Property:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/TypelessProperty:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/PTASOneWayAction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/ROTASOneWayAction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::ROTASOneWayAction::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/ROTASOneWayAction:1.0";
}

::CORBA::Boolean
ActiveSurface::ROTASOneWayAction::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_ROTASOneWayAction (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/ROTASOneWayAction:1.0",
    "ROTASOneWayAction");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_ROTASOneWayAction =
    &_tao_tc_ActiveSurface_ROTASOneWayAction;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::RWTASOneWayAction.

ActiveSurface::RWTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::RWTASOneWayAction>::duplicate (
    ActiveSurface::RWTASOneWayAction_ptr p)
{
  return ActiveSurface::RWTASOneWayAction::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::RWTASOneWayAction>::release (
    ActiveSurface::RWTASOneWayAction_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::RWTASOneWayAction_ptr
TAO::Objref_Traits<ActiveSurface::RWTASOneWayAction>::nil (void)
{
  return ActiveSurface::RWTASOneWayAction::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::RWTASOneWayAction>::marshal (
    const ActiveSurface::RWTASOneWayAction_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_RWTASOneWayAction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACSErr::Completion * ActiveSurface::RWTASOneWayAction::set_sync (
    ::ActiveSurface::TASOneWayAction value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_RWTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_RWTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACSErr::Completion>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::in_arg_val _tao_value (value);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_sync",
      8,
      this->the_TAO_RWTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::RWTASOneWayAction::set_async (
    ::ActiveSurface::TASOneWayAction value,
    ::ACS::CBvoid_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_RWTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_RWTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACS::CBvoid>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "set_async",
      9,
      this->the_TAO_RWTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::RWTASOneWayAction::set_nonblocking (
    ::ActiveSurface::TASOneWayAction value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_RWTASOneWayAction_Proxy_Broker_ == 0)
    {
      ActiveSurface_RWTASOneWayAction_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASOneWayAction>::in_arg_val _tao_value (value);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_nonblocking",
      15,
      this->the_TAO_RWTASOneWayAction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

ActiveSurface::RWTASOneWayAction::RWTASOneWayAction (void)
 : the_TAO_RWTASOneWayAction_Proxy_Broker_ (0)
{
  this->ActiveSurface_RWTASOneWayAction_setup_collocation ();
}

void
ActiveSurface::RWTASOneWayAction::ActiveSurface_RWTASOneWayAction_setup_collocation ()
{
  if (::ActiveSurface__TAO_RWTASOneWayAction_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_RWTASOneWayAction_Proxy_Broker_ =
        ::ActiveSurface__TAO_RWTASOneWayAction_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ActiveSurface_PTASOneWayAction_setup_collocation ();
}

ActiveSurface::RWTASOneWayAction::~RWTASOneWayAction (void)
{}

void 
ActiveSurface::RWTASOneWayAction::_tao_any_destructor (void *_tao_void_pointer)
{
  RWTASOneWayAction *_tao_tmp_pointer =
    static_cast<RWTASOneWayAction *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::RWTASOneWayAction_ptr
ActiveSurface::RWTASOneWayAction::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<RWTASOneWayAction>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/RWTASOneWayAction:1.0",
        ActiveSurface__TAO_RWTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::RWTASOneWayAction_ptr
ActiveSurface::RWTASOneWayAction::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<RWTASOneWayAction>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/RWTASOneWayAction:1.0",
        ActiveSurface__TAO_RWTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::RWTASOneWayAction_ptr
ActiveSurface::RWTASOneWayAction::_duplicate (RWTASOneWayAction_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::RWTASOneWayAction::_tao_release (RWTASOneWayAction_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::RWTASOneWayAction::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Property:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/TypelessProperty:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/PTASOneWayAction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/RWTASOneWayAction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::RWTASOneWayAction::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/RWTASOneWayAction:1.0";
}

::CORBA::Boolean
ActiveSurface::RWTASOneWayAction::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_RWTASOneWayAction (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/RWTASOneWayAction:1.0",
    "RWTASOneWayAction");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_RWTASOneWayAction =
    &_tao_tc_ActiveSurface_RWTASOneWayAction;
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_ActiveSurface_TASProfile[] =
  {
    "AS_SHAPED",
    "AS_SHAPED_FIXED",
    "AS_PARABOLIC",
    "AS_PARABOLIC_FIXED"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASProfile (
    "IDL:alma/ActiveSurface/TASProfile:1.0",
    "TASProfile",
    _tao_enumerators_ActiveSurface_TASProfile,
    4);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASProfile =
    &_tao_tc_ActiveSurface_TASProfile;
}



// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_ACTIVESURFACE_TASPROFILESEQ_CS_)
#define _ACTIVESURFACE_TASPROFILESEQ_CS_

ActiveSurface::TASProfileSeq::TASProfileSeq (void)
{}

ActiveSurface::TASProfileSeq::TASProfileSeq (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        TASProfile
      >
    (max)
{}

ActiveSurface::TASProfileSeq::TASProfileSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ActiveSurface::TASProfile * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        TASProfile
      >
    (max, length, buffer, release)
{}

ActiveSurface::TASProfileSeq::TASProfileSeq (
    const TASProfileSeq &seq
  )
  : TAO::unbounded_value_sequence<
        TASProfile
      >
    (seq)
{}

ActiveSurface::TASProfileSeq::~TASProfileSeq (void)
{}

void ActiveSurface::TASProfileSeq::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  TASProfileSeq * _tao_tmp_pointer =
    static_cast<TASProfileSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:516


#ifndef _TAO_TYPECODE_ActiveSurface_TASProfileSeq_GUARD
#define _TAO_TYPECODE_ActiveSurface_TASProfileSeq_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ActiveSurface_TASProfileSeq_0 (
          ::CORBA::tk_sequence,
          &ActiveSurface::_tc_TASProfile,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_ActiveSurface_TASProfileSeq_0 =
        &ActiveSurface_TASProfileSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ActiveSurface_TASProfileSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASProfileSeq (
    ::CORBA::tk_alias,
    "IDL:alma/ActiveSurface/TASProfileSeq:1.0",
    "TASProfileSeq",
    &TAO::TypeCode::tc_ActiveSurface_TASProfileSeq_0);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASProfileSeq =
    &_tao_tc_ActiveSurface_TASProfileSeq;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::CBTASProfile.

ActiveSurface::CBTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::CBTASProfile>::duplicate (
    ActiveSurface::CBTASProfile_ptr p)
{
  return ActiveSurface::CBTASProfile::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::CBTASProfile>::release (
    ActiveSurface::CBTASProfile_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::CBTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::CBTASProfile>::nil (void)
{
  return ActiveSurface::CBTASProfile::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::CBTASProfile>::marshal (
    const ActiveSurface::CBTASProfile_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_CBTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::CBTASProfile::working (
    ::ActiveSurface::TASProfile value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CBTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_CBTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "working",
      7,
      this->the_TAO_CBTASProfile_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::CBTASProfile::done (
    ::ActiveSurface::TASProfile value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CBTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_CBTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "done",
      4,
      this->the_TAO_CBTASProfile_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

ActiveSurface::CBTASProfile::CBTASProfile (void)
 : the_TAO_CBTASProfile_Proxy_Broker_ (0)
{
  this->ActiveSurface_CBTASProfile_setup_collocation ();
}

void
ActiveSurface::CBTASProfile::ActiveSurface_CBTASProfile_setup_collocation ()
{
  if (::ActiveSurface__TAO_CBTASProfile_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CBTASProfile_Proxy_Broker_ =
        ::ActiveSurface__TAO_CBTASProfile_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ACS_Callback_setup_collocation ();
}

ActiveSurface::CBTASProfile::~CBTASProfile (void)
{}

void 
ActiveSurface::CBTASProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  CBTASProfile *_tao_tmp_pointer =
    static_cast<CBTASProfile *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::CBTASProfile_ptr
ActiveSurface::CBTASProfile::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CBTASProfile>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/CBTASProfile:1.0",
        ActiveSurface__TAO_CBTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::CBTASProfile_ptr
ActiveSurface::CBTASProfile::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CBTASProfile>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/CBTASProfile:1.0",
        ActiveSurface__TAO_CBTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::CBTASProfile_ptr
ActiveSurface::CBTASProfile::_duplicate (CBTASProfile_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::CBTASProfile::_tao_release (CBTASProfile_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::CBTASProfile::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Callback:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/CBTASProfile:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::CBTASProfile::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/CBTASProfile:1.0";
}

::CORBA::Boolean
ActiveSurface::CBTASProfile::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_CBTASProfile (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/CBTASProfile:1.0",
    "CBTASProfile");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_CBTASProfile =
    &_tao_tc_ActiveSurface_CBTASProfile;
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASProfileCB (
    ::CORBA::tk_alias,
    "IDL:alma/ActiveSurface/TASProfileCB:1.0",
    "TASProfileCB",
    &ActiveSurface::_tc_CBTASProfile);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASProfileCB =
    &_tao_tc_ActiveSurface_TASProfileCB;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::AlarmTASProfile.

ActiveSurface::AlarmTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::AlarmTASProfile>::duplicate (
    ActiveSurface::AlarmTASProfile_ptr p)
{
  return ActiveSurface::AlarmTASProfile::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::AlarmTASProfile>::release (
    ActiveSurface::AlarmTASProfile_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::AlarmTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::AlarmTASProfile>::nil (void)
{
  return ActiveSurface::AlarmTASProfile::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::AlarmTASProfile>::marshal (
    const ActiveSurface::AlarmTASProfile_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_AlarmTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::AlarmTASProfile::alarm_raised (
    ::ActiveSurface::TASProfile value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AlarmTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_AlarmTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "alarm_raised",
      12,
      this->the_TAO_AlarmTASProfile_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::AlarmTASProfile::alarm_cleared (
    ::ActiveSurface::TASProfile value,
    const ::ACSErr::Completion & c,
    const ::ACS::CBDescOut & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AlarmTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_AlarmTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACSErr::Completion>::in_arg_val _tao_c (c);
  TAO::Arg_Traits< ::ACS::CBDescOut>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_c,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "alarm_cleared",
      13,
      this->the_TAO_AlarmTASProfile_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

ActiveSurface::AlarmTASProfile::AlarmTASProfile (void)
 : the_TAO_AlarmTASProfile_Proxy_Broker_ (0)
{
  this->ActiveSurface_AlarmTASProfile_setup_collocation ();
}

void
ActiveSurface::AlarmTASProfile::ActiveSurface_AlarmTASProfile_setup_collocation ()
{
  if (::ActiveSurface__TAO_AlarmTASProfile_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_AlarmTASProfile_Proxy_Broker_ =
        ::ActiveSurface__TAO_AlarmTASProfile_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ACS_Callback_setup_collocation ();
}

ActiveSurface::AlarmTASProfile::~AlarmTASProfile (void)
{}

void 
ActiveSurface::AlarmTASProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  AlarmTASProfile *_tao_tmp_pointer =
    static_cast<AlarmTASProfile *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::AlarmTASProfile_ptr
ActiveSurface::AlarmTASProfile::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<AlarmTASProfile>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/AlarmTASProfile:1.0",
        ActiveSurface__TAO_AlarmTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::AlarmTASProfile_ptr
ActiveSurface::AlarmTASProfile::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<AlarmTASProfile>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/AlarmTASProfile:1.0",
        ActiveSurface__TAO_AlarmTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::AlarmTASProfile_ptr
ActiveSurface::AlarmTASProfile::_duplicate (AlarmTASProfile_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::AlarmTASProfile::_tao_release (AlarmTASProfile_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::AlarmTASProfile::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Callback:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/AlarmTASProfile:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::AlarmTASProfile::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/AlarmTASProfile:1.0";
}

::CORBA::Boolean
ActiveSurface::AlarmTASProfile::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_AlarmTASProfile (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/AlarmTASProfile:1.0",
    "AlarmTASProfile");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_AlarmTASProfile =
    &_tao_tc_ActiveSurface_AlarmTASProfile;
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_TASProfileAlarm (
    ::CORBA::tk_alias,
    "IDL:alma/ActiveSurface/TASProfileAlarm:1.0",
    "TASProfileAlarm",
    &ActiveSurface::_tc_AlarmTASProfile);
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_TASProfileAlarm =
    &_tao_tc_ActiveSurface_TASProfileAlarm;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::PTASProfile.

ActiveSurface::PTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::PTASProfile>::duplicate (
    ActiveSurface::PTASProfile_ptr p)
{
  return ActiveSurface::PTASProfile::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::PTASProfile>::release (
    ActiveSurface::PTASProfile_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::PTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::PTASProfile>::nil (void)
{
  return ActiveSurface::PTASProfile::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::PTASProfile>::marshal (
    const ActiveSurface::PTASProfile_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_PTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASProfile ActiveSurface::PTASProfile::get_sync (
    ::ACSErr::Completion_out c)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACSErr::Completion>::out_arg_val _tao_c (c);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_c
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_sync",
      8,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::PTASProfile::get_async (
    ::ACS::CBpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::CBpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_async",
      9,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Long ActiveSurface::PTASProfile::get_history (
    ::CORBA::Long n_last_values,
    ::ActiveSurface::TASProfileSeq_out vs,
    ::ACS::TimeSeq_out ts)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_n_last_values (n_last_values);
  TAO::Arg_Traits< ::ActiveSurface::TASProfileSeq>::out_arg_val _tao_vs (vs);
  TAO::Arg_Traits< ::ACS::TimeSeq>::out_arg_val _tao_ts (ts);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n_last_values,
      &_tao_vs,
      &_tao_ts
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "get_history",
      11,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::Monitorpattern_ptr ActiveSurface::PTASProfile::create_monitor (
    ::ACS::CBpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::Monitorpattern>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::CBpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "create_monitor",
      14,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::Monitor_ptr ActiveSurface::PTASProfile::create_postponed_monitor (
    ::ACS::Time start_time,
    ::ACS::CBpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::Monitor>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::Time>::in_arg_val _tao_start_time (start_time);
  TAO::Arg_Traits< ::ACS::CBpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_start_time,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_postponed_monitor",
      24,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::TimeInterval ActiveSurface::PTASProfile::default_timer_trigger (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::TimeInterval>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_default_timer_trigger",
      26,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::TimeInterval ActiveSurface::PTASProfile::min_timer_trigger (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::TimeInterval>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_min_timer_trigger",
      22,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASProfile ActiveSurface::PTASProfile::default_value (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_default_value",
      18,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::stringSeq * ActiveSurface::PTASProfile::statesDescription (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::stringSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_statesDescription",
      22,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::ConditionSeq * ActiveSurface::PTASProfile::condition (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::ConditionSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_condition",
      14,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASProfileSeq * ActiveSurface::PTASProfile::allStates (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_PTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASProfileSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_allStates",
      14,
      this->the_TAO_PTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

ActiveSurface::PTASProfile::PTASProfile (void)
 : the_TAO_PTASProfile_Proxy_Broker_ (0)
{
  this->ActiveSurface_PTASProfile_setup_collocation ();
}

void
ActiveSurface::PTASProfile::ActiveSurface_PTASProfile_setup_collocation ()
{
  if (::ActiveSurface__TAO_PTASProfile_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PTASProfile_Proxy_Broker_ =
        ::ActiveSurface__TAO_PTASProfile_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ACS_TypelessProperty_setup_collocation ();
}

ActiveSurface::PTASProfile::~PTASProfile (void)
{}

void 
ActiveSurface::PTASProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  PTASProfile *_tao_tmp_pointer =
    static_cast<PTASProfile *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::PTASProfile_ptr
ActiveSurface::PTASProfile::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<PTASProfile>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/PTASProfile:1.0",
        ActiveSurface__TAO_PTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::PTASProfile_ptr
ActiveSurface::PTASProfile::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<PTASProfile>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/PTASProfile:1.0",
        ActiveSurface__TAO_PTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::PTASProfile_ptr
ActiveSurface::PTASProfile::_duplicate (PTASProfile_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::PTASProfile::_tao_release (PTASProfile_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::PTASProfile::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Property:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/TypelessProperty:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/PTASProfile:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::PTASProfile::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/PTASProfile:1.0";
}

::CORBA::Boolean
ActiveSurface::PTASProfile::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_PTASProfile (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/PTASProfile:1.0",
    "PTASProfile");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_PTASProfile =
    &_tao_tc_ActiveSurface_PTASProfile;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::ROTASProfile.

ActiveSurface::ROTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::ROTASProfile>::duplicate (
    ActiveSurface::ROTASProfile_ptr p)
{
  return ActiveSurface::ROTASProfile::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::ROTASProfile>::release (
    ActiveSurface::ROTASProfile_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::ROTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::ROTASProfile>::nil (void)
{
  return ActiveSurface::ROTASProfile::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::ROTASProfile>::marshal (
    const ActiveSurface::ROTASProfile_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_ROTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::Subscription_ptr ActiveSurface::ROTASProfile::new_subscription_AlarmEnum (
    ::ACS::Alarmpattern_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ROTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_ROTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::Subscription>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACS::Alarmpattern>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "new_subscription_AlarmEnum",
      26,
      this->the_TAO_ROTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASProfileSeq * ActiveSurface::ROTASProfile::alarm_on (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ROTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_ROTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASProfileSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_alarm_on",
      13,
      this->the_TAO_ROTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::TASProfileSeq * ActiveSurface::ROTASProfile::alarm_off (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ROTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_ROTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::TASProfileSeq>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_alarm_off",
      14,
      this->the_TAO_ROTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

ActiveSurface::ROTASProfile::ROTASProfile (void)
 : the_TAO_ROTASProfile_Proxy_Broker_ (0)
{
  this->ActiveSurface_ROTASProfile_setup_collocation ();
}

void
ActiveSurface::ROTASProfile::ActiveSurface_ROTASProfile_setup_collocation ()
{
  if (::ActiveSurface__TAO_ROTASProfile_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ROTASProfile_Proxy_Broker_ =
        ::ActiveSurface__TAO_ROTASProfile_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ActiveSurface_PTASProfile_setup_collocation ();
}

ActiveSurface::ROTASProfile::~ROTASProfile (void)
{}

void 
ActiveSurface::ROTASProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  ROTASProfile *_tao_tmp_pointer =
    static_cast<ROTASProfile *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::ROTASProfile_ptr
ActiveSurface::ROTASProfile::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<ROTASProfile>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/ROTASProfile:1.0",
        ActiveSurface__TAO_ROTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::ROTASProfile_ptr
ActiveSurface::ROTASProfile::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<ROTASProfile>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/ROTASProfile:1.0",
        ActiveSurface__TAO_ROTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::ROTASProfile_ptr
ActiveSurface::ROTASProfile::_duplicate (ROTASProfile_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::ROTASProfile::_tao_release (ROTASProfile_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::ROTASProfile::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Property:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/TypelessProperty:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/PTASProfile:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/ROTASProfile:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::ROTASProfile::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/ROTASProfile:1.0";
}

::CORBA::Boolean
ActiveSurface::ROTASProfile::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_ROTASProfile (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/ROTASProfile:1.0",
    "ROTASProfile");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_ROTASProfile =
    &_tao_tc_ActiveSurface_ROTASProfile;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::RWTASProfile.

ActiveSurface::RWTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::RWTASProfile>::duplicate (
    ActiveSurface::RWTASProfile_ptr p)
{
  return ActiveSurface::RWTASProfile::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::RWTASProfile>::release (
    ActiveSurface::RWTASProfile_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::RWTASProfile_ptr
TAO::Objref_Traits<ActiveSurface::RWTASProfile>::nil (void)
{
  return ActiveSurface::RWTASProfile::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::RWTASProfile>::marshal (
    const ActiveSurface::RWTASProfile_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_RWTASProfile_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACSErr::Completion * ActiveSurface::RWTASProfile::set_sync (
    ::ActiveSurface::TASProfile value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_RWTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_RWTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACSErr::Completion>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_value (value);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_sync",
      8,
      this->the_TAO_RWTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::RWTASProfile::set_async (
    ::ActiveSurface::TASProfile value,
    ::ACS::CBvoid_ptr cb,
    const ::ACS::CBDescIn & desc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_RWTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_RWTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_value (value);
  TAO::Arg_Traits< ::ACS::CBvoid>::in_arg_val _tao_cb (cb);
  TAO::Arg_Traits< ::ACS::CBDescIn>::in_arg_val _tao_desc (desc);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value,
      &_tao_cb,
      &_tao_desc
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "set_async",
      9,
      this->the_TAO_RWTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::RWTASProfile::set_nonblocking (
    ::ActiveSurface::TASProfile value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_RWTASProfile_Proxy_Broker_ == 0)
    {
      ActiveSurface_RWTASProfile_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_value (value);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_value
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_nonblocking",
      15,
      this->the_TAO_RWTASProfile_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

ActiveSurface::RWTASProfile::RWTASProfile (void)
 : the_TAO_RWTASProfile_Proxy_Broker_ (0)
{
  this->ActiveSurface_RWTASProfile_setup_collocation ();
}

void
ActiveSurface::RWTASProfile::ActiveSurface_RWTASProfile_setup_collocation ()
{
  if (::ActiveSurface__TAO_RWTASProfile_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_RWTASProfile_Proxy_Broker_ =
        ::ActiveSurface__TAO_RWTASProfile_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ActiveSurface_PTASProfile_setup_collocation ();
}

ActiveSurface::RWTASProfile::~RWTASProfile (void)
{}

void 
ActiveSurface::RWTASProfile::_tao_any_destructor (void *_tao_void_pointer)
{
  RWTASProfile *_tao_tmp_pointer =
    static_cast<RWTASProfile *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::RWTASProfile_ptr
ActiveSurface::RWTASProfile::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<RWTASProfile>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/RWTASProfile:1.0",
        ActiveSurface__TAO_RWTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::RWTASProfile_ptr
ActiveSurface::RWTASProfile::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<RWTASProfile>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/RWTASProfile:1.0",
        ActiveSurface__TAO_RWTASProfile_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::RWTASProfile_ptr
ActiveSurface::RWTASProfile::_duplicate (RWTASProfile_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::RWTASProfile::_tao_release (RWTASProfile_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::RWTASProfile::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/OffShoot:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/Property:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/TypelessProperty:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/PTASProfile:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/RWTASProfile:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::RWTASProfile::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/RWTASProfile:1.0";
}

::CORBA::Boolean
ActiveSurface::RWTASProfile::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_RWTASProfile (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/RWTASProfile:1.0",
    "RWTASProfile");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_RWTASProfile =
    &_tao_tc_ActiveSurface_RWTASProfile;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for ActiveSurface::NotoActiveSurfaceBoss.

ActiveSurface::NotoActiveSurfaceBoss_ptr
TAO::Objref_Traits<ActiveSurface::NotoActiveSurfaceBoss>::duplicate (
    ActiveSurface::NotoActiveSurfaceBoss_ptr p)
{
  return ActiveSurface::NotoActiveSurfaceBoss::_duplicate (p);
}

void
TAO::Objref_Traits<ActiveSurface::NotoActiveSurfaceBoss>::release (
    ActiveSurface::NotoActiveSurfaceBoss_ptr p)
{
  ::CORBA::release (p);
}

ActiveSurface::NotoActiveSurfaceBoss_ptr
TAO::Objref_Traits<ActiveSurface::NotoActiveSurfaceBoss>::nil (void)
{
  return ActiveSurface::NotoActiveSurfaceBoss::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ActiveSurface::NotoActiveSurfaceBoss>::marshal (
    const ActiveSurface::NotoActiveSurfaceBoss_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*ActiveSurface__TAO_NotoActiveSurfaceBoss_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::Management::ROTBoolean_ptr ActiveSurface::NotoActiveSurfaceBoss::enabled (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::Management::ROTBoolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_enabled",
      12,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ActiveSurface::ROTASProfile_ptr ActiveSurface::NotoActiveSurfaceBoss::pprofile (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ActiveSurface::ROTASProfile>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_pprofile",
      13,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::Management::ROTBoolean_ptr ActiveSurface::NotoActiveSurfaceBoss::tracking (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::Management::ROTBoolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_tracking",
      13,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::stop (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_stop_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "stop",
      4,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_stop_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::stow (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_stow_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "stow",
      4,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_stow_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::refPos (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_refPos_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "refPos",
      6,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_refPos_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::update (
    ::CORBA::Double elevation)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Double>::in_arg_val _tao_elevation (elevation);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_elevation
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_update_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "update",
      6,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_update_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::move (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius,
    ::CORBA::Long incr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_incr (incr);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius,
      &_tao_incr
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_move_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "move",
      4,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_move_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::correction (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius,
    ::CORBA::Double correction)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  TAO::Arg_Traits< ::CORBA::Double>::in_arg_val _tao_correction (correction);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius,
      &_tao_correction
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_correction_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "correction",
      10,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_correction_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::setProfile (
    ::ActiveSurface::TASProfile profile)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ActiveSurface::TASProfile>::in_arg_val _tao_profile (profile);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_profile
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_setProfile_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setProfile",
      10,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_setProfile_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::usdStatus4GUIClient (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long_out status)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_status (status);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_status
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_usdStatus4GUIClient_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "usdStatus4GUIClient",
      19,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_usdStatus4GUIClient_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::setActuator (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long_out actPos,
    ::CORBA::Long_out cmdPos,
    ::CORBA::Long_out Fmin,
    ::CORBA::Long_out Fmax,
    ::CORBA::Long_out acc,
    ::CORBA::Long_out delay)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_actPos (actPos);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_cmdPos (cmdPos);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_Fmin (Fmin);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_Fmax (Fmax);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_acc (acc);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_delay (delay);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_actPos,
      &_tao_cmdPos,
      &_tao_Fmin,
      &_tao_Fmax,
      &_tao_acc,
      &_tao_delay
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_setActuator_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      9,
      "setActuator",
      11,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_setActuator_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::up (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_up_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "up",
      2,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_up_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::down (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_down_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "down",
      4,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_down_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::bottom (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_bottom_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "bottom",
      6,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_bottom_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::top (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_top_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "top",
      3,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_top_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::reset (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_reset_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "reset",
      5,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_reset_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::recoverUSD (
    ::CORBA::Long circle,
    ::CORBA::Long actuator)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_recoverUSD_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "recoverUSD",
      10,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_recoverUSD_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::calibrate (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "calibrate",
      9,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void ActiveSurface::NotoActiveSurfaceBoss::calVer (
    ::CORBA::Long circle,
    ::CORBA::Long actuator,
    ::CORBA::Long radius)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ == 0)
    {
      ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_circle (circle);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_actuator (actuator);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_radius (radius);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_circle,
      &_tao_actuator,
      &_tao_radius
    };
  
  static TAO::Exception_Data
  _tao_ActiveSurface_NotoActiveSurfaceBoss_calVer_exceptiondata [] = 
    {
      {
        "IDL:alma/ComponentErrors/ComponentErrorsEx:1.0",
        ComponentErrors::ComponentErrorsEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ComponentErrors::_tc_ComponentErrorsEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "calVer",
      6,
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_ActiveSurface_NotoActiveSurfaceBoss_calVer_exceptiondata,
      1
    );
}

ActiveSurface::NotoActiveSurfaceBoss::NotoActiveSurfaceBoss (void)
 : the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ (0)
{
  this->ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ();
}

void
ActiveSurface::NotoActiveSurfaceBoss::ActiveSurface_NotoActiveSurfaceBoss_setup_collocation ()
{
  if (::ActiveSurface__TAO_NotoActiveSurfaceBoss_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_NotoActiveSurfaceBoss_Proxy_Broker_ =
        ::ActiveSurface__TAO_NotoActiveSurfaceBoss_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ActiveSurface_ActiveSurfaceBoss_setup_collocation ();
}

ActiveSurface::NotoActiveSurfaceBoss::~NotoActiveSurfaceBoss (void)
{}

void 
ActiveSurface::NotoActiveSurfaceBoss::_tao_any_destructor (void *_tao_void_pointer)
{
  NotoActiveSurfaceBoss *_tao_tmp_pointer =
    static_cast<NotoActiveSurfaceBoss *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ActiveSurface::NotoActiveSurfaceBoss_ptr
ActiveSurface::NotoActiveSurfaceBoss::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<NotoActiveSurfaceBoss>::narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/NotoActiveSurfaceBoss:1.0",
        ActiveSurface__TAO_NotoActiveSurfaceBoss_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::NotoActiveSurfaceBoss_ptr
ActiveSurface::NotoActiveSurfaceBoss::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<NotoActiveSurfaceBoss>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/ActiveSurface/NotoActiveSurfaceBoss:1.0",
        ActiveSurface__TAO_NotoActiveSurfaceBoss_Proxy_Broker_Factory_function_pointer
      );
}

ActiveSurface::NotoActiveSurfaceBoss_ptr
ActiveSurface::NotoActiveSurfaceBoss::_duplicate (NotoActiveSurfaceBoss_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
ActiveSurface::NotoActiveSurfaceBoss::_tao_release (NotoActiveSurfaceBoss_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ActiveSurface::NotoActiveSurfaceBoss::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/ACSComponent:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicComponent:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Management/CommandInterpreter:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/Management/Subsystem:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/ActiveSurfaceBoss:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ActiveSurface/NotoActiveSurfaceBoss:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ActiveSurface::NotoActiveSurfaceBoss::_interface_repository_id (void) const
{
  return "IDL:alma/ActiveSurface/NotoActiveSurfaceBoss:1.0";
}

::CORBA::Boolean
ActiveSurface::NotoActiveSurfaceBoss::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ActiveSurface_NotoActiveSurfaceBoss (
    ::CORBA::tk_objref,
    "IDL:alma/ActiveSurface/NotoActiveSurfaceBoss:1.0",
    "NotoActiveSurfaceBoss");
  
namespace ActiveSurface
{
  ::CORBA::TypeCode_ptr const _tc_NotoActiveSurfaceBoss =
    &_tao_tc_ActiveSurface_NotoActiveSurfaceBoss;
}



// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::TASOneWayAction _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<ActiveSurface::TASOneWayAction>::insert (
      _tao_any,
      ActiveSurface::_tc_TASOneWayAction,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::TASOneWayAction &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<ActiveSurface::TASOneWayAction>::extract (
        _tao_any,
        ActiveSurface::_tc_TASOneWayAction,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const ActiveSurface::TASOneWayActionSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<ActiveSurface::TASOneWayActionSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<ActiveSurface::TASOneWayActionSeq>::insert_copy (
        _tao_any,
        ActiveSurface::TASOneWayActionSeq::_tao_any_destructor,
        ActiveSurface::_tc_TASOneWayActionSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::TASOneWayActionSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<ActiveSurface::TASOneWayActionSeq>::insert (
      _tao_any,
      ActiveSurface::TASOneWayActionSeq::_tao_any_destructor,
      ActiveSurface::_tc_TASOneWayActionSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::TASOneWayActionSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ActiveSurface::TASOneWayActionSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ActiveSurface::TASOneWayActionSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<ActiveSurface::TASOneWayActionSeq>::extract (
        _tao_any,
        ActiveSurface::TASOneWayActionSeq::_tao_any_destructor,
        ActiveSurface::_tc_TASOneWayActionSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::CBTASOneWayAction>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CBTASOneWayAction_ptr _tao_elem)
  {
    CBTASOneWayAction_ptr _tao_objptr =
      CBTASOneWayAction::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CBTASOneWayAction_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CBTASOneWayAction>::insert (
        _tao_any,
        CBTASOneWayAction::_tao_any_destructor,
        _tc_CBTASOneWayAction,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CBTASOneWayAction_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CBTASOneWayAction>::extract (
          _tao_any,
          CBTASOneWayAction::_tao_any_destructor,
          _tc_CBTASOneWayAction,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::CBTASOneWayAction_ptr _tao_elem)
{
  ActiveSurface::CBTASOneWayAction_ptr _tao_objptr =
    ActiveSurface::CBTASOneWayAction::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::CBTASOneWayAction_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::CBTASOneWayAction>::insert (
      _tao_any,
      ActiveSurface::CBTASOneWayAction::_tao_any_destructor,
      ActiveSurface::_tc_CBTASOneWayAction,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::CBTASOneWayAction_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::CBTASOneWayAction>::extract (
        _tao_any,
        ActiveSurface::CBTASOneWayAction::_tao_any_destructor,
        ActiveSurface::_tc_CBTASOneWayAction,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::AlarmTASOneWayAction>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AlarmTASOneWayAction_ptr _tao_elem)
  {
    AlarmTASOneWayAction_ptr _tao_objptr =
      AlarmTASOneWayAction::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AlarmTASOneWayAction_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AlarmTASOneWayAction>::insert (
        _tao_any,
        AlarmTASOneWayAction::_tao_any_destructor,
        _tc_AlarmTASOneWayAction,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AlarmTASOneWayAction_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AlarmTASOneWayAction>::extract (
          _tao_any,
          AlarmTASOneWayAction::_tao_any_destructor,
          _tc_AlarmTASOneWayAction,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::AlarmTASOneWayAction_ptr _tao_elem)
{
  ActiveSurface::AlarmTASOneWayAction_ptr _tao_objptr =
    ActiveSurface::AlarmTASOneWayAction::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::AlarmTASOneWayAction_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::AlarmTASOneWayAction>::insert (
      _tao_any,
      ActiveSurface::AlarmTASOneWayAction::_tao_any_destructor,
      ActiveSurface::_tc_AlarmTASOneWayAction,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::AlarmTASOneWayAction_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::AlarmTASOneWayAction>::extract (
        _tao_any,
        ActiveSurface::AlarmTASOneWayAction::_tao_any_destructor,
        ActiveSurface::_tc_AlarmTASOneWayAction,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::PTASOneWayAction>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PTASOneWayAction_ptr _tao_elem)
  {
    PTASOneWayAction_ptr _tao_objptr =
      PTASOneWayAction::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PTASOneWayAction_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PTASOneWayAction>::insert (
        _tao_any,
        PTASOneWayAction::_tao_any_destructor,
        _tc_PTASOneWayAction,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PTASOneWayAction_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PTASOneWayAction>::extract (
          _tao_any,
          PTASOneWayAction::_tao_any_destructor,
          _tc_PTASOneWayAction,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::PTASOneWayAction_ptr _tao_elem)
{
  ActiveSurface::PTASOneWayAction_ptr _tao_objptr =
    ActiveSurface::PTASOneWayAction::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::PTASOneWayAction_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::PTASOneWayAction>::insert (
      _tao_any,
      ActiveSurface::PTASOneWayAction::_tao_any_destructor,
      ActiveSurface::_tc_PTASOneWayAction,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::PTASOneWayAction_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::PTASOneWayAction>::extract (
        _tao_any,
        ActiveSurface::PTASOneWayAction::_tao_any_destructor,
        ActiveSurface::_tc_PTASOneWayAction,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::ROTASOneWayAction>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ROTASOneWayAction_ptr _tao_elem)
  {
    ROTASOneWayAction_ptr _tao_objptr =
      ROTASOneWayAction::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ROTASOneWayAction_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ROTASOneWayAction>::insert (
        _tao_any,
        ROTASOneWayAction::_tao_any_destructor,
        _tc_ROTASOneWayAction,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ROTASOneWayAction_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ROTASOneWayAction>::extract (
          _tao_any,
          ROTASOneWayAction::_tao_any_destructor,
          _tc_ROTASOneWayAction,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::ROTASOneWayAction_ptr _tao_elem)
{
  ActiveSurface::ROTASOneWayAction_ptr _tao_objptr =
    ActiveSurface::ROTASOneWayAction::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::ROTASOneWayAction_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::ROTASOneWayAction>::insert (
      _tao_any,
      ActiveSurface::ROTASOneWayAction::_tao_any_destructor,
      ActiveSurface::_tc_ROTASOneWayAction,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::ROTASOneWayAction_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::ROTASOneWayAction>::extract (
        _tao_any,
        ActiveSurface::ROTASOneWayAction::_tao_any_destructor,
        ActiveSurface::_tc_ROTASOneWayAction,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::RWTASOneWayAction>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RWTASOneWayAction_ptr _tao_elem)
  {
    RWTASOneWayAction_ptr _tao_objptr =
      RWTASOneWayAction::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RWTASOneWayAction_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<RWTASOneWayAction>::insert (
        _tao_any,
        RWTASOneWayAction::_tao_any_destructor,
        _tc_RWTASOneWayAction,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      RWTASOneWayAction_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<RWTASOneWayAction>::extract (
          _tao_any,
          RWTASOneWayAction::_tao_any_destructor,
          _tc_RWTASOneWayAction,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::RWTASOneWayAction_ptr _tao_elem)
{
  ActiveSurface::RWTASOneWayAction_ptr _tao_objptr =
    ActiveSurface::RWTASOneWayAction::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::RWTASOneWayAction_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::RWTASOneWayAction>::insert (
      _tao_any,
      ActiveSurface::RWTASOneWayAction::_tao_any_destructor,
      ActiveSurface::_tc_RWTASOneWayAction,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::RWTASOneWayAction_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::RWTASOneWayAction>::extract (
        _tao_any,
        ActiveSurface::RWTASOneWayAction::_tao_any_destructor,
        ActiveSurface::_tc_RWTASOneWayAction,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/any_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::TASProfile _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<ActiveSurface::TASProfile>::insert (
      _tao_any,
      ActiveSurface::_tc_TASProfile,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::TASProfile &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<ActiveSurface::TASProfile>::extract (
        _tao_any,
        ActiveSurface::_tc_TASProfile,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const ActiveSurface::TASProfileSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<ActiveSurface::TASProfileSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<ActiveSurface::TASProfileSeq>::insert_copy (
        _tao_any,
        ActiveSurface::TASProfileSeq::_tao_any_destructor,
        ActiveSurface::_tc_TASProfileSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::TASProfileSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<ActiveSurface::TASProfileSeq>::insert (
      _tao_any,
      ActiveSurface::TASProfileSeq::_tao_any_destructor,
      ActiveSurface::_tc_TASProfileSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::TASProfileSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const ActiveSurface::TASProfileSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ActiveSurface::TASProfileSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<ActiveSurface::TASProfileSeq>::extract (
        _tao_any,
        ActiveSurface::TASProfileSeq::_tao_any_destructor,
        ActiveSurface::_tc_TASProfileSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::CBTASProfile>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CBTASProfile_ptr _tao_elem)
  {
    CBTASProfile_ptr _tao_objptr =
      CBTASProfile::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CBTASProfile_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CBTASProfile>::insert (
        _tao_any,
        CBTASProfile::_tao_any_destructor,
        _tc_CBTASProfile,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CBTASProfile_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CBTASProfile>::extract (
          _tao_any,
          CBTASProfile::_tao_any_destructor,
          _tc_CBTASProfile,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::CBTASProfile_ptr _tao_elem)
{
  ActiveSurface::CBTASProfile_ptr _tao_objptr =
    ActiveSurface::CBTASProfile::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::CBTASProfile_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::CBTASProfile>::insert (
      _tao_any,
      ActiveSurface::CBTASProfile::_tao_any_destructor,
      ActiveSurface::_tc_CBTASProfile,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::CBTASProfile_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::CBTASProfile>::extract (
        _tao_any,
        ActiveSurface::CBTASProfile::_tao_any_destructor,
        ActiveSurface::_tc_CBTASProfile,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::AlarmTASProfile>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AlarmTASProfile_ptr _tao_elem)
  {
    AlarmTASProfile_ptr _tao_objptr =
      AlarmTASProfile::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AlarmTASProfile_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AlarmTASProfile>::insert (
        _tao_any,
        AlarmTASProfile::_tao_any_destructor,
        _tc_AlarmTASProfile,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AlarmTASProfile_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AlarmTASProfile>::extract (
          _tao_any,
          AlarmTASProfile::_tao_any_destructor,
          _tc_AlarmTASProfile,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::AlarmTASProfile_ptr _tao_elem)
{
  ActiveSurface::AlarmTASProfile_ptr _tao_objptr =
    ActiveSurface::AlarmTASProfile::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::AlarmTASProfile_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::AlarmTASProfile>::insert (
      _tao_any,
      ActiveSurface::AlarmTASProfile::_tao_any_destructor,
      ActiveSurface::_tc_AlarmTASProfile,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::AlarmTASProfile_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::AlarmTASProfile>::extract (
        _tao_any,
        ActiveSurface::AlarmTASProfile::_tao_any_destructor,
        ActiveSurface::_tc_AlarmTASProfile,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::PTASProfile>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PTASProfile_ptr _tao_elem)
  {
    PTASProfile_ptr _tao_objptr =
      PTASProfile::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PTASProfile_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PTASProfile>::insert (
        _tao_any,
        PTASProfile::_tao_any_destructor,
        _tc_PTASProfile,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PTASProfile_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PTASProfile>::extract (
          _tao_any,
          PTASProfile::_tao_any_destructor,
          _tc_PTASProfile,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::PTASProfile_ptr _tao_elem)
{
  ActiveSurface::PTASProfile_ptr _tao_objptr =
    ActiveSurface::PTASProfile::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::PTASProfile_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::PTASProfile>::insert (
      _tao_any,
      ActiveSurface::PTASProfile::_tao_any_destructor,
      ActiveSurface::_tc_PTASProfile,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::PTASProfile_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::PTASProfile>::extract (
        _tao_any,
        ActiveSurface::PTASProfile::_tao_any_destructor,
        ActiveSurface::_tc_PTASProfile,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::ROTASProfile>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ROTASProfile_ptr _tao_elem)
  {
    ROTASProfile_ptr _tao_objptr =
      ROTASProfile::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ROTASProfile_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ROTASProfile>::insert (
        _tao_any,
        ROTASProfile::_tao_any_destructor,
        _tc_ROTASProfile,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ROTASProfile_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ROTASProfile>::extract (
          _tao_any,
          ROTASProfile::_tao_any_destructor,
          _tc_ROTASProfile,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::ROTASProfile_ptr _tao_elem)
{
  ActiveSurface::ROTASProfile_ptr _tao_objptr =
    ActiveSurface::ROTASProfile::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::ROTASProfile_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::ROTASProfile>::insert (
      _tao_any,
      ActiveSurface::ROTASProfile::_tao_any_destructor,
      ActiveSurface::_tc_ROTASProfile,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::ROTASProfile_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::ROTASProfile>::extract (
        _tao_any,
        ActiveSurface::ROTASProfile::_tao_any_destructor,
        ActiveSurface::_tc_ROTASProfile,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::RWTASProfile>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RWTASProfile_ptr _tao_elem)
  {
    RWTASProfile_ptr _tao_objptr =
      RWTASProfile::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RWTASProfile_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<RWTASProfile>::insert (
        _tao_any,
        RWTASProfile::_tao_any_destructor,
        _tc_RWTASProfile,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      RWTASProfile_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<RWTASProfile>::extract (
          _tao_any,
          RWTASProfile::_tao_any_destructor,
          _tc_RWTASProfile,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::RWTASProfile_ptr _tao_elem)
{
  ActiveSurface::RWTASProfile_ptr _tao_objptr =
    ActiveSurface::RWTASProfile::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::RWTASProfile_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::RWTASProfile>::insert (
      _tao_any,
      ActiveSurface::RWTASProfile::_tao_any_destructor,
      ActiveSurface::_tc_RWTASProfile,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::RWTASProfile_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::RWTASProfile>::extract (
        _tao_any,
        ActiveSurface::RWTASProfile::_tao_any_destructor,
        ActiveSurface::_tc_RWTASProfile,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ActiveSurface::NotoActiveSurfaceBoss>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ActiveSurface
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NotoActiveSurfaceBoss_ptr _tao_elem)
  {
    NotoActiveSurfaceBoss_ptr _tao_objptr =
      NotoActiveSurfaceBoss::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NotoActiveSurfaceBoss_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<NotoActiveSurfaceBoss>::insert (
        _tao_any,
        NotoActiveSurfaceBoss::_tao_any_destructor,
        _tc_NotoActiveSurfaceBoss,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NotoActiveSurfaceBoss_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<NotoActiveSurfaceBoss>::extract (
          _tao_any,
          NotoActiveSurfaceBoss::_tao_any_destructor,
          _tc_NotoActiveSurfaceBoss,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::NotoActiveSurfaceBoss_ptr _tao_elem)
{
  ActiveSurface::NotoActiveSurfaceBoss_ptr _tao_objptr =
    ActiveSurface::NotoActiveSurfaceBoss::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ActiveSurface::NotoActiveSurfaceBoss_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ActiveSurface::NotoActiveSurfaceBoss>::insert (
      _tao_any,
      ActiveSurface::NotoActiveSurfaceBoss::_tao_any_destructor,
      ActiveSurface::_tc_NotoActiveSurfaceBoss,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ActiveSurface::NotoActiveSurfaceBoss_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ActiveSurface::NotoActiveSurfaceBoss>::extract (
        _tao_any,
        ActiveSurface::NotoActiveSurfaceBoss::_tao_any_destructor,
        ActiveSurface::_tc_NotoActiveSurfaceBoss,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:51


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ActiveSurface::TASOneWayAction _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ActiveSurface::TASOneWayAction & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ActiveSurface::TASOneWayAction> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_ActiveSurface_TASOneWayActionSeq_CPP_
#define _TAO_CDR_OP_ActiveSurface_TASOneWayActionSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::TASOneWayActionSeq &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::TASOneWayActionSeq &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_ActiveSurface_TASOneWayActionSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::CBTASOneWayAction_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::CBTASOneWayAction_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::CBTASOneWayAction RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_CBTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::AlarmTASOneWayAction_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::AlarmTASOneWayAction_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::AlarmTASOneWayAction RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_AlarmTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::PTASOneWayAction_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::PTASOneWayAction_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::PTASOneWayAction RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_PTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::ROTASOneWayAction_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::ROTASOneWayAction_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::ROTASOneWayAction RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_ROTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::RWTASOneWayAction_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::RWTASOneWayAction_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::RWTASOneWayAction RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_RWTASOneWayAction_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:51


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ActiveSurface::TASProfile _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ActiveSurface::TASProfile & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ActiveSurface::TASProfile> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_ActiveSurface_TASProfileSeq_CPP_
#define _TAO_CDR_OP_ActiveSurface_TASProfileSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::TASProfileSeq &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::TASProfileSeq &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_ActiveSurface_TASProfileSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::CBTASProfile_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::CBTASProfile_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::CBTASProfile RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_CBTASProfile_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::AlarmTASProfile_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::AlarmTASProfile_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::AlarmTASProfile RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_AlarmTASProfile_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::PTASProfile_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::PTASProfile_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::PTASProfile RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_PTASProfile_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::ROTASProfile_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::ROTASProfile_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::ROTASProfile RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_ROTASProfile_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::RWTASProfile_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::RWTASProfile_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::RWTASProfile RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_RWTASProfile_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ActiveSurface::NotoActiveSurfaceBoss_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ActiveSurface::NotoActiveSurfaceBoss_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ActiveSurface::NotoActiveSurfaceBoss RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        ActiveSurface__TAO_NotoActiveSurfaceBoss_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



