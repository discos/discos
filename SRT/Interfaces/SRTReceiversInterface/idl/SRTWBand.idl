#ifndef ___SRTWBAND_IDL__
#define ___SRTWBAND_IDL__


#include <baci.idl>
#include <ComponentErrors.idl>
#include "GenericReceiver.idl"
#include <ManagmentDefinitions.idl>

#pragma prefix "alma"

module Receivers {

    /**
    * This module defines the interface of the W bands receiver installed in the SRT.
    * @author <a href=mailto:lorenzo.monti@inaf.it>Lorenzo Monti</a>
    * <br>
    * @copybrief Receivers::Receiver::status
    * the single bits of the status word assumed the following meaning:
    * @arg \c 0 LOCAL, set if the receiver is in remote and can be controlled remotely, error
    * @arg \c 1 VACUUMSENSOR, set if the vacuum sensor is turned on, status
    * @arg \c 2 VACUUMPUMPSTATUS, set if the vacuum pump is on, status
    * @arg \c 3 VACUUMPUMPFAULT, set if the vacuum pump is in fault state, warning
    * @arg \c 4 VACUUMVALVEOPEN, set if the vacuum valve i sopen, status
    * @arg \c 5 COOLHEADON, set if the cool head is turned on, status
    * @arg \c 6 COMPRESSORFAULT, set if the compressor is in fault state is turned on, error
    * @arg \c 7 NOISEMARK, set is the calibration diode is on, status
    * @arg \c 8 NOISEMARKERROR, set if the calibration mark should be and it is not, or viceversa, error
    * @arg \c 9 EXTNOISEMARK, set if the control of the calibration diode from external source is enabled, status
    * @arg \c 10 CONNECTIONERROR, set if an error was found during the comunication from/to the receiver, error
    * @arg \c 11 UNLOCKED, set if at least one of the local oscillator is not locked, error
    * @copybrief Receivers::CommonReceiverInterface::setLO 
    */
    interface SRTWBand : ACS::CharacteristicComponent {

        /***************************************************\
         *           COMMON_RECEIVER_INTERFACE             *
        \***************************************************/
        // string enable_USB_devs();
        // string disable_USB_devs();
        // string set_w_LO_freq_PolH();
        // string set_w_LO_freq_PolV();
        // string get_w_LO_PolH();
        // string get_w_LO_PolV();
        // string get_w_LO_Pols();
        // string get_w_LO_Synths_Temp();
        // string get_w_LO_HKP_Temp();
        // string set_W_LO_RefH();
        // string set_W_LO_RefV();
        // string get_W_LO_RefH();
        // string get_W_LO_RefV();
        // string get_w_LO_status();
        // string set_LO_att_PolH();
        // string set_LO_att_PolV();
        // string get_LO_att_PolH();
        // string get_LO_att_PolV();
        // string get_LO_atts();
        // string set_w_home();
        // string set_w_solar_attn();
        // string set_w_cal();
        // string set_w_passthrough();
        // string get_w_mod();
        // string set_IF_switch_config();
        // string get_IF_switch_config();

        // void setMode(in string mode) raises (ReceiversErrors::ConfigurationEx);
        // readonly attribute ACS::ROdoubleSeq LO;
        // readonly attribute ACS::ROlong feeds;
        // readonly attribute ACS::ROlong IFs;
        // readonly attribute ACS::ROlongSeq polarization;
        // readonly attribute ACS::ROdoubleSeq initialFrequency;
        // readonly attribute ACS::ROdoubleSeq bandWidth;
        // readonly attribute ACS::ROstring mode;     
        // void calOn();
        // void calOff();
        // void setLO(in ACS::doubleSeq lo1);
        // ACS::doubleSeq getCalibrationMark(...)
        // long getFeeds(out ACS::doubleSeq X,out ACS::doubleSeq Y,out ACS::doubleSeq power);
        // double getTaper(in double freq,in double bandWidth,in long feed,in long ifNumber,out double waveLen)
        
        // readonly attribute ACS::ROstring WLOAddress;
        // readonly attribute ACS::ROlong WLOPort;
        // readonly attribute ACS::ROstring WSwitchMatrixAddress;
        // readonly attribute ACS::ROlong SwitchMatrixPort;
        // readonly attribute ACS::ROstring WCALAddress;
        // readonly attribute ACS::ROlong WCALPort;
        // readonly attribute ACS::ROlong ControlSocketResponseTime;


        /***************************************************\
         *           GENERIC_RECEIVER_INTERFACE            *
        \***************************************************/
        // readonly attribute ACS::ROdouble vacuum;
        // readonly attribute ACS::ROpattern status;
        // readonly attribute Management::ROTSystemStatus receiverStatus;
        // void turnLNAsOn();
        // void turnLNAsOff();
        // void activate();

         
    };

};

#endif
