#ifndef __SRTKBANDMF_IDL__
#define __SRTKBANDMF_IDL__
/***************************************************************\
 *  Authors: 
 *      Marco Buttu <mbuttu@oa-cagliari.inaf.it>
 *      Andrea Orlati <a.orlati@ira.inaf.it>
\***************************************************************/

#include <baci.idl>
#include <ComponentErrors.idl>
#include "GenericReceiver.idl"

#pragma prefix "alma"

module Receivers {

    /// Interface of Receiver. The receiver has N feeds
    interface SRTKBandMFReceiver : ACS::CharacteristicComponent, Receiver {

        /** Set the receiver operating mode.
         *
         *  @param mode the operating mode of receiver. Possible values are:
         *  <ul>
         *    <li><em>SDISH</em>: Single Dish mode</li>
         *    <li><em>VLBI</em>: VLBI mode</li>
         *    <li>...</li>
         *  </ul>
         *  @throw ReceiversErrors::ConfigurationEx
         */
        // void setMode(in string mode) raises (ReceiversErrors::ConfigurationEx);


  //      /* LNA PROPERTIES */

  //      /**
  //       * We use the ROdoubleSeq, one sequence for each amplifier stage
  //       * and channel. The first index is for the amplifier stage, and
  //       * the second one is for the feed. The letters L and R mean Left 
  //       * and Right. For a N feed receiver we have the following
  //       * properties:
  //       * 
  //       * idL1 (idL1_1, idL1_2, ...., idL1_N)
  //       * idR1 (idR1_1, idR1_2, ...., idR1_N)
  //       * idL2 (idL2_1, idL2_2, ...., idL2_N)
  //       * idR2 (idR2_1, idR2_2, ...., idR2_N)
  //       *     |
  //       * idL5 (idL5_1, idL5_2, ...., idL5_N)
  //       * idR5 (idR5_1, idR5_2, ...., idR5_N)
  //       * 
  //       * 
  //       * vdL1 (vdL1_1, vdL1_2, ...., vdL1_N)
  //       * vdR1 (vdR1_1, vdR1_2, ...., vdR1_N)
  //       * vdL2 (vdL2_1, vdL2_2, ...., vdL2_N)
  //       * vdR2 (vdR2_1, vdR2_2, ...., vdR2_N)
  //       *     |
  //       * vdL5 (vdL5_1, vdL5_2, ...., vdL5_N)
  //       * vdR5 (vdR5_1, vdR5_2, ...., vdR5_N)
  //       * 
  //       * 
  //       * vgL1 (vgL1_1, vgL1_2, ...., vgL1_N)
  //       * vgR1 (vgR1_1, vgR1_2, ...., vgR1_N)
  //       * vgL2 (vgL2_1, vgL2_2, ...., vgL2_N)
  //       * vgR2 (vgR2_1, vgR2_2, ...., vgR2_N)
  //       *     |
  //       * vgL5 (vgL5_1, vgL5_2, ...., vgL5_N)
  //       * vgR5 (vgR5_1, vgR5_2, ...., vgR5_N)
  //       */

  //      /**************************\ 
  //       *      DRAIN VOLTAGE     *
  //      \**************************/ 

  //      /// LNA Drain voltage: stage number 1, left channel
  //      readonly attribute ACS::ROdoubleSeq vdL1;

  //      /// LNA Drain voltage: stage number 1, right channel
  //      readonly attribute ACS::ROdoubleSeq vdR1;

  //      /// LNA Drain voltage: stage number 2, left channel
  //      readonly attribute ACS::ROdoubleSeq vdL2;

  //      /// LNA Drain voltage: stage number 2, right channel
  //      readonly attribute ACS::ROdoubleSeq vdR2;

  //      /// LNA Drain voltage: stage number 3, left channel
  //      readonly attribute ACS::ROdoubleSeq vdL3;

  //      /// LNA Drain voltage: stage number 3, right channel
  //      readonly attribute ACS::ROdoubleSeq vdR3;

  //      /// LNA Drain voltage: stage number 4, left channel
  //      readonly attribute ACS::ROdoubleSeq vdL4;

  //      /// LNA Drain voltage: stage number 4, right channel
  //      readonly attribute ACS::ROdoubleSeq vdR4;

  //      /// LNA Drain voltage: stage number 5, left channel
  //      readonly attribute ACS::ROdoubleSeq vdL5;

  //      /// LNA Drain voltage: stage number 5, right channel
  //      readonly attribute ACS::ROdoubleSeq vdR5;


  //      /**************************\ 
  //       *      DRAIN CURRENT     *
  //      \**************************/ 

  //      /// stage number 1, left channel
  //      readonly attribute ACS::ROdoubleSeq idL1;

  //      /// stage number 1, right channel
  //      readonly attribute ACS::ROdoubleSeq idR1;

  //      /// stage number 2, left channel
  //      readonly attribute ACS::ROdoubleSeq idL2;

  //      /// stage number 2, right channel
  //      readonly attribute ACS::ROdoubleSeq idR2;

  //      /// stage number 3, left channel
  //      readonly attribute ACS::ROdoubleSeq idL3;

  //      /// stage number 3, right channel
  //      readonly attribute ACS::ROdoubleSeq idR3;

  //      /// stage number 4, left channel
  //      readonly attribute ACS::ROdoubleSeq idL4;

  //      /// stage number 4, right channel
  //      readonly attribute ACS::ROdoubleSeq idR4;

  //      /// stage number 5, left channel
  //      readonly attribute ACS::ROdoubleSeq idL5;

  //      /// stage number 5, right channel
  //      readonly attribute ACS::ROdoubleSeq idR5;


  //      /**************************\ 
  //       *       GATE VOLTAGE     *
  //      \**************************/ 

  //      /// LNA Gate voltage: stage number 1, left channel
  //      readonly attribute ACS::ROdoubleSeq vgL1;

  //      /// LNA Gate voltage: stage number 1, right channel
  //      readonly attribute ACS::ROdoubleSeq vgR1;

  //      /// LNA Gate voltage: stage number 2, left channel
  //      readonly attribute ACS::ROdoubleSeq vgL2;

  //      /// LNA Gate voltage: stage number 2, right channel
  //      readonly attribute ACS::ROdoubleSeq vgR2;

  //      /// LNA Gate voltage: stage number 3, left channel
  //      readonly attribute ACS::ROdoubleSeq vgL3;

  //      /// LNA Gate voltage: stage number 3, right channel
  //      readonly attribute ACS::ROdoubleSeq vgR3;

  //      /// LNA Gate voltage: stage number 4, left channel
  //      readonly attribute ACS::ROdoubleSeq vgL4;

  //      /// LNA Gate voltage: stage number 4, right channel
  //      readonly attribute ACS::ROdoubleSeq vgR4;

  //      /// LNA Gate voltage: stage number 5, left channel
  //      readonly attribute ACS::ROdoubleSeq vgL5;

  //      /// LNA Gate voltage: stage number 5, right channel
  //      readonly attribute ACS::ROdoubleSeq vgR5;


        /***************************************************\
         *           COMMON_RECEIVER_INTERFACE             *
         ***************************************************

        readonly attribute ACS::ROdoubleSeq LO;
        
        readonly attribute ACS::ROlong feeds;
        
        readonly attribute ACS::ROlong IFs;

        readonly attribute ACS::ROlongSeq polarization;

        void calOn() raises (ComponentErrors::ComponentErrorsEx);

        void calOff() raises (ComponentErrors::ComponentErrorsEx);


        void setLO(in ACS::doubleSeq lo1) raises (ComponentErrors::ComponentErrorsEx);

        ACS::doubleSeq getCalibrationMark(in ACS::doubleSeq freqs,in ACS::doubleSeq bandwidths,in ACS::longSeq feeds,in ACS::longSeq ifs) 
           raises (ComponentErrors::ComponentErrorsEx);

        long getFeeds(out ACS::doubleSeq X,out ACS::doubleSeq Y,out ACS::doubleSeq power) raises (ComponentErrors::ComponentErrorsEx);

        double getTaper(in double freq,in double bandWidth,in long feed,in long ifNumber,out double waveLen) 
            raises (ComponentErrors::ComponentErrorsEx);


        /***************************************************\
         *               GENERIC_RECEIVER                  *
         ***************************************************

        readonly attribute ACS::ROdouble vacuum;

        readonly attribute ACS::ROdouble lowTemperature;

        readonly attribute ACS::ROdouble highTemperature;

        readonly attribute ACS::ROpattern status;

        void turnLNAsOn();

        void turnLNAsOff();

        \***************************************************/


	};


};

#endif
