/***************************************************************\
 *  Author: Giuseppe Carboni <giuseppe.carboni@inaf.it>
\***************************************************************/
#ifndef __SRTMINORSERVOCOMMON_MIDL__
#define __SRTMINORSERVOCOMMON_MIDL__

#include <baci.idl>
#include <enumpropMACRO.idl>
#include <ManagmentDefinitions.idl>
#include <MinorServoDefinitions.idl>
#include <ComponentErrors.idl>
#include <MinorServoErrors.idl>

#pragma prefix "alma"

module MinorServo
{
    /**
     * Enumerator which indicates a Leonardo minor servo configuration
     */
    enum SRTMinorServoFocalConfiguration
    {
        CONFIGURATION_UNKNOWN,
        CONFIGURATION_PARK,
        CONFIGURATION_PRIMARY,
        CONFIGURATION_GREGORIAN1,
        CONFIGURATION_GREGORIAN2,
        CONFIGURATION_GREGORIAN3,
        CONFIGURATION_GREGORIAN4,
        CONFIGURATION_GREGORIAN5,
        CONFIGURATION_GREGORIAN6,
        CONFIGURATION_GREGORIAN7,
        CONFIGURATION_GREGORIAN8,
        CONFIGURATION_BWG1,
        CONFIGURATION_BWG2,
        CONFIGURATION_BWG3,
        CONFIGURATION_BWG4
    };
    ACS_ENUM(SRTMinorServoFocalConfiguration);

    /**
     * Enumerator which indicates the status of the control for the Leonardo minor servo system
     */
    enum SRTMinorServoControlStatus
    {
        CONTROL_DISCOS,
        CONTROL_VBRAIN
    };
    ACS_ENUM(SRTMinorServoControlStatus);

    /**
     * Enumerator which indicates the position of the gregorian cover
     */
    enum SRTMinorServoGregorianCoverStatus
    {
        COVER_STATUS_UNKNOWN,
        COVER_STATUS_CLOSED,
        COVER_STATUS_OPEN
    };
    ACS_ENUM(SRTMinorServoGregorianCoverStatus);

    /**
     * Enumerator which indicates the status of the gregorian air blade
     */
    enum SRTMinorServoGregorianAirBladeStatus
    {
        AIR_BLADE_STATUS_AUTO,
        AIR_BLADE_STATUS_OFF,
        AIR_BLADE_STATUS_ON
    };
    ACS_ENUM(SRTMinorServoGregorianAirBladeStatus);

    /**
     * Enumerator which indicates the status of a servo drive cabinet
     */
    enum SRTMinorServoCabinetStatus
    {
        DRIVE_CABINET_OK,
        DRIVE_CABINET_WARNING,
        DRIVE_CABINET_ERROR
    };
    ACS_ENUM(SRTMinorServoCabinetStatus);

    /**
     * Enumerator which indicates the operating mode of a single servo
     */
    enum SRTMinorServoOperativeMode
    {
        OPERATIVE_MODE_UNKNOWN,
        OPERATIVE_MODE_SETUP,
        OPERATIVE_MODE_STOW,
        OPERATIVE_MODE_STOP,
        OPERATIVE_MODE_PRESET,
        OPERATIVE_MODE_PROGRAMTRACK
    };
    ACS_ENUM(SRTMinorServoOperativeMode);

    /**
     * Enumerator which indicates the type of movement made by the whole system (i.e.: performing setup, parking, tracking...)
     */
    enum SRTMinorServoMotionStatus
    {
        MOTION_STATUS_UNCONFIGURED,
        MOTION_STATUS_STARTING,
        MOTION_STATUS_CONFIGURED,
        MOTION_STATUS_TRACKING,
        MOTION_STATUS_PARKING,
        MOTION_STATUS_PARKED,
        MOTION_STATUS_ERROR
    };
    ACS_ENUM(SRTMinorServoMotionStatus);

    /**
     * Enumerator which indicates what type of error is present on the component
     */
    enum SRTMinorServoError
    {
        ERROR_NO_ERROR,
        ERROR_NOT_CONNECTED,
        ERROR_MAINTENANCE,
        ERROR_EMERGENCY_STOP,
        ERROR_COVER_WRONG_POSITION,
        ERROR_CONFIG_ERROR,
        ERROR_COMMAND_ERROR,
        ERROR_SERVO_BLOCKED,
        ERROR_DRIVE_CABINET
    };
    ACS_ENUM(SRTMinorServoError);
};
#endif
